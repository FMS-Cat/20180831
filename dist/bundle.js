!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=114)}([function(t,e,n){"use strict";var r=n(4),i=n(32),o=n(15),a=n(76),s=n(11);function u(t){return t}function l(t,e){for(var n=0;n<t.length;++n)e[n]=255&t.charCodeAt(n);return e}e.newBlob=function(t,n){e.checkSupport("blob");try{return new Blob([t],{type:n})}catch(e){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return r.append(t),r.getBlob(n)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var c={stringifyByChunk:function(t,e,n){var r=[],i=0,o=t.length;if(o<=n)return String.fromCharCode.apply(null,t);for(;i<o;)"array"===e||"nodebuffer"===e?r.push(String.fromCharCode.apply(null,t.slice(i,Math.min(i+n,o)))):r.push(String.fromCharCode.apply(null,t.subarray(i,Math.min(i+n,o)))),i+=n;return r.join("")},stringifyByChar:function(t){for(var e="",n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return e},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(t){return!1}}()}};function f(t){var n=65536,r=e.getTypeOf(t),i=!0;if("uint8array"===r?i=c.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=c.applyCanBeUsed.nodebuffer),i)for(;n>1;)try{return c.stringifyByChunk(t,r,n)}catch(t){n=Math.floor(n/2)}return c.stringifyByChar(t)}function d(t,e){for(var n=0;n<t.length;n++)e[n]=t[n];return e}e.applyFromCharCode=f;var h={};h.string={string:u,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return h.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,o.allocBuffer(t.length))}},h.array={string:f,array:u,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(t)}},h.arraybuffer={string:function(t){return f(new Uint8Array(t))},array:function(t){return d(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:u,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return o.newBufferFrom(new Uint8Array(t))}},h.uint8array={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:u,nodebuffer:function(t){return o.newBufferFrom(t)}},h.nodebuffer={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return h.nodebuffer.uint8array(t).buffer},uint8array:function(t){return d(t,new Uint8Array(t.length))},nodebuffer:u},e.transformTo=function(t,n){if(n||(n=""),!t)return n;e.checkSupport(t);var r=e.getTypeOf(n);return h[r][t](n)},e.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":r.nodebuffer&&o.isBuffer(t)?"nodebuffer":r.uint8array&&t instanceof Uint8Array?"uint8array":r.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},e.checkSupport=function(t){if(!r[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},e.MAX_VALUE_16BITS=65535,e.MAX_VALUE_32BITS=-1,e.pretty=function(t){var e,n,r="";for(n=0;n<(t||"").length;n++)r+="\\x"+((e=t.charCodeAt(n))<16?"0":"")+e.toString(16).toUpperCase();return r},e.delay=function(t,e,n){a(function(){t.apply(n||null,e||[])})},e.inherits=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n},e.extend=function(){var t,e,n={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===n[e]&&(n[e]=arguments[t][e]);return n},e.prepareContent=function(t,n,o,a,u){return s.Promise.resolve(n).then(function(t){return r.blob&&(t instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(t)))&&"undefined"!=typeof FileReader?new s.Promise(function(e,n){var r=new FileReader;r.onload=function(t){e(t.target.result)},r.onerror=function(t){n(t.target.error)},r.readAsArrayBuffer(t)}):t}).then(function(n){var c=e.getTypeOf(n);return c?("arraybuffer"===c?n=e.transformTo("uint8array",n):"string"===c&&(u?n=i.decode(n):o&&!0!==a&&(n=function(t){return l(t,r.uint8array?new Uint8Array(t.length):new Array(t.length))}(n))),n):s.Promise.reject(new Error("Can't read the data of '"+t+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},function(t,e,n){"use strict";function r(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var n=0;n<this._listeners[t].length;n++)this._listeners[t][n].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.end()}),t.on("error",function(t){e.error(t)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;this.isPaused=!1;var t=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},t.exports=r},function(t){t.exports={fps:50,resolution:[400,400],reflectionNum:128,reflectionPerFrame:2,frames:150,seed:1145141919810}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";(function(t){if(e.base64=!0,e.array=!0,e.string=!0,e.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,e.nodebuffer=void 0!==t,e.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)e.blob=!1;else{var r=new ArrayBuffer(0);try{e.blob=0===new Blob([r],{type:"application/zip"}).size}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(r),e.blob=0===i.getBlob("application/zip").size}catch(t){e.blob=!1}}}try{e.nodestream=!!n(26).Readable}catch(t){e.nodestream=!1}}).call(this,n(9).Buffer)},function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var n=e.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)i(n,r)&&(t[r]=n[r])}}return t},e.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var o={arraySet:function(t,e,n,r,i){if(e.subarray&&t.subarray)t.set(e.subarray(n,n+r),i);else for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){var e,n,r,i,o,a;for(r=0,e=0,n=t.length;e<n;e++)r+=t[e].length;for(a=new Uint8Array(r),i=0,e=0,n=t.length;e<n;e++)o=t[e],a.set(o,i),i+=o.length;return a}},a={arraySet:function(t,e,n,r,i){for(var o=0;o<r;o++)t[i+o]=e[n+o]},flattenChunks:function(t){return[].concat.apply([],t)}};e.setTyped=function(t){t?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,o)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,a))},e.setTyped(r)},function(t,e,n){"use strict";var r=n(13),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=f;var o=n(10);o.inherits=n(8);var a=n(27),s=n(19);o.inherits(f,a);for(var u=i(s.prototype),l=0;l<u.length;l++){var c=u[l];f.prototype[c]||(f.prototype[c]=s.prototype[c])}function f(t){if(!(this instanceof f))return new f(t);a.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||r.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(f.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(f.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),f.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,n){"use strict";for(var r=n(0),i=n(4),o=n(15),a=n(1),s=new Array(256),u=0;u<256;u++)s[u]=u>=252?6:u>=248?5:u>=240?4:u>=224?3:u>=192?2:1;s[254]=s[254]=1;function l(){a.call(this,"utf-8 decode"),this.leftOver=null}function c(){a.call(this,"utf-8 encode")}e.utf8encode=function(t){return i.nodebuffer?o.newBufferFrom(t,"utf-8"):function(t){var e,n,r,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),u+=n<128?1:n<2048?2:n<65536?3:4;for(e=i.uint8array?new Uint8Array(u):new Array(u),a=0,o=0;a<u;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),n<128?e[a++]=n:n<2048?(e[a++]=192|n>>>6,e[a++]=128|63&n):n<65536?(e[a++]=224|n>>>12,e[a++]=128|n>>>6&63,e[a++]=128|63&n):(e[a++]=240|n>>>18,e[a++]=128|n>>>12&63,e[a++]=128|n>>>6&63,e[a++]=128|63&n);return e}(t)},e.utf8decode=function(t){return i.nodebuffer?r.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,n,i,o,a=t.length,u=new Array(2*a);for(n=0,e=0;e<a;)if((i=t[e++])<128)u[n++]=i;else if((o=s[i])>4)u[n++]=65533,e+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&e<a;)i=i<<6|63&t[e++],o--;o>1?u[n++]=65533:i<65536?u[n++]=i:(i-=65536,u[n++]=55296|i>>10&1023,u[n++]=56320|1023&i)}return u.length!==n&&(u.subarray?u=u.subarray(0,n):u.length=n),r.applyFromCharCode(u)}(t=r.transformTo(i.uint8array?"uint8array":"array",t))},r.inherits(l,a),l.prototype.processChunk=function(t){var n=r.transformTo(i.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var o=n;(n=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),n.set(o,this.leftOver.length)}else n=this.leftOver.concat(n);this.leftOver=null}var a=function(t,e){var n;for((e=e||t.length)>t.length&&(e=t.length),n=e-1;n>=0&&128==(192&t[n]);)n--;return n<0?e:0===n?e:n+s[t[n]]>e?n:e}(n),u=n;a!==n.length&&(i.uint8array?(u=n.subarray(0,a),this.leftOver=n.subarray(a,n.length)):(u=n.slice(0,a),this.leftOver=n.slice(a,n.length))),this.push({data:e.utf8decode(u),meta:t.meta})},l.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:e.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},e.Utf8DecodeWorker=l,r.inherits(c,a),c.prototype.processChunk=function(t){this.push({data:e.utf8encode(t.data),meta:t.meta})},e.Utf8EncodeWorker=c},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(62),i=n(63),o=n(25);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=d(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),i=(t=s(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|h(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?s(t,0):d(t,e);if("Buffer"===e.type&&o(e.data))return d(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(c(e),t=s(t,e<0?0:0|h(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function d(t,e){var n=e.length<0?0:0|h(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function h(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return $(t).length;default:if(r)return z(t).length;e=(""+e).toLowerCase(),r=!0}}function v(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function m(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:g(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):g(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function g(t,e,n,r,i){var o,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function l(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var c=-1;for(o=n;o<s;o++)if(l(t,o)===l(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(n+u>s&&(n=s-u),o=n;o>=0;o--){for(var f=!0,d=0;d<u;d++)if(l(t,o+d)!==l(e,d)){f=!1;break}if(f)return o}return-1}function _(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function y(t,e,n,r){return U(z(e,t.length-n),t,n,r)}function b(t,e,n,r){return U(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return b(t,e,n,r)}function x(t,e,n,r){return U($(e),t,n,r)}function C(t,e,n,r){return U(function(t,e){for(var n,r,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function k(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function E(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,a,s,u,l=t[i],c=null,f=l>239?4:l>223?3:l>191?2:1;if(i+f<=n)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(u=(15&l)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=f}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=S));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?E(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,n);case"utf8":case"utf-8":return E(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return O(this,e,n);case"base64":return k(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,a=n-e,s=Math.min(o,a),l=this.slice(r,i),c=t.slice(e,n),f=0;f<s;++f)if(l[f]!==c[f]){o=l[f],a=c[f];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return m(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return m(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return _(this,t,e,n);case"utf8":case"utf-8":return y(this,t,e,n);case"ascii":return b(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return x(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function T(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=B(t[o]);return i}function N(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function L(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function P(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function D(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function F(t,e,n,r,o){return o||D(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function j(t,e,n,r,o){return o||D(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||L(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||L(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||L(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||L(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||L(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||L(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||L(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||L(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||L(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||L(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||L(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):P(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):P(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);I(this,t,e,n,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<n&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);I(this,t,e,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):P(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):P(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return F(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return F(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return j(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return j(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var a=u.isBuffer(t)?t:z(new u(t,r).toString()),s=a.length;for(o=0;o<n-e;++o)this[o+e]=a[o%s]}return this};var R=/[^+\/0-9A-Za-z-_]/g;function B(t){return t<16?"0"+t.toString(16):t.toString(16)}function z(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function $(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(R,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function U(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(3))},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(9).Buffer)},function(t,e,n){"use strict";var r=null;r="undefined"!=typeof Promise?Promise:n(90),t.exports={Promise:r}},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,l=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&h())}function h(){if(!c){var t=s(d);c=!0;for(var e=l.length;e;){for(u=l,l=[];++f<e;)u&&u[f].run();f=-1,e=l.length}u=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new p(t,e)),1!==l.length||c||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(12))},function(t,e,n){var r=n(9),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function a(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=a),o(i,a),a.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},a.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},a.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},a.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,n){"use strict";(function(e){t.exports={isNode:void 0!==e,newBufferFrom:function(t,n){return new e(t,n)},allocBuffer:function(t){return e.alloc?e.alloc(t):new e(t)},isBuffer:function(t){return e.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}}).call(this,n(9).Buffer)},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,a,s,u,l;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}if(o(n=this._events[t]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),n.apply(this,s)}else if(i(n))for(s=Array.prototype.slice.call(arguments,1),a=(l=n.slice()).length,u=0;u<a;u++)l[u].apply(this,s);return!0},n.prototype.addListener=function(t,e){var a;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(a=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&a>0&&this._events[t].length>a&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){if(!r(e))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(t,i),n||(n=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},n.prototype.removeListener=function(t,e){var n,o,a,s;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(a=(n=this._events[t]).length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(s=a;s-- >0;)if(n[s]===e||n[s].listener&&n[s].listener===e){o=s;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[t]))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){return this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){(e=t.exports=n(27)).Stream=e,e.Readable=e,e.Writable=n(19),e.Duplex=n(6),e.Transform=n(31),e.PassThrough=n(71)},function(t,e,n){"use strict";(function(e,r,i){var o=n(13);function a(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=_;var s,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;_.WritableState=g;var l=n(10);l.inherits=n(8);var c={deprecate:n(70)},f=n(28),d=n(14).Buffer,h=i.Uint8Array||function(){};var p,v=n(29);function m(){}function g(t,e){s=s||n(6),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,l=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(l||0===l)?l:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var f=!1===t.decodeStrings;this.decodeStrings=!f,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(k,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),k(t,e))}(t,n,r,e,i);else{var a=x(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||w(t,n),r?u(b,t,n,a,i):b(t,n,a,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function _(t){if(s=s||n(6),!(p.call(_,this)||this instanceof s))return new _(t);this._writableState=new g(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),f.call(this)}function y(t,e,n,r,i,o,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function b(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),k(t,e)}function w(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var s=0,u=!0;n;)i[s]=n,n.isBuf||(u=!1),n=n.next,s+=1;i.allBuffers=u,y(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new a(e),e.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,f=n.callback;if(y(t,e,!1,e.objectMode?1:l.length,l,c,f),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function x(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function C(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),k(t,e)})}function k(t,e){var n=x(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(C,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}l.inherits(_,f),g.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(g.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(_,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===_&&(t&&t._writableState instanceof g)}})):p=function(t){return t instanceof this},_.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},_.prototype.write=function(t,e,n){var r=this._writableState,i=!1,a=!r.objectMode&&function(t){return d.isBuffer(t)||t instanceof h}(t);return a&&!d.isBuffer(t)&&(t=function(t){return d.from(t)}(t)),"function"==typeof e&&(n=e,e=null),a?e="buffer":e||(e=r.defaultEncoding),"function"!=typeof n&&(n=m),r.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(a||function(t,e,n,r){var i=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(t.emit("error",a),o.nextTick(r,a),i=!1),i}(this,r,t,n))&&(r.pendingcb++,i=function(t,e,n,r,i,o){if(!n){var a=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=d.from(e,n));return e}(e,r,i);r!==a&&(n=!0,i="buffer",r=a)}var s=e.objectMode?1:r.length;e.length+=s;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else y(t,e,!1,s,r,i,o);return u}(this,r,a,t,e,n)),i},_.prototype.cork=function(){this._writableState.corked++},_.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||w(this,t))},_.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(_.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),_.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},_.prototype._writev=null,_.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!==t&&void 0!==t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,k(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(_.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),_.prototype.destroy=v.destroy,_.prototype._undestroy=v.undestroy,_.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(12),n(68).setImmediate,n(3))},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(35)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";var r=n(11),i=n(39),o=n(40),a=n(41);o=n(40);function s(t,e,n,r,i){this.compressedSize=t,this.uncompressedSize=e,this.crc32=n,this.compression=r,this.compressedContent=i}s.prototype={getContentWorker:function(){var t=new i(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),e=this;return t.on("end",function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),t},getCompressedWorker:function(){return new i(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(t,e,n){return t.pipe(new a).pipe(new o("uncompressedSize")).pipe(e.compressWorker(n)).pipe(new o("compressedSize")).withStreamInfo("compression",e)},t.exports=s},function(t,e,n){"use strict";var r=n(0);var i=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();t.exports=function(t,e){return void 0!==t&&t.length?"string"!==r.getTypeOf(t)?function(t,e,n,r){var o=i,a=r+n;t^=-1;for(var s=r;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}(0|e,t,t.length,0):function(t,e,n,r){var o=i,a=r+n;t^=-1;for(var s=r;s<a;s++)t=t>>>8^o[255&(t^e.charCodeAt(s))];return-1^t}(0|e,t,t.length,0):0}},function(t,e,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(64)},function(t,e,n){"use strict";(function(e,r){var i=n(13);t.exports=y;var o,a=n(25);y.ReadableState=_;n(17).EventEmitter;var s=function(t,e){return t.listeners(e).length},u=n(28),l=n(14).Buffer,c=e.Uint8Array||function(){};var f=n(10);f.inherits=n(8);var d=n(65),h=void 0;h=d&&d.debuglog?d.debuglog("stream"):function(){};var p,v=n(66),m=n(29);f.inherits(y,u);var g=["error","close","destroy","pause","resume"];function _(t,e){o=o||n(6),t=t||{};var r=e instanceof o;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,a=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new v,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=n(30).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function y(t){if(o=o||n(6),!(this instanceof y))return new y(t);this._readableState=new _(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function b(t,e,n,r,i){var o,a=t._readableState;null===e?(a.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,k(t)}(t,a)):(i||(o=function(t,e){var n;(function(t){return l.isBuffer(t)||t instanceof c})(e)||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));return n}(a,e)),o?t.emit("error",o):a.objectMode||e&&e.length>0?("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===l.prototype||(e=function(t){return l.from(t)}(e)),r?a.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):w(t,a,e,!0):a.ended?t.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(e=a.decoder.write(e),a.objectMode||0!==e.length?w(t,a,e,!1):S(t,a)):w(t,a,e,!1))):r||(a.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(a)}function w(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&k(t)),S(t,e)}Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),y.prototype.destroy=m.destroy,y.prototype._undestroy=m.undestroy,y.prototype._destroy=function(t,e){this.push(null),e(t)},y.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=l.from(t,e),e=""),n=!0),b(this,t,e,!1,n)},y.prototype.unshift=function(t){return b(this,t,null,!0,!1)},y.prototype.isPaused=function(){return!1===this._readableState.flowing},y.prototype.setEncoding=function(t){return p||(p=n(30).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};var x=8388608;function C(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=x?t=x:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function k(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(h("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(E,t):E(t))}function E(t){h("emit readable"),t.emit("readable"),N(t)}function S(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(A,t,e))}function A(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(h("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function O(t){h("readable nexttick read 0"),t.read(0)}function T(t,e){e.reading||(h("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),N(t),e.flowing&&!e.reading&&t.read(0)}function N(t){var e=t._readableState;for(h("flow",e.flowing);e.flowing&&null!==t.read(););}function L(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0===(t-=a)){a===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=l.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,a),0===(t-=a)){a===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function I(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(M,e,t))}function M(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function P(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}y.prototype.read=function(t){h("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return h("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?I(this):k(this),null;if(0===(t=C(t,e))&&e.ended)return 0===e.length&&I(this),null;var r,i=e.needReadable;return h("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&h("length less than watermark",i=!0),e.ended||e.reading?h("reading or ended",i=!1):i&&(h("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=C(n,e))),null===(r=t>0?L(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&I(this)),null!==r&&this.emit("data",r),r},y.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},y.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,h("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?c:y;function l(e,r){h("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,h("cleanup"),t.removeListener("close",g),t.removeListener("finish",_),t.removeListener("drain",f),t.removeListener("error",m),t.removeListener("unpipe",l),n.removeListener("end",c),n.removeListener("end",y),n.removeListener("data",v),d=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}function c(){h("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",l);var f=function(t){return function(){var e=t._readableState;h("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,N(t))}}(n);t.on("drain",f);var d=!1;var p=!1;function v(e){h("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==P(o.pipes,t))&&!d&&(h("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,p=!0),n.pause())}function m(e){h("onerror",e),y(),t.removeListener("error",m),0===s(t,"error")&&t.emit("error",e)}function g(){t.removeListener("finish",_),y()}function _(){h("onfinish"),t.removeListener("close",g),y()}function y(){h("unpipe"),n.unpipe(t)}return n.on("data",v),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?a(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",m),t.once("close",g),t.once("finish",_),t.emit("pipe",n),o.flowing||(h("pipe resume"),n.resume()),t},y.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var a=P(e.pipes,t);return-1===a?this:(e.pipes.splice(a,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},y.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&k(this):i.nextTick(O,this))}return n},y.prototype.addListener=y.prototype.on,y.prototype.resume=function(){var t=this._readableState;return t.flowing||(h("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(T,t,e))}(this,t)),this},y.prototype.pause=function(){return h("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(h("pause"),this._readableState.flowing=!1,this.emit("pause")),this},y.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(h("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(h("wrapped data"),n.decoder&&(i=n.decoder.write(i)),!n.objectMode||null!==i&&void 0!==i)&&((n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<g.length;o++)t.on(g[o],this.emit.bind(this,g[o]));return this._read=function(e){h("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(y.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),y._fromList=L}).call(this,n(3),n(12))},function(t,e,n){t.exports=n(17).EventEmitter},function(t,e,n){"use strict";var r=n(13);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";var r=n(14).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=c,this.end=f,e=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function a(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function c(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function d(t){return t.toString(this.encoding)}function h(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=a(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=a(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=a(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){"use strict";t.exports=o;var r=n(6),i=n(10);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:function(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",a)}function a(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){s(t,e,n)}):s(this,null,null)}function s(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(8),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},function(t,e,n){"use strict";var r=n(0),i=n(4),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e.encode=function(t){for(var e,n,i,a,s,u,l,c=[],f=0,d=t.length,h=d,p="string"!==r.getTypeOf(t);f<t.length;)h=d-f,p?(e=t[f++],n=f<d?t[f++]:0,i=f<d?t[f++]:0):(e=t.charCodeAt(f++),n=f<d?t.charCodeAt(f++):0,i=f<d?t.charCodeAt(f++):0),a=e>>2,s=(3&e)<<4|n>>4,u=h>1?(15&n)<<2|i>>6:64,l=h>2?63&i:64,c.push(o.charAt(a)+o.charAt(s)+o.charAt(u)+o.charAt(l));return c.join("")},e.decode=function(t){var e,n,r,a,s,u,l=0,c=0;if("data:"===t.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var f,d=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===o.charAt(64)&&d--,t.charAt(t.length-2)===o.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(f=i.uint8array?new Uint8Array(0|d):new Array(0|d);l<t.length;)e=o.indexOf(t.charAt(l++))<<2|(a=o.indexOf(t.charAt(l++)))>>4,n=(15&a)<<4|(s=o.indexOf(t.charAt(l++)))>>2,r=(3&s)<<6|(u=o.indexOf(t.charAt(l++))),f[c++]=e,64!==s&&(f[c++]=n),64!==u&&(f[c++]=r);return f}},function(t,e){var n=t.exports={version:"2.3.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(79);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(20),i=n(16).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){"use strict";(function(e){var r=n(0),i=n(92),o=n(1),a=n(32),s=n(4),u=n(11),l=null;if(s.nodestream)try{l=n(93)}catch(t){}function c(t,n){return new u.Promise(function(i,o){var s=[],u=t._internalType,l=t._outputType,c=t._mimeType;t.on("data",function(t,e){s.push(t),n&&n(e)}).on("error",function(t){s=[],o(t)}).on("end",function(){try{var t=function(t,e,n){switch(t){case"blob":return r.newBlob(r.transformTo("arraybuffer",e),n);case"base64":return a.encode(e);default:return r.transformTo(t,e)}}(l,function(t,n){var r,i=0,o=null,a=0;for(r=0;r<n.length;r++)a+=n[r].length;switch(t){case"string":return n.join("");case"array":return Array.prototype.concat.apply([],n);case"uint8array":for(o=new Uint8Array(a),r=0;r<n.length;r++)o.set(n[r],i),i+=n[r].length;return o;case"nodebuffer":return e.concat(n);default:throw new Error("concat : unsupported type '"+t+"'")}}(u,s),c);i(t)}catch(t){o(t)}s=[]}).resume()})}function f(t,e,n){var a=e;switch(e){case"blob":case"arraybuffer":a="uint8array";break;case"base64":a="string"}try{this._internalType=a,this._outputType=e,this._mimeType=n,r.checkSupport(a),this._worker=t.pipe(new i(a)),t.lock()}catch(t){this._worker=new o("error"),this._worker.error(t)}}f.prototype={accumulate:function(t){return c(this,t)},on:function(t,e){var n=this;return"data"===t?this._worker.on(t,function(t){e.call(n,t.data,t.meta)}):this._worker.on(t,function(){r.delay(e,arguments,n)}),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(r.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new l(this,{objectMode:"nodebuffer"!==this._outputType},t)}},t.exports=f}).call(this,n(9).Buffer)},function(t,e,n){"use strict";e.base64=!1,e.binary=!1,e.dir=!1,e.createFolders=!0,e.date=null,e.compression=null,e.compressionOptions=null,e.comment=null,e.unixPermissions=null,e.dosPermissions=null},function(t,e,n){"use strict";var r=n(0),i=n(1);function o(t){i.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then(function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=r.getTypeOf(t),e.isPaused||e._tickAndRepeat()},function(t){e.error(t)})}r.inherits(o,i),o.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},function(t,e,n){"use strict";var r=n(0),i=n(1);function o(t){i.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}r.inherits(o,i),o.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}i.prototype.processChunk.call(this,t)},t.exports=o},function(t,e,n){"use strict";var r=n(1),i=n(23);function o(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n(0).inherits(o,r),o.prototype.processChunk=function(t){this.streamInfo.crc32=i(t.data,this.streamInfo.crc32||0),this.push(t)},t.exports=o},function(t,e,n){"use strict";var r=n(1);e.STORE={magic:"\0\0",compressWorker:function(t){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},e.DEFLATE=n(96)},function(t,e,n){"use strict";t.exports=function(t,e,n,r){for(var i=65535&t|0,o=t>>>16&65535|0,a=0;0!==n;){n-=a=n>2e3?2e3:n;do{o=o+(i=i+e[r++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}},function(t,e,n){"use strict";var r=function(){for(var t,e=[],n=0;n<256;n++){t=n;for(var r=0;r<8;r++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e}();t.exports=function(t,e,n,i){var o=r,a=i+n;t^=-1;for(var s=i;s<a;s++)t=t>>>8^o[255&(t^e[s])];return-1^t}},function(t,e,n){"use strict";var r=n(5),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(t){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){o=!1}for(var a=new r.Buf8(256),s=0;s<256;s++)a[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(t,e){if(e<65537&&(t.subarray&&o||!t.subarray&&i))return String.fromCharCode.apply(null,r.shrinkBuf(t,e));for(var n="",a=0;a<e;a++)n+=String.fromCharCode(t[a]);return n}a[254]=a[254]=1,e.string2buf=function(t){var e,n,i,o,a,s=t.length,u=0;for(o=0;o<s;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),u+=n<128?1:n<2048?2:n<65536?3:4;for(e=new r.Buf8(u),a=0,o=0;a<u;o++)55296==(64512&(n=t.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=t.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),n<128?e[a++]=n:n<2048?(e[a++]=192|n>>>6,e[a++]=128|63&n):n<65536?(e[a++]=224|n>>>12,e[a++]=128|n>>>6&63,e[a++]=128|63&n):(e[a++]=240|n>>>18,e[a++]=128|n>>>12&63,e[a++]=128|n>>>6&63,e[a++]=128|63&n);return e},e.buf2binstring=function(t){return u(t,t.length)},e.binstring2buf=function(t){for(var e=new r.Buf8(t.length),n=0,i=e.length;n<i;n++)e[n]=t.charCodeAt(n);return e},e.buf2string=function(t,e){var n,r,i,o,s=e||t.length,l=new Array(2*s);for(r=0,n=0;n<s;)if((i=t[n++])<128)l[r++]=i;else if((o=a[i])>4)l[r++]=65533,n+=o-1;else{for(i&=2===o?31:3===o?15:7;o>1&&n<s;)i=i<<6|63&t[n++],o--;o>1?l[r++]=65533:i<65536?l[r++]=i:(i-=65536,l[r++]=55296|i>>10&1023,l[r++]=56320|1023&i)}return u(l,r)},e.utf8border=function(t,e){var n;for((e=e||t.length)>t.length&&(e=t.length),n=e-1;n>=0&&128==(192&t[n]);)n--;return n<0?e:0===n?e:n+a[t[n]]>e?n:e}},function(t,e,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(t,e,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(t,e,n){"use strict";e.LOCAL_FILE_HEADER="PK",e.CENTRAL_FILE_HEADER="PK",e.CENTRAL_DIRECTORY_END="PK",e.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",e.ZIP64_CENTRAL_DIRECTORY_END="PK",e.DATA_DESCRIPTOR="PK\b"},function(t,e,n){"use strict";var r=n(0),i=n(4),o=n(50),a=n(110),s=n(111),u=n(52);t.exports=function(t){var e=r.getTypeOf(t);return r.checkSupport(e),"string"!==e||i.uint8array?"nodebuffer"===e?new s(t):i.uint8array?new u(r.transformTo("uint8array",t)):new o(r.transformTo("array",t)):new a(t)}},function(t,e,n){"use strict";var r=n(51);function i(t){r.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}n(0).inherits(i,r),i.prototype.byteAt=function(t){return this.data[this.zero+t]},i.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),n=t.charCodeAt(1),r=t.charCodeAt(2),i=t.charCodeAt(3),o=this.length-4;o>=0;--o)if(this.data[o]===e&&this.data[o+1]===n&&this.data[o+2]===r&&this.data[o+3]===i)return o-this.zero;return-1},i.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),n=t.charCodeAt(1),r=t.charCodeAt(2),i=t.charCodeAt(3),o=this.readData(4);return e===o[0]&&n===o[1]&&r===o[2]&&i===o[3]},i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){"use strict";var r=n(0);function i(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,n=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)n=(n<<8)+this.byteAt(e);return this.index+=t,n},readString:function(t){return r.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},t.exports=i},function(t,e,n){"use strict";var r=n(50);function i(t){r.call(this,t)}n(0).inherits(i,r),i.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){(function(e){var n;t.exports=function t(e,r,i){function o(s,u){if(!r[s]){if(!e[s]){var l="function"==typeof n&&n;if(!u&&l)return n(s,!0);if(a)return a(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};e[s][0].call(f.exports,function(t){var n=e[s][1][t];return o(n||t)},f,f.exports,t,e,r,i)}return r[s].exports}for(var a="function"==typeof n&&n,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,e,n){e.exports={default:t("core-js/library/fn/array/from"),__esModule:!0}},{"core-js/library/fn/array/from":5}],2:[function(t,e,n){e.exports={default:t("core-js/library/fn/math/log10"),__esModule:!0}},{"core-js/library/fn/math/log10":6}],3:[function(t,e,n){e.exports={default:t("core-js/library/fn/math/sign"),__esModule:!0}},{"core-js/library/fn/math/sign":7}],4:[function(t,e,n){"use strict";n.__esModule=!0;var r=t("../core-js/array/from"),i=function(t){return t&&t.__esModule?t:{default:t}}(r);n.default=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,i.default)(t)}},{"../core-js/array/from":1}],5:[function(t,e,n){t("../../modules/es6.string.iterator"),t("../../modules/es6.array.from"),e.exports=t("../../modules/_core").Array.from},{"../../modules/_core":13,"../../modules/es6.array.from":58,"../../modules/es6.string.iterator":61}],6:[function(t,e,n){t("../../modules/es6.math.log10"),e.exports=t("../../modules/_core").Math.log10},{"../../modules/_core":13,"../../modules/es6.math.log10":59}],7:[function(t,e,n){t("../../modules/es6.math.sign"),e.exports=t("../../modules/_core").Math.sign},{"../../modules/_core":13,"../../modules/es6.math.sign":60}],8:[function(t,e,n){e.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},{}],9:[function(t,e,n){var r=t("./_is-object");e.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},{"./_is-object":29}],10:[function(t,e,n){var r=t("./_to-iobject"),i=t("./_to-length"),o=t("./_to-absolute-index");e.exports=function(t){return function(e,n,a){var s,u=r(e),l=i(u.length),c=o(a,l);if(t&&n!=n){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((t||c in u)&&u[c]===n)return t||c||0;return!t&&-1}}},{"./_to-absolute-index":49,"./_to-iobject":51,"./_to-length":52}],11:[function(t,e,n){var r=t("./_cof"),i=t("./_wks")("toStringTag"),o="Arguments"==r(function(){return arguments}());e.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},{"./_cof":12,"./_wks":56}],12:[function(t,e,n){var r={}.toString;e.exports=function(t){return r.call(t).slice(8,-1)}},{}],13:[function(t,e,n){var r=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=r)},{}],14:[function(t,e,n){"use strict";var r=t("./_object-dp"),i=t("./_property-desc");e.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},{"./_object-dp":38,"./_property-desc":43}],15:[function(t,e,n){var r=t("./_a-function");e.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},{"./_a-function":8}],16:[function(t,e,n){e.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},{}],17:[function(t,e,n){e.exports=!t("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":21}],18:[function(t,e,n){var r=t("./_is-object"),i=t("./_global").document,o=r(i)&&r(i.createElement);e.exports=function(t){return o?i.createElement(t):{}}},{"./_global":22,"./_is-object":29}],19:[function(t,e,n){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],20:[function(t,e,n){var r=t("./_global"),i=t("./_core"),o=t("./_ctx"),a=t("./_hide"),s=t("./_has"),u=function(t,e,n){var l,c,f,d=t&u.F,h=t&u.G,p=t&u.S,v=t&u.P,m=t&u.B,g=t&u.W,_=h?i:i[e]||(i[e]={}),y=_.prototype,b=h?r:p?r[e]:(r[e]||{}).prototype;for(l in h&&(n=e),n)(c=!d&&b&&void 0!==b[l])&&s(_,l)||(f=c?b[l]:n[l],_[l]=h&&"function"!=typeof b[l]?n[l]:m&&c?o(f,r):g&&b[l]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&"function"==typeof f?o(Function.call,f):f,v&&((_.virtual||(_.virtual={}))[l]=f,t&u.R&&y&&!y[l]&&a(y,l,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},{"./_core":13,"./_ctx":15,"./_global":22,"./_has":23,"./_hide":24}],21:[function(t,e,n){e.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],22:[function(t,e,n){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},{}],23:[function(t,e,n){var r={}.hasOwnProperty;e.exports=function(t,e){return r.call(t,e)}},{}],24:[function(t,e,n){var r=t("./_object-dp"),i=t("./_property-desc");e.exports=t("./_descriptors")?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},{"./_descriptors":17,"./_object-dp":38,"./_property-desc":43}],25:[function(t,e,n){var r=t("./_global").document;e.exports=r&&r.documentElement},{"./_global":22}],26:[function(t,e,n){e.exports=!t("./_descriptors")&&!t("./_fails")(function(){return 7!=Object.defineProperty(t("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":17,"./_dom-create":18,"./_fails":21}],27:[function(t,e,n){var r=t("./_cof");e.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},{"./_cof":12}],28:[function(t,e,n){var r=t("./_iterators"),i=t("./_wks")("iterator"),o=Array.prototype;e.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},{"./_iterators":34,"./_wks":56}],29:[function(t,e,n){e.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],30:[function(t,e,n){var r=t("./_an-object");e.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},{"./_an-object":9}],31:[function(t,e,n){"use strict";var r=t("./_object-create"),i=t("./_property-desc"),o=t("./_set-to-string-tag"),a={};t("./_hide")(a,t("./_wks")("iterator"),function(){return this}),e.exports=function(t,e,n){t.prototype=r(a,{next:i(1,n)}),o(t,e+" Iterator")}},{"./_hide":24,"./_object-create":37,"./_property-desc":43,"./_set-to-string-tag":45,"./_wks":56}],32:[function(t,e,n){"use strict";var r=t("./_library"),i=t("./_export"),o=t("./_redefine"),a=t("./_hide"),s=t("./_iterators"),u=t("./_iter-create"),l=t("./_set-to-string-tag"),c=t("./_object-gpo"),f=t("./_wks")("iterator"),d=!([].keys&&"next"in[].keys()),h=function(){return this};e.exports=function(t,e,n,p,v,m,g){u(n,e,p);var _,y,b,w=function(t){if(!d&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},x=e+" Iterator",C="values"==v,k=!1,E=t.prototype,S=E[f]||E["@@iterator"]||v&&E[v],A=S||w(v),O=v?C?w("entries"):A:void 0,T="Array"==e&&E.entries||S;if(T&&(b=c(T.call(new t)))!==Object.prototype&&b.next&&(l(b,x,!0),r||"function"==typeof b[f]||a(b,f,h)),C&&S&&"values"!==S.name&&(k=!0,A=function(){return S.call(this)}),r&&!g||!d&&!k&&E[f]||a(E,f,A),s[e]=A,s[x]=h,v)if(_={values:C?A:w("values"),keys:m?A:w("keys"),entries:O},g)for(y in _)y in E||o(E,y,_[y]);else i(i.P+i.F*(d||k),e,_);return _}},{"./_export":20,"./_hide":24,"./_iter-create":31,"./_iterators":34,"./_library":35,"./_object-gpo":40,"./_redefine":44,"./_set-to-string-tag":45,"./_wks":56}],33:[function(t,e,n){var r=t("./_wks")("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}e.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},t(o)}catch(t){}return n}},{"./_wks":56}],34:[function(t,e,n){e.exports={}},{}],35:[function(t,e,n){e.exports=!0},{}],36:[function(t,e,n){e.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},{}],37:[function(t,e,n){var r=t("./_an-object"),i=t("./_object-dps"),o=t("./_enum-bug-keys"),a=t("./_shared-key")("IE_PROTO"),s=function(){},u=function(){var e,n=t("./_dom-create")("iframe"),r=o.length;for(n.style.display="none",t("./_html").appendChild(n),n.src="javascript:",(e=n.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[o[r]];return u()};e.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=u(),void 0===e?n:i(n,e)}},{"./_an-object":9,"./_dom-create":18,"./_enum-bug-keys":19,"./_html":25,"./_object-dps":39,"./_shared-key":46}],38:[function(t,e,n){var r=t("./_an-object"),i=t("./_ie8-dom-define"),o=t("./_to-primitive"),a=Object.defineProperty;n.f=t("./_descriptors")?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},{"./_an-object":9,"./_descriptors":17,"./_ie8-dom-define":26,"./_to-primitive":54}],39:[function(t,e,n){var r=t("./_object-dp"),i=t("./_an-object"),o=t("./_object-keys");e.exports=t("./_descriptors")?Object.defineProperties:function(t,e){i(t);for(var n,a=o(e),s=a.length,u=0;s>u;)r.f(t,n=a[u++],e[n]);return t}},{"./_an-object":9,"./_descriptors":17,"./_object-dp":38,"./_object-keys":42}],40:[function(t,e,n){var r=t("./_has"),i=t("./_to-object"),o=t("./_shared-key")("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},{"./_has":23,"./_shared-key":46,"./_to-object":53}],41:[function(t,e,n){var r=t("./_has"),i=t("./_to-iobject"),o=t("./_array-includes")(!1),a=t("./_shared-key")("IE_PROTO");e.exports=function(t,e){var n,s=i(t),u=0,l=[];for(n in s)n!=a&&r(s,n)&&l.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(l,n)||l.push(n));return l}},{"./_array-includes":10,"./_has":23,"./_shared-key":46,"./_to-iobject":51}],42:[function(t,e,n){var r=t("./_object-keys-internal"),i=t("./_enum-bug-keys");e.exports=Object.keys||function(t){return r(t,i)}},{"./_enum-bug-keys":19,"./_object-keys-internal":41}],43:[function(t,e,n){e.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},{}],44:[function(t,e,n){e.exports=t("./_hide")},{"./_hide":24}],45:[function(t,e,n){var r=t("./_object-dp").f,i=t("./_has"),o=t("./_wks")("toStringTag");e.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},{"./_has":23,"./_object-dp":38,"./_wks":56}],46:[function(t,e,n){var r=t("./_shared")("keys"),i=t("./_uid");e.exports=function(t){return r[t]||(r[t]=i(t))}},{"./_shared":47,"./_uid":55}],47:[function(t,e,n){var r=t("./_core"),i=t("./_global"),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:t("./_library")?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},{"./_core":13,"./_global":22,"./_library":35}],48:[function(t,e,n){var r=t("./_to-integer"),i=t("./_defined");e.exports=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),l=s.length;return u<0||u>=l?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}}},{"./_defined":16,"./_to-integer":50}],49:[function(t,e,n){var r=t("./_to-integer"),i=Math.max,o=Math.min;e.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},{"./_to-integer":50}],50:[function(t,e,n){var r=Math.ceil,i=Math.floor;e.exports=function(t){return isNaN(t=+t)?0:(t>0?i:r)(t)}},{}],51:[function(t,e,n){var r=t("./_iobject"),i=t("./_defined");e.exports=function(t){return r(i(t))}},{"./_defined":16,"./_iobject":27}],52:[function(t,e,n){var r=t("./_to-integer"),i=Math.min;e.exports=function(t){return t>0?i(r(t),9007199254740991):0}},{"./_to-integer":50}],53:[function(t,e,n){var r=t("./_defined");e.exports=function(t){return Object(r(t))}},{"./_defined":16}],54:[function(t,e,n){var r=t("./_is-object");e.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":29}],55:[function(t,e,n){var r=0,i=Math.random();e.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+i).toString(36))}},{}],56:[function(t,e,n){var r=t("./_shared")("wks"),i=t("./_uid"),o=t("./_global").Symbol,a="function"==typeof o,s=e.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))};s.store=r},{"./_global":22,"./_shared":47,"./_uid":55}],57:[function(t,e,n){var r=t("./_classof"),i=t("./_wks")("iterator"),o=t("./_iterators");e.exports=t("./_core").getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},{"./_classof":11,"./_core":13,"./_iterators":34,"./_wks":56}],58:[function(t,e,n){"use strict";var r=t("./_ctx"),i=t("./_export"),o=t("./_to-object"),a=t("./_iter-call"),s=t("./_is-array-iter"),u=t("./_to-length"),l=t("./_create-property"),c=t("./core.get-iterator-method");i(i.S+i.F*!t("./_iter-detect")(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,f,d=o(t),h="function"==typeof this?this:Array,p=arguments.length,v=p>1?arguments[1]:void 0,m=void 0!==v,g=0,_=c(d);if(m&&(v=r(v,p>2?arguments[2]:void 0,2)),void 0==_||h==Array&&s(_))for(e=u(d.length),n=new h(e);e>g;g++)l(n,g,m?v(d[g],g):d[g]);else for(f=_.call(d),n=new h;!(i=f.next()).done;g++)l(n,g,m?a(f,v,[i.value,g],!0):i.value);return n.length=g,n}})},{"./_create-property":14,"./_ctx":15,"./_export":20,"./_is-array-iter":28,"./_iter-call":30,"./_iter-detect":33,"./_to-length":52,"./_to-object":53,"./core.get-iterator-method":57}],59:[function(t,e,n){var r=t("./_export");r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},{"./_export":20}],60:[function(t,e,n){var r=t("./_export");r(r.S,"Math",{sign:t("./_math-sign")})},{"./_export":20,"./_math-sign":36}],61:[function(t,e,n){"use strict";var r=t("./_string-at")(!0);t("./_iter-define")(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},{"./_iter-define":32,"./_string-at":48}],62:[function(t,e,n){var r,i,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(r===setTimeout)return setTimeout(t,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(t){r=a}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var l,c=[],f=!1,d=-1;function h(){f&&l&&(f=!1,l.length?c=l.concat(c):d=-1,c.length&&p())}function p(){if(!f){var t=u(h);f=!0;for(var e=c.length;e;){for(l=c,c=[];++d<e;)l&&l[d].run();d=-1,e=c.length}l=null,f=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function v(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new v(t,e)),1!==c.length||f||u(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],63:[function(t,e,n){(function(e,r){var i=t("process/browser.js").nextTick,o=Function.prototype.apply,a=Array.prototype.slice,s={},u=0;function l(t,e){this._id=t,this._clearFn=e}n.setTimeout=function(){return new l(o.call(setTimeout,window,arguments),clearTimeout)},n.setInterval=function(){return new l(o.call(setInterval,window,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(t){t.close()},l.prototype.unref=l.prototype.ref=function(){},l.prototype.close=function(){this._clearFn.call(window,this._id)},n.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},n.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},n._unrefActive=n.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n.setImmediate="function"==typeof e?e:function(t){var e=u++,r=!(arguments.length<2)&&a.call(arguments,1);return s[e]=!0,i(function(){s[e]&&(r?t.apply(null,r):t.call(null),n.clearImmediate(e))}),e},n.clearImmediate="function"==typeof r?r:function(t){delete s[t]}}).call(this,t("timers").setImmediate,t("timers").clearImmediate)},{"process/browser.js":62,timers:63}],64:[function(t,e,n){var r,i,o=window.__VUE_HOT_MAP__=Object.create(null),a=!1,s="beforeCreate";function u(t,e){if(e.functional){var n=e.render;e.render=function(e,r){var i=o[t].instances;return r&&i.indexOf(r.parent)<0&&i.push(r.parent),n(e,r)}}else l(e,s,function(){var e=o[t];e.Ctor||(e.Ctor=this.constructor),e.instances.push(this)}),l(e,"beforeDestroy",function(){var e=o[t].instances;e.splice(e.indexOf(this),1)})}function l(t,e,n){var r=t[e];t[e]=r?Array.isArray(r)?r.concat(n):[r,n]:[n]}function c(t){return function(e,n){try{t(e,n)}catch(t){console.error(t),console.warn("Something went wrong during Vue component hot-reload. Full reload required.")}}}function f(t,e){for(var n in t)n in e||delete t[n];for(var r in e)t[r]=e[r]}n.install=function(t,e){a||(a=!0,r=t.__esModule?t.default:t,i=r.version.split(".").map(Number),r.config._lifecycleHooks.indexOf("init")>-1&&(s="init"),n.compatible=i[0]>=2,n.compatible||console.warn("[HMR] You are using a version of vue-hot-reload-api that is only compatible with Vue.js core ^2.0.0."))},n.createRecord=function(t,e){if(!o[t]){var n=null;"function"==typeof e&&(e=(n=e).options),u(t,e),o[t]={Ctor:n,options:e,instances:[]}}},n.isRecorded=function(t){return void 0!==o[t]},n.rerender=c(function(t,e){var n=o[t];if(e){if("function"==typeof e&&(e=e.options),n.Ctor)n.Ctor.options.render=e.render,n.Ctor.options.staticRenderFns=e.staticRenderFns,n.instances.slice().forEach(function(t){t.$options.render=e.render,t.$options.staticRenderFns=e.staticRenderFns,t._staticTrees&&(t._staticTrees=[]),Array.isArray(n.Ctor.options.cached)&&(n.Ctor.options.cached=[]),Array.isArray(t.$options.cached)&&(t.$options.cached=[]),t.$forceUpdate()});else if(n.options.render=e.render,n.options.staticRenderFns=e.staticRenderFns,n.options.functional){if(Object.keys(e).length>2)f(n.options,e);else{var r=n.options._injectStyles;if(r){var i=e.render;n.options.render=function(t,e){return r.call(e),i(t,e)}}}n.options._Ctor=null,Array.isArray(n.options.cached)&&(n.options.cached=[]),n.instances.slice().forEach(function(t){t.$forceUpdate()})}}else n.instances.slice().forEach(function(t){t.$forceUpdate()})}),n.reload=c(function(t,e){var n=o[t];if(e)if("function"==typeof e&&(e=e.options),u(t,e),n.Ctor){i[1]<2&&(n.Ctor.extendOptions=e);var r=n.Ctor.super.extend(e);n.Ctor.options=r.options,n.Ctor.cid=r.cid,n.Ctor.prototype=r.prototype,r.release&&r.release()}else f(n.options,e);n.instances.slice().forEach(function(t){t.$vnode&&t.$vnode.context?t.$vnode.context.$forceUpdate():console.warn("Root or manually mounted instance modified. Full reload required.")})})},{}],65:[function(t,n,r){(function(t,e,r){
/*!
         * Vue.js v2.5.16
         * (c) 2014-2018 Evan You
         * Released under the MIT License.
         */
"use strict";var i=Object.freeze({});function o(t){return void 0===t||null===t}function a(t){return void 0!==t&&null!==t}function s(t){return!0===t}function u(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function l(t){return null!==t&&"object"==typeof t}var c=Object.prototype.toString;function f(t){return c.call(t).slice(8,-1)}function d(t){return"[object Object]"===c.call(t)}function h(t){return"[object RegExp]"===c.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function v(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function m(t){var e=parseFloat(t);return isNaN(e)?t:e}function g(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var _=g("slot,component",!0),y=g("key,ref,slot,slot-scope,is");function b(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var w=Object.prototype.hasOwnProperty;function x(t,e){return w.call(t,e)}function C(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var k=/-(\w)/g,E=C(function(t){return t.replace(k,function(t,e){return e?e.toUpperCase():""})}),S=C(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),A=/\B([A-Z])/g,O=C(function(t){return t.replace(A,"-$1").toLowerCase()}),T=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function N(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function L(t,e){for(var n in e)t[n]=e[n];return t}function I(t){for(var e={},n=0;n<t.length;n++)t[n]&&L(e,t[n]);return e}function M(t,e,n){}var P=function(t,e,n){return!1},D=function(t){return t};function F(t,e){if(t===e)return!0;var n=l(t),r=l(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every(function(t,n){return F(t,e[n])});if(i||o)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every(function(n){return F(t[n],e[n])})}catch(t){return!1}}function j(t,e){for(var n=0;n<t.length;n++)if(F(t[n],e))return n;return-1}function R(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var B="data-server-rendered",z=["component","directive","filter"],$=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:"production"!==t.env.NODE_ENV,devtools:"production"!==t.env.NODE_ENV,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:M,parsePlatformTagName:D,mustUseProp:P,_lifecycleHooks:$};function H(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function V(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W,Y=/[^\w.$]/,Z="__proto__"in{},q="undefined"!=typeof window,X="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=X&&WXEnvironment.platform.toLowerCase(),K=q&&window.navigator.userAgent.toLowerCase(),J=K&&/msie|trident/.test(K),Q=K&&K.indexOf("msie 9.0")>0,tt=K&&K.indexOf("edge/")>0,et=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===G),nt=K&&/chrome\/\d+/.test(K)&&!tt,rt={}.watch,it=!1;if(q)try{var ot={};Object.defineProperty(ot,"passive",{get:function(){it=!0}}),window.addEventListener("test-passive",null,ot)}catch(t){}var at=function(){return void 0===W&&(W=!q&&!X&&void 0!==e&&"server"===e.process.env.VUE_ENV),W},st=q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ut(t){return"function"==typeof t&&/native code/.test(t.toString())}var lt,ct="undefined"!=typeof Symbol&&ut(Symbol)&&"undefined"!=typeof Reflect&&ut(Reflect.ownKeys);lt="undefined"!=typeof Set&&ut(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ft=M,dt=M,ht=M,pt=M;if("production"!==t.env.NODE_ENV){var vt="undefined"!=typeof console,mt=/(?:^|[-_])(\w)/g;ft=function(t,e){var n=e?ht(e):"";U.warnHandler?U.warnHandler.call(null,t,e,n):vt&&!U.silent&&console.error("[Vue warn]: "+t+n)},dt=function(t,e){vt&&!U.silent&&console.warn("[Vue tip]: "+t+(e?ht(e):""))},pt=function(t,e){if(t.$root===t)return"<Root>";var n="function"==typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t||{},r=n.name||n._componentTag,i=n.__file;if(!r&&i){var o=i.match(/([^/\\]+)\.vue$/);r=o&&o[1]}return(r?"<"+function(t){return t.replace(mt,function(t){return t.toUpperCase()}).replace(/[-_]/g,"")}(r)+">":"<Anonymous>")+(i&&!1!==e?" at "+i:"")},ht=function(t){if(t._isVue&&t.$parent){for(var e=[],n=0;t;){if(e.length>0){var r=e[e.length-1];if(r.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[r,n],n=0)}e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map(function(t,e){return""+(0===e?"---\x3e ":function(t,e){for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n}(" ",5+2*e))+(Array.isArray(t)?pt(t[0])+"... ("+t[1]+" recursive calls)":pt(t))}).join("\n")}return"\n\n(found in "+pt(t)+")"}}var gt=0,_t=function(){this.id=gt++,this.subs=[]};_t.prototype.addSub=function(t){this.subs.push(t)},_t.prototype.removeSub=function(t){b(this.subs,t)},_t.prototype.depend=function(){_t.target&&_t.target.addDep(this)},_t.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},_t.target=null;var yt=[];function bt(t){_t.target&&yt.push(_t.target),_t.target=t}function wt(){_t.target=yt.pop()}var xt=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ct={child:{configurable:!0}};Ct.child.get=function(){return this.componentInstance},Object.defineProperties(xt.prototype,Ct);var kt=function(t){void 0===t&&(t="");var e=new xt;return e.text=t,e.isComment=!0,e};function Et(t){return new xt(void 0,void 0,void 0,String(t))}function St(t){var e=new xt(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.isCloned=!0,e}var At=Array.prototype,Ot=Object.create(At);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=At[t];V(Ot,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o})});var Tt=Object.getOwnPropertyNames(Ot),Nt=!0;function Lt(t){Nt=t}var It=function(t){if(this.value=t,this.dep=new _t,this.vmCount=0,V(t,"__ob__",this),Array.isArray(t)){var e=Z?Mt:Pt;e(t,Ot,Tt),this.observeArray(t)}else this.walk(t)};function Mt(t,e,n){t.__proto__=e}function Pt(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];V(t,o,e[o])}}function Dt(t,e){var n;if(l(t)&&!(t instanceof xt))return x(t,"__ob__")&&t.__ob__ instanceof It?n=t.__ob__:Nt&&!at()&&(Array.isArray(t)||d(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new It(t)),e&&n&&n.vmCount++,n}function Ft(e,n,r,i,o){var a=new _t,s=Object.getOwnPropertyDescriptor(e,n);if(!s||!1!==s.configurable){var u=s&&s.get;u||2!==arguments.length||(r=e[n]);var l=s&&s.set,c=!o&&Dt(r);Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var t=u?u.call(e):r;return _t.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(t)&&function t(e){for(var n=void 0,r=0,i=e.length;r<i;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(t))),t},set:function(n){var s=u?u.call(e):r;n===s||n!=n&&s!=s||("production"!==t.env.NODE_ENV&&i&&i(),l?l.call(e,n):r=n,c=!o&&Dt(n),a.notify())}})}}function jt(e,n,r){if("production"!==t.env.NODE_ENV&&(o(e)||u(e))&&ft("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(n))return e.length=Math.max(e.length,n),e.splice(n,1,r),r;if(n in e&&!(n in Object.prototype))return e[n]=r,r;var i=e.__ob__;return e._isVue||i&&i.vmCount?("production"!==t.env.NODE_ENV&&ft("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),r):i?(Ft(i.value,n,r),i.dep.notify(),r):(e[n]=r,r)}function Rt(e,n){if("production"!==t.env.NODE_ENV&&(o(e)||u(e))&&ft("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(n))e.splice(n,1);else{var r=e.__ob__;e._isVue||r&&r.vmCount?"production"!==t.env.NODE_ENV&&ft("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):x(e,n)&&(delete e[n],r&&r.dep.notify())}}It.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Ft(t,e[n])},It.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Dt(t[e])};var Bt=U.optionMergeStrategies;function zt(t,e){if(!e)return t;for(var n,r,i,o=Object.keys(e),a=0;a<o.length;a++)n=o[a],r=t[n],i=e[n],x(t,n)?d(r)&&d(i)&&zt(r,i):jt(t,n,i);return t}function $t(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?zt(r,i):i}:e?t?function(){return zt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Ut(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function Ht(e,n,r,i){var o=Object.create(e||null);return n?("production"!==t.env.NODE_ENV&&Yt(i,n,r),L(o,n)):o}"production"!==t.env.NODE_ENV&&(Bt.el=Bt.propsData=function(t,e,n,r){return n||ft('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Vt(t,e)}),Bt.data=function(e,n,r){return r?$t(e,n,r):n&&"function"!=typeof n?("production"!==t.env.NODE_ENV&&ft('The "data" option should be a function that returns a per-instance value in component definitions.',r),e):$t(e,n)},$.forEach(function(t){Bt[t]=Ut}),z.forEach(function(t){Bt[t+"s"]=Ht}),Bt.watch=function(e,n,r,i){if(e===rt&&(e=void 0),n===rt&&(n=void 0),!n)return Object.create(e||null);if("production"!==t.env.NODE_ENV&&Yt(i,n,r),!e)return n;var o={};for(var a in L(o,e),n){var s=o[a],u=n[a];s&&!Array.isArray(s)&&(s=[s]),o[a]=s?s.concat(u):Array.isArray(u)?u:[u]}return o},Bt.props=Bt.methods=Bt.inject=Bt.computed=function(e,n,r,i){if(n&&"production"!==t.env.NODE_ENV&&Yt(i,n,r),!e)return n;var o=Object.create(null);return L(o,e),n&&L(o,n),o},Bt.provide=$t;var Vt=function(t,e){return void 0===e?t:e};function Wt(t){/^[a-zA-Z][\w-]*$/.test(t)||ft('Invalid component name: "'+t+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.'),(_(t)||U.isReservedTag(t))&&ft("Do not use built-in or reserved HTML elements as component id: "+t)}function Yt(t,e,n){d(e)||ft('Invalid value for option "'+t+'": expected an Object, but got '+f(e)+".",n)}function Zt(e,n,r){"production"!==t.env.NODE_ENV&&function(t){for(var e in t.components)Wt(e)}(n),"function"==typeof n&&(n=n.options),function(e,n){var r=e.props;if(r){var i,o,a,s={};if(Array.isArray(r))for(i=r.length;i--;)"string"==typeof(o=r[i])?(a=E(o),s[a]={type:null}):"production"!==t.env.NODE_ENV&&ft("props must be strings when using array syntax.");else if(d(r))for(var u in r)o=r[u],a=E(u),s[a]=d(o)?o:{type:o};else"production"!==t.env.NODE_ENV&&ft('Invalid value for option "props": expected an Array or an Object, but got '+f(r)+".",n);e.props=s}}(n,r),function(e,n){var r=e.inject;if(r){var i=e.inject={};if(Array.isArray(r))for(var o=0;o<r.length;o++)i[r[o]]={from:r[o]};else if(d(r))for(var a in r){var s=r[a];i[a]=d(s)?L({from:a},s):{from:s}}else"production"!==t.env.NODE_ENV&&ft('Invalid value for option "inject": expected an Array or an Object, but got '+f(r)+".",n)}}(n,r),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(n);var i=n.extends;if(i&&(e=Zt(e,i,r)),n.mixins)for(var o=0,a=n.mixins.length;o<a;o++)e=Zt(e,n.mixins[o],r);var s,u={};for(s in e)l(s);for(s in n)x(e,s)||l(s);function l(t){var i=Bt[t]||Vt;u[t]=i(e[t],n[t],r,t)}return u}function qt(e,n,r,i){if("string"==typeof r){var o=e[n];if(x(o,r))return o[r];var a=E(r);if(x(o,a))return o[a];var s=S(a);if(x(o,s))return o[s];var u=o[r]||o[a]||o[s];return"production"!==t.env.NODE_ENV&&i&&!u&&ft("Failed to resolve "+n.slice(0,-1)+": "+r,e),u}}function Xt(e,n,r,i){var o=n[e],a=!x(r,e),s=r[e],u=te(Boolean,o.type);if(u>-1)if(a&&!x(o,"default"))s=!1;else if(""===s||s===O(e)){var c=te(String,o.type);(c<0||u<c)&&(s=!0)}if(void 0===s){s=function(e,n,r){if(x(n,"default")){var i=n.default;return"production"!==t.env.NODE_ENV&&l(i)&&ft('Invalid default value for prop "'+r+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[r]&&void 0!==e._props[r]?e._props[r]:"function"==typeof i&&"Function"!==Jt(n.type)?i.call(e):i}}(i,o,e);var d=Nt;Lt(!0),Dt(s),Lt(d)}return"production"!==t.env.NODE_ENV&&function(t,e,n,r,i){if(t.required&&i)ft('Missing required prop: "'+e+'"',r);else if(null!=n||t.required){var o=t.type,a=!o||!0===o,s=[];if(o){Array.isArray(o)||(o=[o]);for(var u=0;u<o.length&&!a;u++){var l=Kt(n,o[u]);s.push(l.expectedType||""),a=l.valid}}if(a){var c=t.validator;c&&(c(n)||ft('Invalid prop: custom validator check failed for prop "'+e+'".',r))}else ft('Invalid prop: type check failed for prop "'+e+'". Expected '+s.map(S).join(", ")+", got "+f(n)+".",r)}}(o,e,s,i,a),s}var Gt=/^(String|Number|Boolean|Function|Symbol)$/;function Kt(t,e){var n,r=Jt(e);if(Gt.test(r)){var i=typeof t;(n=i===r.toLowerCase())||"object"!==i||(n=t instanceof e)}else n="Object"===r?d(t):"Array"===r?Array.isArray(t):t instanceof e;return{valid:n,expectedType:r}}function Jt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Qt(t,e){return Jt(t)===Jt(e)}function te(t,e){if(!Array.isArray(e))return Qt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Qt(e[n],t))return n;return-1}function ee(t,e,n){if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{var a=!1===i[o].call(r,t,e,n);if(a)return}catch(t){ne(t,r,"errorCaptured hook")}}ne(t,e,n)}function ne(t,e,n){if(U.errorHandler)try{return U.errorHandler.call(null,t,e,n)}catch(t){re(t,null,"config.errorHandler")}re(t,e,n)}function re(e,n,r){if("production"!==t.env.NODE_ENV&&ft("Error in "+r+': "'+e.toString()+'"',n),!q&&!X||"undefined"==typeof console)throw e;console.error(e)}var ie,oe,ae=[],se=!1;function ue(){se=!1;var t=ae.slice(0);ae.length=0;for(var e=0;e<t.length;e++)t[e]()}var le,ce=!1;if(void 0!==r&&ut(r))oe=function(){r(ue)};else if("undefined"==typeof MessageChannel||!ut(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())oe=function(){setTimeout(ue,0)};else{var fe=new MessageChannel,de=fe.port2;fe.port1.onmessage=ue,oe=function(){de.postMessage(1)}}if("undefined"!=typeof Promise&&ut(Promise)){var he=Promise.resolve();ie=function(){he.then(ue),et&&setTimeout(M)}}else ie=oe;function pe(t,e){var n;if(ae.push(function(){if(t)try{t.call(e)}catch(t){ee(t,e,"nextTick")}else n&&n(e)}),se||(se=!0,ce?oe():ie()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}if("production"!==t.env.NODE_ENV){var ve=g("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),me=function(t,e){ft('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},ge="undefined"!=typeof Proxy&&ut(Proxy);if(ge){var _e=g("stop,prevent,self,ctrl,shift,alt,meta,exact");U.keyCodes=new Proxy(U.keyCodes,{set:function(t,e,n){return _e(e)?(ft("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var ye={has:function(t,e){var n=e in t,r=ve(e)||"_"===e.charAt(0);return n||r||me(t,e),n||!r}},be={get:function(t,e){return"string"!=typeof e||e in t||me(t,e),t[e]}};le=function(t){if(ge){var e=t.$options,n=e.render&&e.render._withStripped?be:ye;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t}}var we,xe,Ce=new lt;function ke(t){!function t(e,n){var r,i,o=Array.isArray(e);if(!(!o&&!l(e)||Object.isFrozen(e)||e instanceof xt)){if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(r=e.length;r--;)t(e[r],n);else for(i=Object.keys(e),r=i.length;r--;)t(e[i[r]],n)}}(t,Ce),Ce.clear()}if("production"!==t.env.NODE_ENV){var Ee=q&&window.performance;Ee&&Ee.mark&&Ee.measure&&Ee.clearMarks&&Ee.clearMeasures&&(we=function(t){return Ee.mark(t)},xe=function(t,e,n){Ee.measure(t,e,n),Ee.clearMarks(e),Ee.clearMarks(n),Ee.clearMeasures(t)})}var Se,Ae=C(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function Oe(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),i=0;i<r.length;i++)r[i].apply(null,t)}return e.fns=t,e}function Te(e,n,r,i,a){var s,u,l,c;for(s in e)u=e[s],l=n[s],c=Ae(s),o(u)?"production"!==t.env.NODE_ENV&&ft('Invalid handler for event "'+c.name+'": got '+String(u),a):o(l)?(o(u.fns)&&(u=e[s]=Oe(u)),r(c.name,u,c.once,c.capture,c.passive,c.params)):u!==l&&(l.fns=u,e[s]=l);for(s in n)o(e[s])&&(c=Ae(s),i(c.name,n[s],c.capture))}function Ne(t,e,n){var r;t instanceof xt&&(t=t.data.hook||(t.data.hook={}));var i=t[e];function u(){n.apply(this,arguments),b(r.fns,u)}o(i)?r=Oe([u]):a(i.fns)&&s(i.merged)?(r=i).fns.push(u):r=Oe([i,u]),r.merged=!0,t[e]=r}function Le(t,e,n,r,i){if(a(e)){if(x(e,n))return t[n]=e[n],i||delete e[n],!0;if(x(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Ie(t){return u(t)?[Et(t)]:Array.isArray(t)?function t(e,n){var r,i,l,c,f=[];for(r=0;r<e.length;r++)o(i=e[r])||"boolean"==typeof i||(l=f.length-1,c=f[l],Array.isArray(i)?i.length>0&&(Me((i=t(i,(n||"")+"_"+r))[0])&&Me(c)&&(f[l]=Et(c.text+i[0].text),i.shift()),f.push.apply(f,i)):u(i)?Me(c)?f[l]=Et(c.text+i):""!==i&&f.push(Et(i)):Me(i)&&Me(c)?f[l]=Et(c.text+i.text):(s(e._isVList)&&a(i.tag)&&o(i.key)&&a(n)&&(i.key="__vlist"+n+"_"+r+"__"),f.push(i)));return f}(t):void 0}function Me(t){return a(t)&&a(t.text)&&function(t){return!1===t}(t.isComment)}function Pe(t,e){return(t.__esModule||ct&&"Module"===t[Symbol.toStringTag])&&(t=t.default),l(t)?e.extend(t):t}function De(t){return t.isComment&&t.asyncFactory}function Fe(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(a(n)&&(a(n.componentOptions)||De(n)))return n}}function je(t,e,n){n?Se.$once(t,e):Se.$on(t,e)}function Re(t,e){Se.$off(t,e)}function Be(t,e,n){Se=t,Te(e,n||{},je,Re,t),Se=void 0}function ze(t,e){var n={};if(!t)return n;for(var r=0,i=t.length;r<i;r++){var o=t[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,u=n[s]||(n[s]=[]);"template"===o.tag?u.push.apply(u,o.children||[]):u.push(o)}}for(var l in n)n[l].every($e)&&delete n[l];return n}function $e(t){return t.isComment&&!t.asyncFactory||" "===t.text}function Ue(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?Ue(t[n],e):e[t[n].key]=t[n].fn;return e}var He=null,Ve=!1;function We(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Ye(t,e){if(e){if(t._directInactive=!1,We(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Ye(t.$children[n]);Ze(t,"activated")}}function Ze(t,e){bt();var n=t.$options[e];if(n)for(var r=0,i=n.length;r<i;r++)try{n[r].call(t)}catch(n){ee(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e),wt()}var qe=100,Xe=[],Ge=[],Ke={},Je={},Qe=!1,tn=!1,en=0;function nn(){var e,n;for(tn=!0,Xe.sort(function(t,e){return t.id-e.id}),en=0;en<Xe.length;en++)if(e=Xe[en],n=e.id,Ke[n]=null,e.run(),"production"!==t.env.NODE_ENV&&null!=Ke[n]&&(Je[n]=(Je[n]||0)+1,Je[n]>qe)){ft("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var r=Ge.slice(),i=Xe.slice();en=Xe.length=Ge.length=0,Ke={},"production"!==t.env.NODE_ENV&&(Je={}),Qe=tn=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Ye(t[e],!0)}(r),function(t){for(var e=t.length;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&Ze(r,"updated")}}(i),st&&U.devtools&&st.emit("flush")}var rn=0,on=function(e,n,r,i,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=r,this.id=++rn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression="production"!==t.env.NODE_ENV?n.toString():"","function"==typeof n?this.getter=n:(this.getter=function(t){if(!Y.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(n),this.getter||(this.getter=function(){},"production"!==t.env.NODE_ENV&&ft('Failed watching path: "'+n+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};on.prototype.get=function(){var t;bt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;ee(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ke(t),wt(),this.cleanupDeps()}return t},on.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},on.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},on.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Ke[e]){if(Ke[e]=!0,tn){for(var n=Xe.length-1;n>en&&Xe[n].id>t.id;)n--;Xe.splice(n+1,0,t)}else Xe.push(t);Qe||(Qe=!0,pe(nn))}}(this)},on.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||l(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){ee(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},on.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},on.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},on.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var an={enumerable:!0,configurable:!0,get:M,set:M};function sn(t,e,n){an.get=function(){return this[e][n]},an.set=function(t){this[e][n]=t},Object.defineProperty(t,n,an)}function un(e){e._watchers=[];var n=e.$options;n.props&&function(e,n){var r=e.$options.propsData||{},i=e._props={},o=e.$options._propKeys=[];e.$parent&&Lt(!1);var a=function(a){o.push(a);var s=Xt(a,n,r,e);if("production"!==t.env.NODE_ENV){var u=O(a);(y(u)||U.isReservedAttr(u))&&ft('"'+u+'" is a reserved attribute and cannot be used as component prop.',e),Ft(i,a,s,function(){e.$parent&&!Ve&&ft("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',e)})}else Ft(i,a,s);a in e||sn(e,"_props",a)};for(var s in n)a(s);Lt(!0)}(e,n.props),n.methods&&function(e,n){var r=e.$options.props;for(var i in n)"production"!==t.env.NODE_ENV&&(null==n[i]&&ft('Method "'+i+'" has an undefined value in the component definition. Did you reference the function correctly?',e),r&&x(r,i)&&ft('Method "'+i+'" has already been defined as a prop.',e),i in e&&H(i)&&ft('Method "'+i+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.')),e[i]=null==n[i]?M:T(n[i],e)}(e,n.methods),n.data?function(e){var n=e.$options.data;d(n=e._data="function"==typeof n?function(t,e){bt();try{return t.call(e,e)}catch(t){return ee(t,e,"data()"),{}}finally{wt()}}(n,e):n||{})||(n={},"production"!==t.env.NODE_ENV&&ft("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var r=Object.keys(n),i=e.$options.props,o=e.$options.methods,a=r.length;a--;){var s=r[a];"production"!==t.env.NODE_ENV&&o&&x(o,s)&&ft('Method "'+s+'" has already been defined as a data property.',e),i&&x(i,s)?"production"!==t.env.NODE_ENV&&ft('The data property "'+s+'" is already declared as a prop. Use prop default value instead.',e):H(s)||sn(e,"_data",s)}Dt(n,!0)}(e):Dt(e._data={},!0),n.computed&&function(e,n){var r=e._computedWatchers=Object.create(null),i=at();for(var o in n){var a=n[o],s="function"==typeof a?a:a.get;"production"!==t.env.NODE_ENV&&null==s&&ft('Getter is missing for computed property "'+o+'".',e),i||(r[o]=new on(e,s||M,M,ln)),o in e?"production"!==t.env.NODE_ENV&&(o in e.$data?ft('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props&&ft('The computed property "'+o+'" is already defined as a prop.',e)):cn(e,o,a)}}(e,n.computed),n.watch&&n.watch!==rt&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)dn(t,n,r[i]);else dn(t,n,r)}}(e,n.watch)}var ln={lazy:!0};function cn(e,n,r){var i=!at();"function"==typeof r?(an.get=i?fn(n):r,an.set=M):(an.get=r.get?i&&!1!==r.cache?fn(n):r.get:M,an.set=r.set?r.set:M),"production"!==t.env.NODE_ENV&&an.set===M&&(an.set=function(){ft('Computed property "'+n+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,n,an)}function fn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),_t.target&&e.depend(),e.value}}function dn(t,e,n,r){return d(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function hn(e,n){if(e){for(var r=Object.create(null),i=ct?Reflect.ownKeys(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}):Object.keys(e),o=0;o<i.length;o++){for(var a=i[o],s=e[a].from,u=n;u;){if(u._provided&&x(u._provided,s)){r[a]=u._provided[s];break}u=u.$parent}if(!u)if("default"in e[a]){var l=e[a].default;r[a]="function"==typeof l?l.call(n):l}else"production"!==t.env.NODE_ENV&&ft('Injection "'+a+'" not found',n)}return r}}function pn(t,e){var n,r,i,o,s;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(l(t))for(o=Object.keys(t),n=new Array(o.length),r=0,i=o.length;r<i;r++)s=o[r],n[r]=e(t[s],s,r);return a(n)&&(n._isVList=!0),n}function vn(e,n,r,i){var o,a=this.$scopedSlots[e];if(a)r=r||{},i&&("production"===t.env.NODE_ENV||l(i)||ft("slot v-bind without argument expects an Object",this),r=L(L({},i),r)),o=a(r)||n;else{var s=this.$slots[e];s&&("production"!==t.env.NODE_ENV&&s._rendered&&ft('Duplicate presence of slot "'+e+'" found in the same render tree - this will likely cause render errors.',this),s._rendered=!0),o=s||n}var u=r&&r.slot;return u?this.$createElement("template",{slot:u},o):o}function mn(t){return qt(this.$options,"filters",t,!0)||D}function gn(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function _n(t,e,n,r,i){var o=U.keyCodes[e]||n;return i&&r&&!U.keyCodes[e]?gn(i,r):o?gn(o,t):r?O(r)!==e:void 0}function yn(e,n,r,i,o){if(r)if(l(r)){var a;Array.isArray(r)&&(r=I(r));var s=function(t){if("class"===t||"style"===t||y(t))a=e;else{var s=e.attrs&&e.attrs.type;a=i||U.mustUseProp(n,s,t)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}if(!(t in a)&&(a[t]=r[t],o)){var u=e.on||(e.on={});u["update:"+t]=function(e){r[t]=e}}};for(var u in r)s(u)}else"production"!==t.env.NODE_ENV&&ft("v-bind without argument expects an Object or Array value",this);return e}function bn(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(xn(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function wn(t,e,n){return xn(t,"__once__"+e+(n?"_"+n:""),!0),t}function xn(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Cn(t[r],e+"_"+r,n);else Cn(t,e,n)}function Cn(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function kn(e,n){if(n)if(d(n)){var r=e.on=e.on?L({},e.on):{};for(var i in n){var o=r[i],a=n[i];r[i]=o?[].concat(o,a):a}}else"production"!==t.env.NODE_ENV&&ft("v-on without argument expects an Object value",this);return e}function En(t){t._o=wn,t._n=m,t._s=v,t._l=pn,t._t=vn,t._q=F,t._i=j,t._m=bn,t._f=mn,t._k=_n,t._b=yn,t._v=Et,t._e=kt,t._u=Ue,t._g=kn}function Sn(t,e,n,r,o){var a,u=o.options;x(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var l=s(u._compiled),c=!l;this.data=t,this.props=e,this.children=n,this.parent=r,this.listeners=t.on||i,this.injections=hn(u.inject,r),this.slots=function(){return ze(n,r)},l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||i),u._scopeId?this._c=function(t,e,n,i){var o=Pn(a,t,e,n,i,c);return o&&!Array.isArray(o)&&(o.fnScopeId=u._scopeId,o.fnContext=r),o}:this._c=function(t,e,n,r){return Pn(a,t,e,n,r,c)}}function An(t,e,n,r){var i=St(t);return i.fnContext=n,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function On(t,e){for(var n in e)t[E(n)]=e[n]}En(Sn.prototype);var Tn={init:function(t,e,n,r){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var i=t;Tn.prepatch(i,i)}else{var o=t.componentInstance=function(t,e,n,r){var i={_isComponent:!0,parent:e,_parentVnode:t,_parentElm:n||null,_refElm:r||null},o=t.data.inlineTemplate;return a(o)&&(i.render=o.render,i.staticRenderFns=o.staticRenderFns),new t.componentOptions.Ctor(i)}(t,He,n,r);o.$mount(e?t.elm:void 0,e)}},prepatch:function(e,n){var r=n.componentOptions,o=n.componentInstance=e.componentInstance;!function(e,n,r,o,a){"production"!==t.env.NODE_ENV&&(Ve=!0);var s=!!(a||e.$options._renderChildren||o.data.scopedSlots||e.$scopedSlots!==i);if(e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o),e.$options._renderChildren=a,e.$attrs=o.data.attrs||i,e.$listeners=r||i,n&&e.$options.props){Lt(!1);for(var u=e._props,l=e.$options._propKeys||[],c=0;c<l.length;c++){var f=l[c],d=e.$options.props;u[f]=Xt(f,d,n,e)}Lt(!0),e.$options.propsData=n}r=r||i;var h=e.$options._parentListeners;e.$options._parentListeners=r,Be(e,r,h),s&&(e.$slots=ze(a,o.context),e.$forceUpdate()),"production"!==t.env.NODE_ENV&&(Ve=!1)}(o,r.propsData,r.listeners,n,r.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,Ze(n,"mounted")),t.data.keepAlive&&(e._isMounted?function(t){t._inactive=!1,Ge.push(t)}(n):Ye(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(!(n&&(e._directInactive=!0,We(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);Ze(e,"deactivated")}}(e,!0):e.$destroy())}},Nn=Object.keys(Tn);function Ln(e,n,r,u,c){if(!o(e)){var f=r.$options._base;if(l(e)&&(e=f.extend(e)),"function"==typeof e){var d;if(o(e.cid)&&void 0===(e=function(e,n,r){if(s(e.error)&&a(e.errorComp))return e.errorComp;if(a(e.resolved))return e.resolved;if(s(e.loading)&&a(e.loadingComp))return e.loadingComp;if(!a(e.contexts)){var i=e.contexts=[r],u=!0,c=function(){for(var t=0,e=i.length;t<e;t++)i[t].$forceUpdate()},f=R(function(t){e.resolved=Pe(t,n),u||c()}),d=R(function(n){"production"!==t.env.NODE_ENV&&ft("Failed to resolve async component: "+String(e)+(n?"\nReason: "+n:"")),a(e.errorComp)&&(e.error=!0,c())}),h=e(f,d);return l(h)&&("function"==typeof h.then?o(e.resolved)&&h.then(f,d):a(h.component)&&"function"==typeof h.component.then&&(h.component.then(f,d),a(h.error)&&(e.errorComp=Pe(h.error,n)),a(h.loading)&&(e.loadingComp=Pe(h.loading,n),0===h.delay?e.loading=!0:setTimeout(function(){o(e.resolved)&&o(e.error)&&(e.loading=!0,c())},h.delay||200)),a(h.timeout)&&setTimeout(function(){o(e.resolved)&&d("production"!==t.env.NODE_ENV?"timeout ("+h.timeout+"ms)":null)},h.timeout))),u=!1,e.loading?e.loadingComp:e.resolved}e.contexts.push(r)}(d=e,f,r)))return function(t,e,n,r,i){var o=kt();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}(d,n,r,u,c);n=n||{},Fn(e),a(n.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.props||(e.props={}))[n]=e.model.value;var i=e.on||(e.on={});a(i[r])?i[r]=[e.model.callback].concat(i[r]):i[r]=e.model.callback}(e.options,n);var h=function(e,n,r){var i=n.options.props;if(!o(i)){var s={},u=e.attrs,l=e.props;if(a(u)||a(l))for(var c in i){var f=O(c);if("production"!==t.env.NODE_ENV){var d=c.toLowerCase();c!==d&&u&&x(u,d)&&dt('Prop "'+d+'" is passed to component '+pt(r||n)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+f+'" instead of "'+c+'".')}Le(s,l,c,f,!0)||Le(s,u,c,f,!1)}return s}}(n,e,c);if(s(e.options.functional))return function(t,e,n,r,o){var s=t.options,u={},l=s.props;if(a(l))for(var c in l)u[c]=Xt(c,l,e||i);else a(n.attrs)&&On(u,n.attrs),a(n.props)&&On(u,n.props);var f=new Sn(n,u,o,r,t),d=s.render.call(null,f._c,f);if(d instanceof xt)return An(d,n,f.parent,s);if(Array.isArray(d)){for(var h=Ie(d)||[],p=new Array(h.length),v=0;v<h.length;v++)p[v]=An(h[v],n,f.parent,s);return p}}(e,h,n,r,u);var p=n.on;if(n.on=n.nativeOn,s(e.options.abstract)){var v=n.slot;n={},v&&(n.slot=v)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Nn.length;n++){var r=Nn[n];e[r]=Tn[r]}}(n);var m=e.options.name||c,g=new xt("vue-component-"+e.cid+(m?"-"+m:""),n,void 0,void 0,void 0,r,{Ctor:e,propsData:h,listeners:p,tag:c,children:u},d);return g}"production"!==t.env.NODE_ENV&&ft("Invalid Component definition: "+String(e),r)}}var In=1,Mn=2;function Pn(e,n,r,i,c,f){return(Array.isArray(r)||u(r))&&(c=i,i=r,r=void 0),s(f)&&(c=Mn),function(e,n,r,i,c){return a(r)&&a(r.__ob__)?("production"!==t.env.NODE_ENV&&ft("Avoid using observed data object as vnode data: "+JSON.stringify(r)+"\nAlways create fresh vnode data objects in each render!",e),kt()):(a(r)&&a(r.is)&&(n=r.is),n?("production"!==t.env.NODE_ENV&&a(r)&&a(r.key)&&!u(r.key)&&ft("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(i)&&"function"==typeof i[0]&&((r=r||{}).scopedSlots={default:i[0]},i.length=0),c===Mn?i=Ie(i):c===In&&(i=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(i)),"string"==typeof n?(d=e.$vnode&&e.$vnode.ns||U.getTagNamespace(n),f=U.isReservedTag(n)?new xt(U.parsePlatformTagName(n),r,i,void 0,void 0,e):a(h=qt(e.$options,"components",n))?Ln(h,r,e,i,n):new xt(n,r,i,void 0,void 0,e)):f=Ln(n,r,e,i),Array.isArray(f)?f:a(f)?(a(d)&&function t(e,n,r){if(e.ns=n,"foreignObject"===e.tag&&(n=void 0,r=!0),a(e.children))for(var i=0,u=e.children.length;i<u;i++){var l=e.children[i];a(l.tag)&&(o(l.ns)||s(r)&&"svg"!==l.tag)&&t(l,n,r)}}(f,d),a(r)&&function(t){l(t.style)&&ke(t.style),l(t.class)&&ke(t.class)}(r),f):kt()):kt());var f,d,h}(e,n,r,i,c)}var Dn=0;function Fn(t){var e=t.options;if(t.super){var n=Fn(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var i=function(t){var e,n=t.options,r=t.extendOptions,i=t.sealedOptions;for(var o in n)n[o]!==i[o]&&(e||(e={}),e[o]=jn(n[o],r[o],i[o]));return e}(t);i&&L(t.extendOptions,i),(e=t.options=Zt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function jn(t,e,n){if(Array.isArray(t)){var r=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var i=0;i<t.length;i++)(e.indexOf(t[i])>=0||n.indexOf(t[i])<0)&&r.push(t[i]);return r}return t}function Rn(e){"production"===t.env.NODE_ENV||this instanceof Rn||ft("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function Bn(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var r=this,i=r.cid,o=e._Ctor||(e._Ctor={});if(o[i])return o[i];var a=e.name||r.options.name;"production"!==t.env.NODE_ENV&&a&&Wt(a);var s=function(t){this._init(t)};return(s.prototype=Object.create(r.prototype)).constructor=s,s.cid=n++,s.options=Zt(r.options,e),s.super=r,s.options.props&&function(t){var e=t.options.props;for(var n in e)sn(t.prototype,"_props",n)}(s),s.options.computed&&function(t){var e=t.options.computed;for(var n in e)cn(t.prototype,n,e[n])}(s),s.extend=r.extend,s.mixin=r.mixin,s.use=r.use,z.forEach(function(t){s[t]=r[t]}),a&&(s.options.components[a]=s),s.superOptions=r.options,s.extendOptions=e,s.sealedOptions=L({},s.options),o[i]=s,s}}function zn(t){return t&&(t.Ctor.options.name||t.tag)}function $n(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!h(t)&&t.test(e)}function Un(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var o in n){var a=n[o];if(a){var s=zn(a.componentOptions);s&&!e(s)&&Hn(n,o,r,i)}}}function Hn(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,b(n,e)}!function(e){e.prototype._init=function(e){var n,r,o=this;o._uid=Dn++,"production"!==t.env.NODE_ENV&&U.performance&&we&&(n="vue-perf-start:"+o._uid,r="vue-perf-end:"+o._uid,we(n)),o._isVue=!0,e&&e._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r,n._parentElm=e._parentElm,n._refElm=e._refElm;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(o,e):o.$options=Zt(Fn(o.constructor),e||{},o),"production"!==t.env.NODE_ENV?le(o):o._renderProxy=o,o._self=o,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(o),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Be(t,e)}(o),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,r=e.$vnode=n._parentVnode,o=r&&r.context;e.$slots=ze(n._renderChildren,o),e.$scopedSlots=i,e._c=function(t,n,r,i){return Pn(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return Pn(e,t,n,r,i,!0)};var a=r&&r.data;"production"!==t.env.NODE_ENV?(Ft(e,"$attrs",a&&a.attrs||i,function(){!Ve&&ft("$attrs is readonly.",e)},!0),Ft(e,"$listeners",n._parentListeners||i,function(){!Ve&&ft("$listeners is readonly.",e)},!0)):(Ft(e,"$attrs",a&&a.attrs||i,null,!0),Ft(e,"$listeners",n._parentListeners||i,null,!0))}(o),Ze(o,"beforeCreate"),function(e){var n=hn(e.$options.inject,e);n&&(Lt(!1),Object.keys(n).forEach(function(r){"production"!==t.env.NODE_ENV?Ft(e,r,n[r],function(){ft('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+r+'"',e)}):Ft(e,r,n[r])}),Lt(!0))}(o),un(o),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(o),Ze(o,"created"),"production"!==t.env.NODE_ENV&&U.performance&&we&&(o._name=pt(o,!1),we(r),xe("vue "+o._name+" init",n,r)),o.$options.el&&o.$mount(o.$options.el)}}(Rn),function(e){var n={get:function(){return this._data}},r={get:function(){return this._props}};"production"!==t.env.NODE_ENV&&(n.set=function(t){ft("Avoid replacing instance root $data. Use nested data properties instead.",this)},r.set=function(){ft("$props is readonly.",this)}),Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",r),e.prototype.$set=jt,e.prototype.$delete=Rt,e.prototype.$watch=function(t,e,n){if(d(e))return dn(this,t,e,n);(n=n||{}).user=!0;var r=new on(this,t,e,n);return n.immediate&&e.call(this,r.value),function(){r.teardown()}}}(Rn),function(e){var n=/^hook:/;e.prototype.$on=function(t,e){if(Array.isArray(t))for(var r=0,i=t.length;r<i;r++)this.$on(t[r],e);else(this._events[t]||(this._events[t]=[])).push(e),n.test(t)&&(this._hasHookEvent=!0);return this},e.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},e.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)this.$off(t[r],e);return n}var o=n._events[t];if(!o)return n;if(!e)return n._events[t]=null,n;if(e)for(var a,s=o.length;s--;)if((a=o[s])===e||a.fn===e){o.splice(s,1);break}return n},e.prototype.$emit=function(e){var n=this;if("production"!==t.env.NODE_ENV){var r=e.toLowerCase();r!==e&&n._events[r]&&dt('Event "'+r+'" is emitted in component '+pt(n)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+O(e)+'" instead of "'+e+'".')}var i=n._events[e];if(i){i=i.length>1?N(i):i;for(var o=N(arguments,1),a=0,s=i.length;a<s;a++)try{i[a].apply(n,o)}catch(t){ee(t,n,'event handler for "'+e+'"')}}return n}}(Rn),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&Ze(n,"beforeUpdate");var r=n.$el,i=n._vnode,o=He;He=n,n._vnode=t,i?n.$el=n.__patch__(i,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),He=o,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Ze(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||b(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Ze(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(Rn),function(e){En(e.prototype),e.prototype.$nextTick=function(t){return pe(t,this)},e.prototype._render=function(){var e,n=this,r=n.$options,o=r.render,a=r._parentVnode;if("production"!==t.env.NODE_ENV)for(var s in n.$slots)n.$slots[s]._rendered=!1;a&&(n.$scopedSlots=a.data.scopedSlots||i),n.$vnode=a;try{e=o.call(n._renderProxy,n.$createElement)}catch(r){if(ee(r,n,"render"),"production"!==t.env.NODE_ENV)if(n.$options.renderError)try{e=n.$options.renderError.call(n._renderProxy,n.$createElement,r)}catch(t){ee(t,n,"renderError"),e=n._vnode}else e=n._vnode;else e=n._vnode}return e instanceof xt||("production"!==t.env.NODE_ENV&&Array.isArray(e)&&ft("Multiple root nodes returned from render function. Render function should return a single root node.",n),e=kt()),e.parent=a,e}}(Rn);var Vn=[String,RegExp,Array],Wn={name:"keep-alive",abstract:!0,props:{include:Vn,exclude:Vn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Hn(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){Un(t,function(t){return $n(e,t)})}),this.$watch("exclude",function(e){Un(t,function(t){return!$n(e,t)})})},render:function(){var t=this.$slots.default,e=Fe(t),n=e&&e.componentOptions;if(n){var r=zn(n),i=this.include,o=this.exclude;if(i&&(!r||!$n(i,r))||o&&r&&$n(o,r))return e;var a=this.cache,s=this.keys,u=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[u]?(e.componentInstance=a[u].componentInstance,b(s,u),s.push(u)):(a[u]=e,s.push(u),this.max&&s.length>parseInt(this.max)&&Hn(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},Yn={KeepAlive:Wn};!function(e){var n={get:function(){return U}};"production"!==t.env.NODE_ENV&&(n.set=function(){ft("Do not replace the Vue.config object, set individual fields instead.")}),Object.defineProperty(e,"config",n),e.util={warn:ft,extend:L,mergeOptions:Zt,defineReactive:Ft},e.set=jt,e.delete=Rt,e.nextTick=pe,e.options=Object.create(null),z.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,L(e.options.components,Yn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=N(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(e),function(t){t.mixin=function(t){return this.options=Zt(this.options,t),this}}(e),Bn(e),function(e){z.forEach(function(n){e[n]=function(e,r){return r?("production"!==t.env.NODE_ENV&&"component"===n&&Wt(e),"component"===n&&d(r)&&(r.name=r.name||e,r=this.options._base.extend(r)),"directive"===n&&"function"==typeof r&&(r={bind:r,update:r}),this.options[n+"s"][e]=r,r):this.options[n+"s"][e]}})}(e)}(Rn),Object.defineProperty(Rn.prototype,"$isServer",{get:at}),Object.defineProperty(Rn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Rn,"FunctionalRenderContext",{value:Sn}),Rn.version="2.5.16";var Zn=g("style,class"),qn=g("input,textarea,option,select,progress"),Xn=g("contenteditable,draggable,spellcheck"),Gn=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Kn="http://www.w3.org/1999/xlink",Jn=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},Qn=function(t){return Jn(t)?t.slice(6,t.length):""},tr=function(t){return null==t||!1===t};function er(t){for(var e=t.data,n=t,r=t;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=nr(r.data,e));for(;a(n=n.parent);)n&&n.data&&(e=nr(e,n.data));return function(t,e){return a(t)||a(e)?rr(t,ir(e)):""}(e.staticClass,e.class)}function nr(t,e){return{staticClass:rr(t.staticClass,e.staticClass),class:a(t.class)?[t.class,e.class]:e.class}}function rr(t,e){return t?e?t+" "+e:t:e||""}function ir(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)a(e=ir(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):l(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var or={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ar=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),sr=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),ur=function(t){return ar(t)||sr(t)},lr=Object.create(null),cr=g("text,number,password,search,email,tel,url"),fr=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(or[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),dr={create:function(t,e){hr(e)},update:function(t,e){t.data.ref!==e.data.ref&&(hr(t,!0),hr(e))},destroy:function(t){hr(t,!0)}};function hr(t,e){var n=t.data.ref;if(a(n)){var r=t.context,i=t.componentInstance||t.elm,o=r.$refs;e?Array.isArray(o[n])?b(o[n],i):o[n]===i&&(o[n]=void 0):t.data.refInFor?Array.isArray(o[n])?o[n].indexOf(i)<0&&o[n].push(i):o[n]=[i]:o[n]=i}}var pr=new xt("",{},[]),vr=["create","activate","update","remove","destroy"];function mr(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&a(t.data)===a(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=a(n=t.data)&&a(n=n.attrs)&&n.type,i=a(n=e.data)&&a(n=n.attrs)&&n.type;return r===i||cr(r)&&cr(i)}(t,e)||s(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&o(e.asyncFactory.error))}function gr(t,e,n){var r,i,o={};for(r=e;r<=n;++r)a(i=t[r].key)&&(o[i]=r);return o}var _r={create:yr,update:yr,destroy:function(t){yr(t,pr)}};function yr(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,o=t===pr,a=e===pr,s=wr(t.data.directives,t.context),u=wr(e.data.directives,e.context),l=[],c=[];for(n in u)r=s[n],i=u[n],r?(i.oldValue=r.value,Cr(i,"update",e,t),i.def&&i.def.componentUpdated&&c.push(i)):(Cr(i,"bind",e,t),i.def&&i.def.inserted&&l.push(i));if(l.length){var f=function(){for(var n=0;n<l.length;n++)Cr(l[n],"inserted",e,t)};o?Ne(e,"insert",f):f()}if(c.length&&Ne(e,"postpatch",function(){for(var n=0;n<c.length;n++)Cr(c[n],"componentUpdated",e,t)}),!o)for(n in s)u[n]||Cr(s[n],"unbind",t,t,a)}(t,e)}var br=Object.create(null);function wr(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=br),i[xr(r)]=r,r.def=qt(e.$options,"directives",r.name,!0);return i}function xr(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Cr(t,e,n,r,i){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,r,i)}catch(r){ee(r,n.context,"directive "+t.name+" "+e+" hook")}}var kr=[dr,_r];function Er(t,e){var n=e.componentOptions;if(!(a(n)&&!1===n.Ctor.options.inheritAttrs||o(t.data.attrs)&&o(e.data.attrs))){var r,i,s=e.elm,u=t.data.attrs||{},l=e.data.attrs||{};for(r in a(l.__ob__)&&(l=e.data.attrs=L({},l)),l)i=l[r],u[r]!==i&&Sr(s,r,i);for(r in(J||tt)&&l.value!==u.value&&Sr(s,"value",l.value),u)o(l[r])&&(Jn(r)?s.removeAttributeNS(Kn,Qn(r)):Xn(r)||s.removeAttribute(r))}}function Sr(t,e,n){t.tagName.indexOf("-")>-1?Ar(t,e,n):Gn(e)?tr(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Xn(e)?t.setAttribute(e,tr(n)||"false"===n?"false":"true"):Jn(e)?tr(n)?t.removeAttributeNS(Kn,Qn(e)):t.setAttributeNS(Kn,e,n):Ar(t,e,n)}function Ar(t,e,n){if(tr(n))t.removeAttribute(e);else{if(J&&!Q&&"TEXTAREA"===t.tagName&&"placeholder"===e&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var Or={create:Er,update:Er};function Tr(t,e){var n=e.elm,r=e.data,i=t.data;if(!(o(r.staticClass)&&o(r.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=er(e),u=n._transitionClasses;a(u)&&(s=rr(s,ir(u))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Nr,Lr={create:Tr,update:Tr},Ir="__r",Mr="__c";function Pr(t,e,n,r,i){e=function(t){return t._withTask||(t._withTask=function(){ce=!0;var e=t.apply(null,arguments);return ce=!1,e})}(e),n&&(e=function(t,e,n){var r=Nr;return function i(){var o=t.apply(null,arguments);null!==o&&Dr(e,i,n,r)}}(e,t,r)),Nr.addEventListener(t,e,it?{capture:r,passive:i}:r)}function Dr(t,e,n,r){(r||Nr).removeEventListener(t,e._withTask||e,n)}function Fr(t,e){if(!o(t.data.on)||!o(e.data.on)){var n=e.data.on||{},r=t.data.on||{};Nr=e.elm,function(t){if(a(t[Ir])){var e=J?"change":"input";t[e]=[].concat(t[Ir],t[e]||[]),delete t[Ir]}a(t[Mr])&&(t.change=[].concat(t[Mr],t.change||[]),delete t[Mr])}(n),Te(n,r,Pr,Dr,e.context),Nr=void 0}}var jr={create:Fr,update:Fr};function Rr(t,e){if(!o(t.data.domProps)||!o(e.data.domProps)){var n,r,i=e.elm,s=t.data.domProps||{},u=e.data.domProps||{};for(n in a(u.__ob__)&&(u=e.data.domProps=L({},u)),s)o(u[n])&&(i[n]="");for(n in u){if(r=u[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===s[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n){i._value=r;var l=o(r)?"":String(r);Br(i,l)&&(i.value=l)}else i[n]=r}}}function Br(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(a(r)){if(r.lazy)return!1;if(r.number)return m(n)!==m(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var zr={create:Rr,update:Rr},$r=C(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function Ur(t){var e=Hr(t.style);return t.staticStyle?L(t.staticStyle,e):e}function Hr(t){return Array.isArray(t)?I(t):"string"==typeof t?$r(t):t}var Vr,Wr=/^--/,Yr=/\s*!important$/,Zr=function(t,e,n){if(Wr.test(e))t.style.setProperty(e,n);else if(Yr.test(n))t.style.setProperty(e,n.replace(Yr,""),"important");else{var r=Xr(e);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)t.style[r]=n[i];else t.style[r]=n}},qr=["Webkit","Moz","ms"],Xr=C(function(t){if(Vr=Vr||document.createElement("div").style,"filter"!==(t=E(t))&&t in Vr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<qr.length;n++){var r=qr[n]+e;if(r in Vr)return r}});function Gr(t,e){var n=e.data,r=t.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var i,s,u=e.elm,l=r.staticStyle,c=r.normalizedStyle||r.style||{},f=l||c,d=Hr(e.data.style)||{};e.data.normalizedStyle=a(d.__ob__)?L({},d):d;var h=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=Ur(i.data))&&L(r,n);(n=Ur(t.data))&&L(r,n);for(var o=t;o=o.parent;)o.data&&(n=Ur(o.data))&&L(r,n);return r}(e,!0);for(s in f)o(h[s])&&Zr(u,s,"");for(s in h)(i=h[s])!==f[s]&&Zr(u,s,null==i?"":i)}}var Kr={create:Gr,update:Gr};function Jr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Qr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function ti(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&L(e,ei(t.name||"v")),L(e,t),e}return"string"==typeof t?ei(t):void 0}}var ei=C(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),ni=q&&!Q,ri="transition",ii="animation",oi="transition",ai="transitionend",si="animation",ui="animationend";ni&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(oi="WebkitTransition",ai="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(si="WebkitAnimation",ui="webkitAnimationEnd"));var li=q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function ci(t){li(function(){li(t)})}function fi(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Jr(t,e))}function di(t,e){t._transitionClasses&&b(t._transitionClasses,e),Qr(t,e)}function hi(t,e,n){var r=vi(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===ri?ai:ui,u=0,l=function(){t.removeEventListener(s,c),n()},c=function(e){e.target===t&&++u>=a&&l()};setTimeout(function(){u<a&&l()},o+1),t.addEventListener(s,c)}var pi=/\b(transform|all)(,|$)/;function vi(t,e){var n,r=window.getComputedStyle(t),i=r[oi+"Delay"].split(", "),o=r[oi+"Duration"].split(", "),a=mi(i,o),s=r[si+"Delay"].split(", "),u=r[si+"Duration"].split(", "),l=mi(s,u),c=0,f=0;e===ri?a>0&&(n=ri,c=a,f=o.length):e===ii?l>0&&(n=ii,c=l,f=u.length):(c=Math.max(a,l),f=(n=c>0?a>l?ri:ii:null)?n===ri?o.length:u.length:0);var d=n===ri&&pi.test(r[oi+"Property"]);return{type:n,timeout:c,propCount:f,hasTransform:d}}function mi(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return gi(e)+gi(t[n])}))}function gi(t){return 1e3*Number(t.slice(0,-1))}function _i(e,n){var r=e.elm;a(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var i=ti(e.data.transition);if(!o(i)&&!a(r._enterCb)&&1===r.nodeType){for(var s=i.css,u=i.type,c=i.enterClass,f=i.enterToClass,d=i.enterActiveClass,h=i.appearClass,p=i.appearToClass,v=i.appearActiveClass,g=i.beforeEnter,_=i.enter,y=i.afterEnter,b=i.enterCancelled,w=i.beforeAppear,x=i.appear,C=i.afterAppear,k=i.appearCancelled,E=i.duration,S=He,A=He.$vnode;A&&A.parent;)A=A.parent,S=A.context;var O=!S._isMounted||!e.isRootInsert;if(!O||x||""===x){var T=O&&h?h:c,N=O&&v?v:d,L=O&&p?p:f,I=O&&w||g,M=O&&"function"==typeof x?x:_,P=O&&C||y,D=O&&k||b,F=m(l(E)?E.enter:E);"production"!==t.env.NODE_ENV&&null!=F&&bi(F,"enter",e);var j=!1!==s&&!Q,B=xi(M),z=r._enterCb=R(function(){j&&(di(r,L),di(r,N)),z.cancelled?(j&&di(r,T),D&&D(r)):P&&P(r),r._enterCb=null});e.data.show||Ne(e,"insert",function(){var t=r.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),M&&M(r,z)}),I&&I(r),j&&(fi(r,T),fi(r,N),ci(function(){di(r,T),z.cancelled||(fi(r,L),B||(wi(F)?setTimeout(z,F):hi(r,u,z)))})),e.data.show&&(n&&n(),M&&M(r,z)),j||B||z()}}}function yi(e,n){var r=e.elm;a(r._enterCb)&&(r._enterCb.cancelled=!0,r._enterCb());var i=ti(e.data.transition);if(o(i)||1!==r.nodeType)return n();if(!a(r._leaveCb)){var s=i.css,u=i.type,c=i.leaveClass,f=i.leaveToClass,d=i.leaveActiveClass,h=i.beforeLeave,p=i.leave,v=i.afterLeave,g=i.leaveCancelled,_=i.delayLeave,y=i.duration,b=!1!==s&&!Q,w=xi(p),x=m(l(y)?y.leave:y);"production"!==t.env.NODE_ENV&&a(x)&&bi(x,"leave",e);var C=r._leaveCb=R(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),b&&(di(r,f),di(r,d)),C.cancelled?(b&&di(r,c),g&&g(r)):(n(),v&&v(r)),r._leaveCb=null});_?_(k):k()}function k(){C.cancelled||(e.data.show||((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),h&&h(r),b&&(fi(r,c),fi(r,d),ci(function(){di(r,c),C.cancelled||(fi(r,f),w||(wi(x)?setTimeout(C,x):hi(r,u,C)))})),p&&p(r,C),b||w||C())}}function bi(t,e,n){"number"!=typeof t?ft("<transition> explicit "+e+" duration is not a valid number - got "+JSON.stringify(t)+".",n.context):isNaN(t)&&ft("<transition> explicit "+e+" duration is NaN - the duration expression might be incorrect.",n.context)}function wi(t){return"number"==typeof t&&!isNaN(t)}function xi(t){if(o(t))return!1;var e=t.fns;return a(e)?xi(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Ci(t,e){!0!==e.data.show&&_i(e)}var ki=q?{create:Ci,activate:Ci,remove:function(t,e){!0!==t.data.show?yi(t,e):e()}}:{},Ei=[Or,Lr,jr,zr,Kr,ki],Si=Ei.concat(kr),Ai=function(e){var n,r,i={},l=e.modules,c=e.nodeOps;for(n=0;n<vr.length;++n)for(i[vr[n]]=[],r=0;r<l.length;++r)a(l[r][vr[n]])&&i[vr[n]].push(l[r][vr[n]]);function f(t){var e=c.parentNode(t);a(e)&&c.removeChild(e,t)}function d(t,e){return!e&&!t.ns&&!(U.ignoredElements.length&&U.ignoredElements.some(function(e){return h(e)?e.test(t.tag):e===t.tag}))&&U.isUnknownElement(t.tag)}var p=0;function v(e,n,r,i,o,u,l){if(a(e.elm)&&a(u)&&(e=u[l]=St(e)),e.isRootInsert=!o,!m(e,n,r,i)){var f=e.data,h=e.children,v=e.tag;a(v)?("production"!==t.env.NODE_ENV&&(f&&f.pre&&p++,d(e,p)&&ft("Unknown custom element: <"+v+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context)),e.elm=e.ns?c.createElementNS(e.ns,v):c.createElement(v,e),C(e),b(e,h,n),a(f)&&x(e,n),y(r,e.elm,i),"production"!==t.env.NODE_ENV&&f&&f.pre&&p--):s(e.isComment)?(e.elm=c.createComment(e.text),y(r,e.elm,i)):(e.elm=c.createTextNode(e.text),y(r,e.elm,i))}}function m(t,e,n,r){var o=t.data;if(a(o)){var u=a(t.componentInstance)&&o.keepAlive;if(a(o=o.hook)&&a(o=o.init)&&o(t,!1,n,r),a(t.componentInstance))return _(t,e),s(u)&&function(t,e,n,r){for(var o,s=t;s.componentInstance;)if(s=s.componentInstance._vnode,a(o=s.data)&&a(o=o.transition)){for(o=0;o<i.activate.length;++o)i.activate[o](pr,s);e.push(s);break}y(n,t.elm,r)}(t,e,n,r),!0}}function _(t,e){a(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,w(t)?(x(t,e),C(t)):(hr(t),e.push(t))}function y(t,e,n){a(t)&&(a(n)?n.parentNode===t&&c.insertBefore(t,e,n):c.appendChild(t,e))}function b(e,n,r){if(Array.isArray(n)){"production"!==t.env.NODE_ENV&&O(n);for(var i=0;i<n.length;++i)v(n[i],r,e.elm,null,!0,n,i)}else u(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function w(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return a(t.tag)}function x(t,e){for(var r=0;r<i.create.length;++r)i.create[r](pr,t);a(n=t.data.hook)&&(a(n.create)&&n.create(pr,t),a(n.insert)&&e.push(t))}function C(t){var e;if(a(e=t.fnScopeId))c.setStyleScope(t.elm,e);else for(var n=t;n;)a(e=n.context)&&a(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e),n=n.parent;a(e=He)&&e!==t.context&&e!==t.fnContext&&a(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e)}function k(t,e,n,r,i,o){for(;r<=i;++r)v(n[r],o,t,e,!1,n,r)}function E(t){var e,n,r=t.data;if(a(r))for(a(e=r.hook)&&a(e=e.destroy)&&e(t),e=0;e<i.destroy.length;++e)i.destroy[e](t);if(a(e=t.children))for(n=0;n<t.children.length;++n)E(t.children[n])}function S(t,e,n,r){for(;n<=r;++n){var i=e[n];a(i)&&(a(i.tag)?(A(i),E(i)):f(i.elm))}}function A(t,e){if(a(e)||a(t.data)){var n,r=i.remove.length+1;for(a(e)?e.listeners+=r:e=function(t,e){function n(){0==--n.listeners&&f(t)}return n.listeners=e,n}(t.elm,r),a(n=t.componentInstance)&&a(n=n._vnode)&&a(n.data)&&A(n,e),n=0;n<i.remove.length;++n)i.remove[n](t,e);a(n=t.data.hook)&&a(n=n.remove)?n(t,e):e()}else f(t.elm)}function O(t){for(var e={},n=0;n<t.length;n++){var r=t[n],i=r.key;a(i)&&(e[i]?ft("Duplicate keys detected: '"+i+"'. This may cause an update error.",r.context):e[i]=!0)}}function T(t,e,n,r){for(var i=n;i<r;i++){var o=e[i];if(a(o)&&mr(t,o))return i}}function N(e,n,r,u){if(e!==n){var l=n.elm=e.elm;if(s(e.isAsyncPlaceholder))a(n.asyncFactory.resolved)?P(e.elm,n,r):n.isAsyncPlaceholder=!0;else if(s(n.isStatic)&&s(e.isStatic)&&n.key===e.key&&(s(n.isCloned)||s(n.isOnce)))n.componentInstance=e.componentInstance;else{var f,d=n.data;a(d)&&a(f=d.hook)&&a(f=f.prepatch)&&f(e,n);var h=e.children,p=n.children;if(a(d)&&w(n)){for(f=0;f<i.update.length;++f)i.update[f](e,n);a(f=d.hook)&&a(f=f.update)&&f(e,n)}o(n.text)?a(h)&&a(p)?h!==p&&function(e,n,r,i,s){var u,l,f,d,h=0,p=0,m=n.length-1,g=n[0],_=n[m],y=r.length-1,b=r[0],w=r[y],x=!s;for("production"!==t.env.NODE_ENV&&O(r);h<=m&&p<=y;)o(g)?g=n[++h]:o(_)?_=n[--m]:mr(g,b)?(N(g,b,i),g=n[++h],b=r[++p]):mr(_,w)?(N(_,w,i),_=n[--m],w=r[--y]):mr(g,w)?(N(g,w,i),x&&c.insertBefore(e,g.elm,c.nextSibling(_.elm)),g=n[++h],w=r[--y]):mr(_,b)?(N(_,b,i),x&&c.insertBefore(e,_.elm,g.elm),_=n[--m],b=r[++p]):(o(u)&&(u=gr(n,h,m)),o(l=a(b.key)?u[b.key]:T(b,n,h,m))?v(b,i,e,g.elm,!1,r,p):mr(f=n[l],b)?(N(f,b,i),n[l]=void 0,x&&c.insertBefore(e,f.elm,g.elm)):v(b,i,e,g.elm,!1,r,p),b=r[++p]);h>m?(d=o(r[y+1])?null:r[y+1].elm,k(e,d,r,p,y,i)):p>y&&S(e,n,h,m)}(l,h,p,r,u):a(p)?(a(e.text)&&c.setTextContent(l,""),k(l,null,p,0,p.length-1,r)):a(h)?S(l,h,0,h.length-1):a(e.text)&&c.setTextContent(l,""):e.text!==n.text&&c.setTextContent(l,n.text),a(d)&&a(f=d.hook)&&a(f=f.postpatch)&&f(e,n)}}}function L(t,e,n){if(s(n)&&a(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var I=!1,M=g("attrs,class,staticClass,staticStyle,key");function P(e,n,r,i){var o,u=n.tag,l=n.data,c=n.children;if(i=i||l&&l.pre,n.elm=e,s(n.isComment)&&a(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if("production"!==t.env.NODE_ENV&&!function(t,e,n){return a(e.tag)?0===e.tag.indexOf("vue-component")||!d(e,n)&&e.tag.toLowerCase()===(t.tagName&&t.tagName.toLowerCase()):t.nodeType===(e.isComment?8:3)}(e,n,i))return!1;if(a(l)&&(a(o=l.hook)&&a(o=o.init)&&o(n,!0),a(o=n.componentInstance)))return _(n,r),!0;if(a(u)){if(a(c))if(e.hasChildNodes())if(a(o=l)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==e.innerHTML)return"production"===t.env.NODE_ENV||"undefined"==typeof console||I||(I=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",o),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var f=!0,h=e.firstChild,p=0;p<c.length;p++){if(!h||!P(h,c[p],r,i)){f=!1;break}h=h.nextSibling}if(!f||h)return"production"===t.env.NODE_ENV||"undefined"==typeof console||I||(I=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,c)),!1}else b(n,c,r);if(a(l)){var v=!1;for(var m in l)if(!M(m)){v=!0,x(n,r);break}!v&&l.class&&ke(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,r,u,l,f){if(!o(n)){var d=!1,h=[];if(o(e))d=!0,v(n,h,l,f);else{var p=a(e.nodeType);if(!p&&mr(e,n))N(e,n,h,u);else{if(p){if(1===e.nodeType&&e.hasAttribute(B)&&(e.removeAttribute(B),r=!0),s(r)){if(P(e,n,h))return L(n,h,!0),e;"production"!==t.env.NODE_ENV&&ft("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}e=function(t){return new xt(c.tagName(t).toLowerCase(),{},[],void 0,t)}(e)}var m=e.elm,g=c.parentNode(m);if(v(n,h,m._leaveCb?null:g,c.nextSibling(m)),a(n.parent))for(var _=n.parent,y=w(n);_;){for(var b=0;b<i.destroy.length;++b)i.destroy[b](_);if(_.elm=n.elm,y){for(var x=0;x<i.create.length;++x)i.create[x](pr,_);var C=_.data.hook.insert;if(C.merged)for(var k=1;k<C.fns.length;k++)C.fns[k]()}else hr(_);_=_.parent}a(g)?S(g,[e],0,0):a(e.tag)&&E(e)}}return L(n,h,d),n.elm}a(e)&&E(e)}}({nodeOps:fr,modules:Si});Q&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&Di(t,"input")});var Oi={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Ne(n,"postpatch",function(){Oi.componentUpdated(t,e,n)}):Ti(t,e,n.context),t._vOptions=[].map.call(t.options,Ii)):("textarea"===n.tag||cr(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Mi),t.addEventListener("compositionend",Pi),t.addEventListener("change",Pi),Q&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Ti(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Ii);if(i.some(function(t,e){return!F(t,r[e])})){var o=t.multiple?e.value.some(function(t){return Li(t,i)}):e.value!==e.oldValue&&Li(e.value,i);o&&Di(t,"change")}}}};function Ti(t,e,n){Ni(t,e,n),(J||tt)&&setTimeout(function(){Ni(t,e,n)},0)}function Ni(e,n,r){var i=n.value,o=e.multiple;if(!o||Array.isArray(i)){for(var a,s,u=0,l=e.options.length;u<l;u++)if(s=e.options[u],o)a=j(i,Ii(s))>-1,s.selected!==a&&(s.selected=a);else if(F(Ii(s),i))return void(e.selectedIndex!==u&&(e.selectedIndex=u));o||(e.selectedIndex=-1)}else"production"!==t.env.NODE_ENV&&ft('<select multiple v-model="'+n.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(i).slice(8,-1),r)}function Li(t,e){return e.every(function(e){return!F(e,t)})}function Ii(t){return"_value"in t?t._value:t.value}function Mi(t){t.target.composing=!0}function Pi(t){t.target.composing&&(t.target.composing=!1,Di(t.target,"input"))}function Di(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Fi(t){return!t.componentInstance||t.data&&t.data.transition?t:Fi(t.componentInstance._vnode)}var ji={bind:function(t,e,n){var r=e.value,i=(n=Fi(n)).data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,_i(n,function(){t.style.display=o})):t.style.display=r?o:"none"},update:function(t,e,n){var r=e.value,i=e.oldValue;if(!r!=!i){var o=(n=Fi(n)).data&&n.data.transition;o?(n.data.show=!0,r?_i(n,function(){t.style.display=t.__vOriginalDisplay}):yi(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none"}},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}},Ri={model:Oi,show:ji},Bi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function zi(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?zi(Fe(e.children)):t}function $i(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[E(o)]=i[o];return e}function Ui(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var Hi={name:"transition",props:Bi,abstract:!0,render:function(e){var n=this,r=this.$slots.default;if(r&&(r=r.filter(function(t){return t.tag||De(t)})).length){"production"!==t.env.NODE_ENV&&r.length>1&&ft("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var i=this.mode;"production"!==t.env.NODE_ENV&&i&&"in-out"!==i&&"out-in"!==i&&ft("invalid <transition> mode: "+i,this.$parent);var o=r[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var a=zi(o);if(!a)return o;if(this._leaving)return Ui(e,o);var s="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?s+"comment":s+a.tag:u(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var l=(a.data||(a.data={})).transition=$i(this),c=this._vnode,f=zi(c);if(a.data.directives&&a.data.directives.some(function(t){return"show"===t.name})&&(a.data.show=!0),f&&f.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(a,f)&&!De(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var d=f.data.transition=L({},l);if("out-in"===i)return this._leaving=!0,Ne(d,"afterLeave",function(){n._leaving=!1,n.$forceUpdate()}),Ui(e,o);if("in-out"===i){if(De(a))return c;var h,p=function(){h()};Ne(l,"afterEnter",p),Ne(l,"enterCancelled",p),Ne(d,"delayLeave",function(t){h=t})}}return o}}},Vi=L({tag:String,moveClass:String},Bi);delete Vi.mode;var Wi={props:Vi,render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),i=this.prevChildren=this.children,o=this.$slots.default||[],a=this.children=[],s=$i(this),u=0;u<o.length;u++){var l=o[u];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),r[l.key]=l,(l.data||(l.data={})).transition=s;else if("production"!==t.env.NODE_ENV){var c=l.componentOptions,f=c?c.Ctor.options.name||c.tag||"":l.tag;ft("<transition-group> children must be keyed: <"+f+">")}}if(i){for(var d=[],h=[],p=0;p<i.length;p++){var v=i[p];v.data.transition=s,v.data.pos=v.elm.getBoundingClientRect(),r[v.key]?d.push(v):h.push(v)}this.kept=e(n,null,d),this.removed=h}return e(n,null,a)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Yi),t.forEach(Zi),t.forEach(qi),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;fi(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ai,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ai,t),n._moveCb=null,di(n,e))})}}))},methods:{hasMove:function(t,e){if(!ni)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){Qr(n,t)}),Jr(n,e),n.style.display="none",this.$el.appendChild(n);var r=vi(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function Yi(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function Zi(t){t.data.newPos=t.elm.getBoundingClientRect()}function qi(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}var Xi={Transition:Hi,TransitionGroup:Wi};Rn.config.mustUseProp=function(t,e,n){return"value"===n&&qn(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Rn.config.isReservedTag=ur,Rn.config.isReservedAttr=Zn,Rn.config.getTagNamespace=function(t){return sr(t)?"svg":"math"===t?"math":void 0},Rn.config.isUnknownElement=function(t){if(!q)return!0;if(ur(t))return!1;if(t=t.toLowerCase(),null!=lr[t])return lr[t];var e=document.createElement(t);return t.indexOf("-")>-1?lr[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:lr[t]=/HTMLUnknownElement/.test(e.toString())},L(Rn.options.directives,Ri),L(Rn.options.components,Xi),Rn.prototype.__patch__=q?Ai:M,Rn.prototype.$mount=function(e,n){return function(e,n,r){var i;return e.$el=n,e.$options.render||(e.$options.render=kt,"production"!==t.env.NODE_ENV&&(e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||n?ft("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):ft("Failed to mount component: template or render function not defined.",e))),Ze(e,"beforeMount"),i="production"!==t.env.NODE_ENV&&U.performance&&we?function(){var t=e._name,n=e._uid,i="vue-perf-start:"+n,o="vue-perf-end:"+n;we(i);var a=e._render();we(o),xe("vue "+t+" render",i,o),we(i),e._update(a,r),we(o),xe("vue "+t+" patch",i,o)}:function(){e._update(e._render(),r)},new on(e,i,M,null,!0),r=!1,null==e.$vnode&&(e._isMounted=!0,Ze(e,"mounted")),e}(this,e=e&&q?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||("production"!==t.env.NODE_ENV&&ft("Cannot find element: "+e),document.createElement("div"))}return e}(e):void 0,n)},q&&setTimeout(function(){U.devtools&&(st?st.emit("init",Rn):"production"!==t.env.NODE_ENV&&"test"!==t.env.NODE_ENV&&nt&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),"production"!==t.env.NODE_ENV&&"test"!==t.env.NODE_ENV&&!1!==U.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0),n.exports=Rn}).call(this,t("_process"),void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},t("timers").setImmediate)},{_process:62,timers:63}],66:[function(t,e,n){var r=n.cache={};function i(){}n.insert=function(t){if(r[t])return i;r[t]=!0;var e=document.createElement("style");return e.setAttribute("type","text/css"),"textContent"in e?e.textContent=t:e.styleSheet.cssText=t,document.getElementsByTagName("head")[0].appendChild(e),function(){document.getElementsByTagName("head")[0].removeChild(e),r[t]=!1}}},{}],67:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(t,e){if(t)return!0;throw new Error(e)}},{}],68:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=t("./clock"),o=function(t){return t&&t.__esModule?t:{default:t}}(i),a=function(t){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.frame=0,r.fps=n,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"update",value:function(){this.isPlaying?(this.time=this.frame/this.fps,this.deltaTime=1/this.fps,this.frame++):this.deltaTime=0}}]),e}(o.default);n.default=a},{"./clock":70}],69:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=t("./clock"),o=function(t){return t&&t.__esModule?t:{default:t}}(i),a=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return n.realtime=!0,n.rtTime=0,n.rtDate=+new Date,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"update",value:function(){if(this.isPlaying){var t=this.time,e=Date.now(),n=e-this.rtDate;this.time=this.rtTime+n/1e3,this.deltaTime=this.time-t}else this.rtTime=this.time,this.rtDate=+new Date,this.deltaTime=0}},{key:"setTime",value:function(t){this.time=t,this.rtTime=this.time,this.rtDate=+new Date}}]),e}(o.default);n.default=a},{"./clock":70}],70:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.automaton=e,this.time=0,this.deltaTime=0,this.isPlaying=!0}return r(t,[{key:"update",value:function(t){var e=this.time;this.time=t,this.deltaTime=this.time-e}},{key:"play",value:function(){this.isPlaying=!0}},{key:"pause",value:function(){this.isPlaying=!1}},{key:"setTime",value:function(t){this.time=t}}]),t}();n.default=i},{}],71:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=t("./param-gui");!function(t){t&&t.__esModule}(i);var o={v:"2.0.0",length:1,resolution:1e3,params:{},guiSettings:{snapActive:!1,snapTime:.1,snapValue:.1}};n.default=function(t){if(!t)return Object.assign({},o);var e=void 0;if("object"===(void 0===t?"undefined":r(t)))e=t;else{if("string"!=typeof t)return console.error("Loaded data is invalid"),Object.assign({},o);try{e=JSON.parse(t)}catch(t){return console.error("Loaded data is invalid"),Object.assign({},o)}}var n=parseFloat(e.v);if(!n&&!e.rev){if(!e.gui)return console.error("Loaded data is not compatible with this revision"),Object.assign({},o);delete e.gui,e.gui=Object.assign({},o.gui)}if(e.rev&&(n=1,delete e.rev),n<2){var i=function(t){for(var n=e.params[t],r={nodes:n.map(function(t,e){return{time:t.time,value:t.value,in:0===e?void 0:{time:0,value:0},out:e===n.length-1?void 0:{time:0,value:0}}}),fxs:[]},i=0,o=1;o<n.length;o++){if(i++,0===n[o].mode)r.nodes.splice(i,0,{time:n[o].time,value:n[o-1].value,in:{time:0,value:0},out:{time:0,value:0}}),i++;else if(1===n[o].mode);else if(2===n[o].mode){var a=r.nodes[i].time-r.nodes[i-1].time;r.nodes[i-1].out={time:.37*a,value:0},r.nodes[i].in={time:.37*-a,value:0}}else r.nodes.splice(i,0,{time:n[o-1].time,value:n[o].value,in:{time:0,value:0},out:{time:0,value:0}}),i++,3===n[o].mode?r.fxs.push({name:"Exponential Smoothing",bypass:!1,row:0,time:n[o-1].time-1/e.resolution,length:n[o].time-n[o-1].time,params:{factor:n[o].params.factor,preserve:!0}}):4===n[o].mode?r.fxs.push({name:"Critically Damped Spring",bypass:!1,row:0,time:n[o-1].time-1/e.resolution,length:n[o].time-n[o-1].time,params:{factor:n[o].params.rate,ratio:n[o].params.damp,preserve:!0}}):5===n[o].mode&&r.fxs.push({name:"Gravity",bypass:!1,row:0,time:n[o-1].time-1/e.resolution,length:n[o].time-n[o-1].time,params:{a:n[o].params.gravity,e:n[o].params.bounce,preserve:!0}});n[o].mods[1]&&r.fxs.push({name:"Sinewave",bypass:!1,row:1,time:n[o-1].time,length:n[o].time-n[o-1].time,params:{freq:n[o].mods[1].freq,amp:n[o].mods[1].amp,phase:n[o].mods[1].phase}}),n[o].mods[2]&&r.fxs.push({name:"Fractal Noise",bypass:!1,row:2,time:n[o-1].time,length:n[o].time-n[o-1].time,params:{amp:n[o].mods[2].amp,recursion:n[o].mods[2].recursion,freq:n[o].mods[2].freq,reso:n[o].mods[2].reso,seed:n[o].mods[2].seed}}),n[o].mods[3]&&r.fxs.push({name:"Lo-Fi",bypass:!1,row:3,time:n[o-1].time,length:n[o].time-n[o-1].time,params:{resolution:n[o].mods[3].freq,relative:!0}})}e.params[t]=r};for(var a in e.params)i(a);e.guiSettings={snapActive:!1,snapTime:.1,snapValue:.1}}return e.v="2.0.0",e}},{"./param-gui":100}],72:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=[],i=function(t,e){return 1-3*e+3*t},o=function(t,e){return 3*e-6*t},a=function(t){return 3*t},s=function(t){return Math.min(Math.max(t,0),1)},u=function(t,e,n){return((i(e,n)*t+o(e,n))*t+a(e))*t},l=function(t,e,n){return 3*i(e,n)*t*t+2*o(e,n)*t+a(e)},c=function(t,e,n,i,o){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(i))return o;if(t===e&&n===i)return o;if(o<=0)return 0;if(1<=o)return 1;t=s(t),n=s(n);for(var a=0;a<21;a++)r[a]=u(a/20,t,n);for(var c=1,f=1;f<21&&(c=f-1,!(o<r[f]));f++);var d=(o-r[c])/(r[c+1]-r[c]),h=(c+d)/20,p=l(h,t,n);return.001<=p?h=function(t,e,n,r){for(var i=0;i<4;i++){var o=l(e,n,r);if(0===o)return e;var a=u(e,n,r)-t;e-=a/o}return e}(o,h,t,n):0!==p&&(h=function(t,e,n,r,i){for(var o=0,a=0,s=0;s<10&&(0<(o=u(a=e+(n-e)/2,r,i)-t)?n=a:e=a,!(1e-6<Math.abs(o)));s++);return a}(o,c/20,(c+1)/20,t,n)),u(h,e,i)};n.default=function(t,e,n){var r=e.time-t.time,i=e.value-t.value,o=t.out.time/r,a=t.out.value/i,s=(e.time+e.in.time-t.time)/r,u=(e.value+e.in.value-t.value)/i,l=(n-t.time)/r;return t.value+c(o,a,s,u,l)*i}},{}],73:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=[t("./fxs/add").default,t("./fxs/cds").default,t("./fxs/clamp").default,t("./fxs/exp").default,t("./fxs/gravity").default,t("./fxs/lofi").default,t("./fxs/noise").default,t("./fxs/pow").default,t("./fxs/sine").default]},{"./fxs/add":74,"./fxs/cds":75,"./fxs/clamp":76,"./fxs/exp":77,"./fxs/gravity":78,"./fxs/lofi":79,"./fxs/noise":81,"./fxs/pow":82,"./fxs/sine":83}],74:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=["add",{name:"Add",description:"The simplest fx ever. Just add a constant value to the curve.",params:{value:{name:"Value",type:"float",default:1}},func:function(t){return t.v+t.params.value}}]},{}],75:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=["cds",{name:"Critically Damped Spring",description:"Basically the best smoothing method. Shoutouts to Keijiro Takahashi",params:{factor:{name:"Factor",type:"float",default:100,min:0},ratio:{name:"Damp Ratio",type:"float",default:1},preserve:{name:"Preserve Velocity",type:"boolean",default:!1}},func:function(t){var e=t.dt,n=t.v,r=t.params.factor;if(t.init)if(t.pos=t.v,t.params.preserve){var i=n-t.getValue(t.t-e);t.vel=i/e}else t.vel=0;return t.vel+=(-r*(t.pos-n)-2*t.vel*Math.sqrt(r)*t.params.ratio)*e,t.pos+=t.vel*e,t.pos}}]},{}],76:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(t,e,n){var r=Math.max(n-Math.abs(t-e),0);return Math.min(t,e)-r*r*r/(6*n*n)};n.default=["clamp",{name:"Clamp",description:"Constrain the curve between two values, featuring smooth minimum.",params:{min:{name:"Min",type:"float",default:0},max:{name:"Max",type:"float",default:1},smooth:{name:"Smooth",type:"float",default:0,min:0}},func:function(t){if(0===t.params.smooth)return function(t,e,n){return Math.min(Math.max(t,e),n)}(t.v,t.params.min,t.params.max);var e=-r(-t.params.min,-t.v,t.params.smooth);return r(t.params.max,e,t.params.smooth)}}]},{}],77:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=["exp",{name:"Exponential Smoothing",description:"Smooth the curve. Simple but good.",params:{factor:{name:"Factor",type:"float",default:10,min:0}},func:function(t){var e=t.v;t.init&&(t.pos=e);var n=Math.exp(-t.dt*t.params.factor);return t.pos=t.pos*n+e*(1-n),t.pos}}]},{}],78:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=["gravity",{name:"Gravity",description:"Accelerate and bounce the curve.",params:{a:{name:"Acceleration",type:"float",default:9.8},e:{name:"Restitution",type:"float",default:.5,min:0},preserve:{name:"Preserve Velocity",type:"boolean",default:!1}},func:function(t){var e=t.dt,n=t.v;if(t.init)if(t.pos=n,t.params.preserve){var r=n-t.getValue(t.t-e);t.vel=r/e}else t.vel=0;var i=Math.sign(n-t.pos)*t.params.a;return t.vel+=i*e,t.pos+=t.vel*e,Math.sign(i)!==Math.sign(n-t.pos)&&(t.vel*=-t.params.e,t.pos=n+t.params.e*(n-t.pos)),t.pos}}]},{}],79:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=["lofi",{name:"Lo-Fi",description:"Make curve more crunchy.",params:{rate:{name:"Frame Rate",type:"float",default:10,min:0,max:1e3},relative:{name:"Relative",type:"boolean",default:!1},reso:{name:"Reso Per Unit",type:"float",default:.1,min:0,max:1e3},round:{name:"Round",type:"boolean",default:!1}},func:function(t){var e=void 0;e=0===t.params.rate?t.t:t.params.relative?t.t0+Math.floor((t.t-t.t0)*t.params.rate)/t.params.rate:Math.floor(t.t*t.params.rate)/t.params.rate;var n=t.getValue(e);return 0!==t.params.reso&&(n=Math.floor(n*t.params.reso+(t.params.round?.5:0))/t.params.reso),n}}]},{}],80:[function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.set(e)}return r(t,[{key:"gen",value:function(t){return t&&this.set(t),this.seed=this.seed^this.seed<<13,this.seed=this.seed^this.seed>>>17,this.seed=this.seed^this.seed<<5,this.seed/Math.pow(2,32)+.5}},{key:"set",value:function(t){this.seed=t||this.seed||1}}]),t}();e.exports=i},{}],81:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t("./modules/xorshift"),i=function(t){return t&&t.__esModule?t:{default:t}}(r),o=new i.default,a=function(t,e,n){var r=n*n*(3-2*n);return t+(e-t)*r};n.default=["noise",{name:"Fractal Noise",description:"wiggle()",params:{recursion:{name:"Recursion",type:"int",default:4,min:1,max:99},freq:{name:"Frequency",type:"float",default:1,min:0},reso:{name:"Resolution",type:"float",default:8,min:1},seed:{name:"Seed",type:"int",default:1,min:0},amp:{name:"Amp",type:"float",default:.2}},func:function(t){if(t.init){o.gen(t.params.seed),t.table=new Float32Array(Math.floor(t.params.reso)+2);for(var e=1;e<t.params.reso;e++)t.table[e]=2*o.gen()-1}for(var n=t.v,r=t.progress,i=0;i<t.params.recursion;i++){var s=r*t.params.freq*t.params.reso*Math.pow(2,i)%t.params.reso,u=Math.floor(s),l=s-u,c=Math.pow(.5,i+1);n+=t.params.amp*c*a(t.table[u],t.table[u+1],l)}return n}}]},{"./modules/xorshift":80}],82:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=["pow",{name:"Power",description:"You got boost power!",params:{pow:{name:"Power",type:"float",default:2},bias:{name:"Bias",type:"float",default:0},positive:{name:"Force Positive",type:"boolean",default:!1}},func:function(t){var e=t.v-t.params.bias,n=t.params.positive?1:Math.sign(e);return Math.pow(Math.abs(e),t.params.pow)*n+t.params.bias}}]},{}],83:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=2*Math.PI;n.default=["sine",{name:"Sinewave",description:"Overlay a sinewave to the curve.",params:{amp:{name:"Amp",type:"float",default:.1},freq:{name:"Frequency",type:"float",default:5},phase:{name:"Phase",type:"float",default:0,min:0,max:1}},func:function(t){var e=t.v,n=t.progress*t.params.freq+t.params.phase;return e+t.params.amp*Math.sin(n*r)}}]},{}],84:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){for(var t="",e=0;e<16;e++)t+=Math.floor(16*Math.random()).toString(16);return t}},{}],85:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function t(e,n,r,i){return i<n?t(r,i,e,n):r<e&&e<r+i||r<e+n&&e+n<r+i}},{}],86:[function(t,e,n){e.exports="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8' standalone='no'%3F%3E %3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E %3Csvg width='100%25' height='100%25' viewBox='0 0 128 128' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xml:space='preserve' xmlns:serif='http://www.serif.com/' style='fill-rule:evenodd%3Bclip-rule:evenodd%3Bstroke-linejoin:round%3Bstroke-miterlimit:1.41421%3B'%3E     %3Cpath d='M64%2C55.537L105.023%2C14.513L113.487%2C22.977L72.463%2C64L113.487%2C105.023L105.023%2C113.487L64%2C72.463L22.977%2C113.487L14.513%2C105.023L55.537%2C64L14.513%2C22.977L22.977%2C14.513L64%2C55.537Z' style='fill:rgb(201%2C226%2C255)%3B'/%3E %3C/svg%3E"},{}],87:[function(t,e,n){e.exports="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8' standalone='no'%3F%3E %3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E %3Csvg width='100%25' height='100%25' viewBox='0 0 64 64' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xml:space='preserve' xmlns:serif='http://www.serif.com/' style='fill-rule:evenodd%3Bclip-rule:evenodd%3Bstroke-linejoin:round%3Bstroke-miterlimit:1.41421%3B'%3E     %3Cg id='a' transform='matrix(1.10297%2C0%2C0%2C1.10297%2C-22.0454%2C-38.5886)'%3E         %3Cpath d='M44.397%2C47.274C42.928%2C45.991 42%2C44.104 42%2C42L42%2C41.998C42%2C38.133 45.133%2C35 48.998%2C35L49.002%2C35C52.867%2C35 56%2C38.133 56%2C41.998L56%2C42C56%2C44.113 55.063%2C46.008 53.583%2C47.292L68.047%2C79.064C68.358%2C79.022 68.676%2C79 68.998%2C79L69.002%2C79C72.867%2C79 76%2C82.133 76%2C85.998L76%2C86C76%2C89.866 72.866%2C93 69%2C93L69%2C93C65.134%2C93 62%2C89.866 62%2C86L62%2C85.998C62%2C83.891 62.931%2C82.001 64.405%2C80.718L49.937%2C48.938C49.631%2C48.979 49.318%2C49 49%2C49L49%2C49C48.673%2C49 48.351%2C48.978 48.036%2C48.934L33.591%2C80.715C35.067%2C81.998 36%2C83.889 36%2C85.998L36%2C86C36%2C89.866 32.866%2C93 29%2C93L29%2C93C25.134%2C93 22%2C89.866 22%2C86L22%2C85.998C22%2C82.133 25.133%2C79 28.998%2C79L29.002%2C79C29.323%2C79 29.639%2C79.022 29.948%2C79.064L44.397%2C47.274ZM29%2C89C30.657%2C89 32%2C87.657 32%2C86L32%2C86C32%2C84.343 30.657%2C83 29%2C83L29%2C83C27.343%2C83 26%2C84.343 26%2C86L26%2C86C26%2C87.657 27.343%2C89 29%2C89L29%2C89ZM69%2C89C70.657%2C89 72%2C87.657 72%2C86L72%2C86C72%2C84.343 70.657%2C83 69%2C83L69%2C83C67.343%2C83 66%2C84.343 66%2C86L66%2C86C66%2C87.657 67.343%2C89 69%2C89L69%2C89ZM49%2C45C50.657%2C45 52%2C43.657 52%2C42L52%2C42C52%2C40.343 50.657%2C39 49%2C39L49%2C39C47.343%2C39 46%2C40.343 46%2C42L46%2C42C46%2C43.657 47.343%2C45 49%2C45L49%2C45Z' style='fill:rgb(201%2C226%2C255)%3B'/%3E     %3C/g%3E %3C/svg%3E"},{}],88:[function(t,e,n){e.exports="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8' standalone='no'%3F%3E %3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E %3Csvg width='100%25' height='100%25' viewBox='0 0 720 64' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xml:space='preserve' xmlns:serif='http://www.serif.com/' style='fill-rule:evenodd%3Bclip-rule:evenodd%3Bstroke-linejoin:round%3Bstroke-miterlimit:1.41421%3B'%3E     %3Cg transform='matrix(1.10297%2C0%2C0%2C1.10297%2C78.1502%2C-38.5886)'%3E         %3Cg id='a' transform='matrix(1%2C0%2C0%2C1%2C-92.3303%2C0)'%3E             %3Cpath d='M44.397%2C47.274C42.928%2C45.991 42%2C44.104 42%2C42L42%2C41.998C42%2C38.133 45.133%2C35 48.998%2C35L49.002%2C35C52.867%2C35 56%2C38.133 56%2C41.998L56%2C42C56%2C44.113 55.063%2C46.008 53.583%2C47.292L68.047%2C79.064C68.358%2C79.022 68.676%2C79 68.998%2C79L69.002%2C79C72.867%2C79 76%2C82.133 76%2C85.998L76%2C86C76%2C89.866 72.866%2C93 69%2C93L69%2C93C65.134%2C93 62%2C89.866 62%2C86L62%2C85.998C62%2C83.891 62.931%2C82.001 64.405%2C80.718L49.937%2C48.938C49.631%2C48.979 49.318%2C49 49%2C49L49%2C49C48.673%2C49 48.351%2C48.978 48.036%2C48.934L33.591%2C80.715C35.067%2C81.998 36%2C83.889 36%2C85.998L36%2C86C36%2C89.866 32.866%2C93 29%2C93L29%2C93C25.134%2C93 22%2C89.866 22%2C86L22%2C85.998C22%2C82.133 25.133%2C79 28.998%2C79L29.002%2C79C29.323%2C79 29.639%2C79.022 29.948%2C79.064L44.397%2C47.274ZM29%2C89C30.657%2C89 32%2C87.657 32%2C86L32%2C86C32%2C84.343 30.657%2C83 29%2C83L29%2C83C27.343%2C83 26%2C84.343 26%2C86L26%2C86C26%2C87.657 27.343%2C89 29%2C89L29%2C89ZM69%2C89C70.657%2C89 72%2C87.657 72%2C86L72%2C86C72%2C84.343 70.657%2C83 69%2C83L69%2C83C67.343%2C83 66%2C84.343 66%2C86L66%2C86C66%2C87.657 67.343%2C89 69%2C89L69%2C89ZM49%2C45C50.657%2C45 52%2C43.657 52%2C42L52%2C42C52%2C40.343 50.657%2C39 49%2C39L49%2C39C47.343%2C39 46%2C40.343 46%2C42L46%2C42C46%2C43.657 47.343%2C45 49%2C45L49%2C45Z' style='fill:rgb(201%2C226%2C255)%3B'/%3E         %3C/g%3E         %3Cg id='u' transform='matrix(1%2C0%2C0%2C1%2C-69.252%2C0)'%3E             %3Cpath d='M78%2C35L82%2C35L82%2C73C82%2C81.836 89.154%2C89 98%2C89C106.827%2C89 114%2C81.712 114%2C73L114%2C34.975L118%2C35L118%2C73C118%2C84.046 109%2C93 97.99%2C93C86.945%2C93 78%2C84.046 78%2C73L78%2C35Z' style='fill:rgb(201%2C226%2C255)%3B'/%3E         %3C/g%3E         %3Cg id='t' transform='matrix(1%2C0%2C0%2C1%2C-46.171%2C0)'%3E             %3Cpath d='M125%2C35L167%2C35L167%2C39.032L148%2C39.032L148%2C93L144%2C93L144%2C39.032L125%2C39.032L125%2C35Z' style='fill:rgb(201%2C226%2C255)%3Bfill-rule:nonzero%3B'/%3E         %3C/g%3E         %3Cg id='o' transform='matrix(1%2C0%2C0%2C1%2C-23.1034%2C0)'%3E             %3Cpath d='M228%2C63.986C228%2C56.298 224.946%2C48.926 219.51%2C43.49C214.074%2C38.054 206.702%2C35 199.014%2C35C199.005%2C35 199%2C35 199%2C35C199%2C35 199%2C35 198.999%2C35C191.31%2C34.993 183.934%2C38.043 178.495%2C43.477C173.056%2C48.912 170%2C56.285 170%2C63.974L170%2C64C170%2C71.691 173.055%2C79.068 178.494%2C84.506C183.932%2C89.945 191.309%2C93 199%2C93L199%2C93C206.691%2C93 214.068%2C89.945 219.506%2C84.506C224.945%2C79.068 228%2C71.691 228%2C64C228%2C63.992 228%2C63.987 228%2C63.987C228%2C63.987 228%2C63.987 228%2C63.986ZM223.977%2C63.986C223.977%2C50.198 212.8%2C39.022 199.013%2C39.022C199.004%2C39.022 199%2C39.022 199%2C39.022C199%2C39.022 199%2C39.022 198.999%2C39.022C192.377%2C39.016 186.024%2C41.642 181.34%2C46.323C176.655%2C51.003 174.023%2C57.354 174.023%2C63.976L174.023%2C63.999C174.023%2C70.623 176.655%2C76.976 181.339%2C81.66C186.023%2C86.343 192.375%2C88.975 198.999%2C88.975L199.001%2C88.975C205.625%2C88.975 211.977%2C86.343 216.661%2C81.66C221.345%2C76.976 223.977%2C70.623 223.977%2C63.999C223.977%2C63.991 223.977%2C63.987 223.977%2C63.987C223.977%2C63.987 223.977%2C63.987 223.977%2C63.986Z' style='fill:rgb(201%2C226%2C255)%3B'/%3E         %3C/g%3E         %3Cpath id='m' d='M285%2C93L281%2C93L281%2C42.284L261.606%2C72.99L258.402%2C73.005L239%2C42.324L239%2C93L235%2C93L235%2C35L239.102%2C35L259.998%2C68.045L280.869%2C35L285%2C35C285%2C54.333 285%2C73.667 285%2C93Z' style='fill:rgb(201%2C226%2C255)%3Bfill-rule:nonzero%3B'/%3E         %3Cg id='a2' transform='matrix(1%2C0%2C0%2C1%2C20.0558%2C32)'%3E             %3Cpath d='M346.8%2C61L342.445%2C61L335.557%2C45L308.865%2C45L310.587%2C41L333.835%2C41L320.017%2C8.899L297.622%2C61L293.268%2C61L318.198%2C3L321.832%2C3L346.8%2C61Z' style='fill:rgb(201%2C226%2C255)%3B'/%3E         %3C/g%3E         %3Cg id='t2' transform='matrix(1%2C0%2C0%2C1%2C259.187%2C0)'%3E             %3Cpath d='M125%2C35L167%2C35L167%2C39.032L148%2C39.032L148%2C93L144%2C93L144%2C39.032L125%2C39.032L125%2C35Z' style='fill:rgb(201%2C226%2C255)%3Bfill-rule:nonzero%3B'/%3E         %3C/g%3E         %3Cg id='o2' transform='matrix(1%2C0%2C0%2C1%2C281.257%2C1.16685e-05)'%3E             %3Cpath d='M228%2C63.986C228%2C56.298 224.946%2C48.926 219.51%2C43.49C214.074%2C38.054 206.702%2C35 199.014%2C35C199.005%2C35 199%2C35 199%2C35C199%2C35 199%2C35 198.999%2C35C191.31%2C34.993 183.934%2C38.043 178.495%2C43.477C173.056%2C48.912 170%2C56.285 170%2C63.974L170%2C64C170%2C71.691 173.055%2C79.068 178.494%2C84.506C183.932%2C89.945 191.309%2C93 199%2C93L199%2C93C206.691%2C93 214.068%2C89.945 219.506%2C84.506C224.945%2C79.068 228%2C71.691 228%2C64C228%2C63.992 228%2C63.987 228%2C63.987C228%2C63.987 228%2C63.987 228%2C63.986ZM223.977%2C63.986C223.977%2C50.198 212.8%2C39.022 199.013%2C39.022C199.004%2C39.022 199%2C39.022 199%2C39.022C199%2C39.022 199%2C39.022 198.999%2C39.022C192.377%2C39.016 186.024%2C41.642 181.34%2C46.323C176.655%2C51.003 174.023%2C57.354 174.023%2C63.976L174.023%2C63.999C174.023%2C70.623 176.655%2C76.976 181.339%2C81.66C186.023%2C86.343 192.375%2C88.975 198.999%2C88.975L199.001%2C88.975C205.625%2C88.975 211.977%2C86.343 216.661%2C81.66C221.345%2C76.976 223.977%2C70.623 223.977%2C63.999C223.977%2C63.991 223.977%2C63.987 223.977%2C63.987C223.977%2C63.987 223.977%2C63.987 223.977%2C63.986Z' style='fill:rgb(201%2C226%2C255)%3B'/%3E         %3C/g%3E         %3Cg id='n' transform='matrix(1%2C0%2C0%2C1%2C92.4061%2C0)'%3E             %3Cpath d='M484.93%2C93L451.002%2C42.108L450.998%2C93L446.998%2C93L447.002%2C35L451.07%2C35L485%2C85.894L485%2C35L489%2C35L489%2C93C487.643%2C93 486.286%2C93 484.93%2C93Z' style='fill:rgb(201%2C226%2C255)%3Bfill-rule:nonzero%3B'/%3E         %3C/g%3E     %3C/g%3E %3C/svg%3E"},{}],89:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 100 100'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='%232af'     d='       M 92 45       L 92 55       L 78 61       L 74 68       L 76 83       L 66 89       L 54 80       L 46 80       L 34 89       L 24 83       L 26 68       L 22 61       L 8 55       L 8 45       L 22 39       L 26 32       L 24 17       L 34 11       L 46 20       L 54 20       L 66 11       L 76 17       L 74 32       L 78 39       z       M 50 50       m 0 -12       a 12 12 0 0 0 0 24       a 12 12 0 0 0 0 -24       z     '   /%3E %3C/svg%3E"},{}],90:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 80 80'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='%232af'     d='       M 18 65       L 33 65       L 33 15       L 18 15       z       M 47 65       L 62 65       L 62 15       L 47 15       z     '   /%3E %3C/svg%3E"},{}],91:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 80 80'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='%232af'     d='       M 15 70       L 65 40       L 15 10       z     '   /%3E %3C/svg%3E"},{}],92:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 80 80'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='%232af'     d='       M 10 65       L 10 30       L 20 20       L 50 20       L 50 10       L 70 30       L 50 50       L 50 40       L 30 40       L 30 65       z     '   /%3E %3C/svg%3E"},{}],93:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 80 80'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='%232af'     d='       M 10 10       L 10 70       L 70 70       L 70 20       L 60 10       z       M 20 40       L 60 40       L 60 65       L 20 65       z       M 54 13       L 54 32       L 25 32       L 25 13       z       M 42 15       L 50 15       L 50 30       L 42 30       z     '   /%3E %3C/svg%3E"},{}],94:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 80 80'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='%232af'     d='       M 10 60       L 10 70       L 30 70       L 30 60       z              M 50 60       L 50 70       L 70 70       L 70 60       z       M 10 55       L 10 40       A 30 30 0 0 1 70 40       L 70 55       L 50 55       L 50 40       A 10 10 0 0 0 30 40       L 30 55       z     '   /%3E %3C/svg%3E"},{}],95:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 80 80'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='%232af'     d='       M 70 65       L 70 30       L 60 20       L 30 20       L 30 10       L 10 30       L 30 50       L 30 40       L 50 40       L 50 65       z     '   /%3E %3C/svg%3E"},{}],96:[function(t,e,n){e.exports="data:image/svg+xml,%3Csvg   xmlns='http://www.w3.org/2000/svg'   viewBox='0 0 100 100'   width='256'   height='256'   font-family='Helvetica Neue'   font-weight='300' %3E   %3Cpath     fill='none'     stroke='%23222'     stroke-width='20'     stroke-linecap='round'     stroke-linejoin='round'      d='       M 50 50       m -6 -32       l 12 0       l 30 50       l -8 12       l -56 0       l -8 -12       l 30 -50       z     '   /%3E   %3Cpath     fill='%23f92'     stroke='%23f92'     stroke-width='5'     stroke-linecap='round'     stroke-linejoin='round'      d='       M 50 50       m -6 -32       l 12 0       l 30 50       l -8 12       l -56 0       l -8 -12       l 30 -50       z     '   /%3E   %3Cpath     fill='%23222'     stroke='%23222'     stroke-width='5'     stroke-linecap='round'     stroke-linejoin='round'      d='       M 50 30       m -6 0       l 12 0       l 0 27       l -12 0       z       M 50 66       m -6 0       l 12 0       l 0 8       l -12 0       z     '   /%3E %3C/svg%3E"},{}],97:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(t){return JSON.parse(JSON.stringify(t))}},{}],98:[function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=t("./ass"),o=b(i),a=t("./compat"),s=b(a),u=t("./json-copy"),l=b(u),c=t("./param-gui"),f=b(c),d=t("./main"),h=b(d),p=t("./fx-definitions"),v=b(p),m=t("vue"),g=b(m),_=t("./vue/main.vue"),y=b(_);function b(t){return t&&t.__esModule?t:{default:t}}var w=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=Object.assign({},t);n.data=(0,s.default)(n.data),(0,o.default)(!t.onseek,'The handler "onseek" is no longer supported. Use Automaton.on( "seek", ... ) instead.'),(0,o.default)(!t.onplay,'The handler "onplay" is no longer supported. Use Automaton.on( "play", ... ) instead.'),(0,o.default)(!t.onpause,'The handler "onpause" is no longer supported. Use Automaton.on( "pause", ... ) instead.');var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,n));return r.__history=[],r.__historyIndex=0,v.default.map(function(t){r.addFxDefinition.apply(r,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(t))}),t.gui&&r.__prepareGUI(t.gui),window.addEventListener("beforeunload",function(t){if(0!==r.__historyIndex)return t.returnValue="Automaton: Did you saved your progress?","Automaton: Did you saved your progress?"}),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"__prepareGUI",value:function(t){var e=document.createElement("div");t.appendChild(e),this.__vue=new g.default({el:e,data:{automaton:this},render:function(t){return t(y.default,{props:{automaton:this.automaton}})}})}},{key:"generateDefaultFxParams",value:function(t){var e=this.__paramFxDefs[t];if(!e)throw new Error("Fx definition called "+t+" is not defined");var n={};for(var r in e.params)n[r]=e.params[r].default;return n}},{key:"togglePlay",value:function(){this.isPlaying?this.pause():this.play()}},{key:"pushHistory",value:function(t,e,n,r){if(this.__history.splice(this.__historyIndex),this.__history.push({desc:t,do:e,undo:n}),this.__historyIndex++,r)return e()}},{key:"undo",value:function(){if(!(this.__historyIndex<=0))return this.__historyIndex--,this.__history[this.__historyIndex].undo()}},{key:"redo",value:function(){if(!(this.__history.length<=this.__historyIndex))return this.__historyIndex++,this.__history[this.__historyIndex-1].do()}},{key:"getUndoDesc",value:function(){return this.__history[this.__historyIndex-1]?this.__history[this.__historyIndex-1].desc:""}},{key:"getRedoDesc",value:function(){return this.__history[this.__historyIndex]?this.__history[this.__historyIndex].desc:""}},{key:"dropHistory",value:function(){this.__history.splice(0),this.__historyIndex=0}},{key:"setLength",value:function(t){if(isNaN(t))throw new Error("Automaton.setLength: _length is invalid");if(t!==this.length){for(var e in this.__params){var n=this.__params[e];n.changeLength(t)}this.__length=t,this.dropHistory(),this.__vue.$emit("changedLength")}}},{key:"setResolution",value:function(t){this.__resolution=t,this.precalcAll()}},{key:"createParam",value:function(t,e){var n=new f.default({automaton:this,data:e});return g.default.set(this.__params,t,n),n}},{key:"removeParam",value:function(t){g.default.delete(this.__params,t)}},{key:"getParam",value:function(t){return this.__params[t]||null}},{key:"getParamNames",value:function(){var t=[];for(var e in this.__params)t.push(e);return t=t.sort()}},{key:"getFxDefinitionIds",value:function(){var t=[];for(var e in this.__paramFxDefs)t.push(e);return t=t.sort()}},{key:"getFxDefinitionName",value:function(t){return this.__paramFxDefs[t]?this.__paramFxDefs[t].name||t:void 0}},{key:"getFxDefinitionDescription",value:function(t){return this.__paramFxDefs[t]?this.__paramFxDefs[t].description||"":void 0}},{key:"getFxDefinitionParams",value:function(t){return this.__paramFxDefs[t]?(0,l.default)(this.__paramFxDefs[t].params||{}):void 0}},{key:"countParams",value:function(){var t=0;for(var e in this.__params)t++;return t}},{key:"__auto",value:function(t){var e=this.__params[t];return e||(e=this.createParam(t)),e.markAsUsed(),e.getValue()}},{key:"load",value:function(t){(function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"load",this).call(this,t),this.guiSettings=t.guiSettings}},{key:"save",value:function(){var t={v:this.version,length:this.length,resolution:this.resolution,params:{},guiSettings:this.guiSettings};for(var e in t.params={},this.__params){var n=this.__params[e];t.params[e]={nodes:n.dumpNodesWithoutId(),fxs:n.dumpFxsWithoutId()}}return JSON.stringify(t)}},{key:"pokeRenderer",value:function(){this.__vue&&this.__vue.$emit("poke")}}]),e}(h.default);e.exports=w,w.default=w},{"./ass":67,"./compat":71,"./fx-definitions":73,"./json-copy":97,"./main":99,"./param-gui":100,"./vue/main.vue":105,vue:65}],99:[function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=t("./clock"),o=d(i),a=t("./clock-frame"),s=d(a),u=t("./clock-realtime"),l=d(u),c=t("./param"),f=d(c);function d(t){return t&&t.__esModule?t:{default:t}}var h=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.__version="2.0.0",this.loop=e.loop||!1,this.__clock=e.fps?new s.default(this,e.fps):e.realtime?new l.default(this):new o.default(this),this.__listeners={},this.__paramFxDefs={};var r=e.data;this.load(r),this.auto=function(t){return n.__auto(t)}}return r(t,[{key:"createParam",value:function(t,e){this.__params[name]=new f.default({automaton:this,data:e})}},{key:"load",value:function(t){for(var e in this.__length=t.length,this.__resolution=t.resolution,this.__params={},t.params)this.createParam(e,t.params[e])}},{key:"seek",value:function(t){this.__clock.setTime(t),this.__emit("seek")}},{key:"play",value:function(){this.__clock.play(),this.__emit("play")}},{key:"pause",value:function(){this.__clock.pause(),this.__emit("pause")}},{key:"addFxDefinition",value:function(t,e){this.__paramFxDefs[t]=e,this.precalcAll()}},{key:"__emit",value:function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];this.__listeners[t]&&this.__listeners[t].map(function(t){return t.apply(void 0,n)})}},{key:"on",value:function(t,e){this.__listeners[t]||(this.__listeners[t]=[]),this.__listeners[t].push(e)}},{key:"precalcAll",value:function(){for(var t in this.__params)this.__params[t].precalc()}},{key:"update",value:function(t){for(var e in this.__clock.update(t),this.loop&&(this.time<0||this.length<this.time)&&this.__clock.setTime(this.time-Math.floor(this.time/this.length)*this.length),this.__params)this.__params[e].getValue()}},{key:"__auto",value:function(t){return this.params[t].__currentValue}},{key:"version",get:function(){return this.__version}},{key:"time",get:function(){return this.__clock.time}},{key:"length",get:function(){return this.__length}},{key:"resolution",get:function(){return this.__resolution}},{key:"deltaTime",get:function(){return this.__clock.deltaTime}},{key:"isPlaying",get:function(){return this.__clock.isPlaying}},{key:"progress",get:function(){return this.time/this.length}},{key:"fps",get:function(){return this.__clock.fps?this.__clock.fps:0}},{key:"realtime",get:function(){return Boolean(this.__clock.realtime)}}]),t}();e.exports=h,h.default=h},{"./clock":70,"./clock-frame":68,"./clock-realtime":69,"./param":101}],100:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0},o=t("./json-copy"),a=g(o),s=t("./ass"),u=(g(s),t("./gen-id")),l=g(u),c=t("./has-overwrap"),f=g(c),d=t("./main-gui"),h=(g(d),t("./param")),p=g(h),v=t("vue"),m=g(v);function g(t){return t&&t.__esModule?t:{default:t}}var _=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=Object.assign({},t),r=t.automaton.length;n.data=n.data?n.data:{nodes:[{time:0,value:0,out:{time:e.DEFAULT_HANDLE_LENGTH,value:0}},{time:r,value:0,in:{time:-e.DEFAULT_HANDLE_LENGTH,value:0}}],fxs:[]};var i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,n));return i.__isUsed=!1,i}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"load",value:function(t){var n=(0,a.default)(t);i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"load",this).call(this,n),this.__nodes.forEach(function(t){return t.$id=(0,l.default)()}),this.__fxs.forEach(function(t){return t.$id=(0,l.default)()})}},{key:"precalc",value:function(){i(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"precalc",this).call(this),this.__automaton.pokeRenderer()}},{key:"markAsUsed",value:function(){this.__isUsed=!0}},{key:"isUsed",value:function(){return this.__isUsed}},{key:"__sortNodes",value:function(){this.__nodes=this.__nodes.sort(function(t,e){return t.time-e.time})}},{key:"__getNodeIndexById",value:function(t){var e=this.__nodes.findIndex(function(e){return e.$id===t});if(-1===e)throw new Error("Searched for node id: "+t+" but not found");return e}},{key:"getNumNode",value:function(){return this.__nodes.length}},{key:"dumpNode",value:function(t){var e=this.__getNodeIndexById(t);return(0,a.default)(this.__nodes[e])}},{key:"dumpNodes",value:function(){return(0,a.default)(this.__nodes)}},{key:"dumpNodesWithoutId",value:function(){var t=this.dumpNodes();return t.map(function(t){return delete t.$id,t})}},{key:"createNode",value:function(t,n){var r={$id:(0,l.default)(),time:t,value:n,in:{time:-e.DEFAULT_HANDLE_LENGTH,value:0},out:{time:e.DEFAULT_HANDLE_LENGTH,value:0}};return this.__nodes.push(r),this.__sortNodes(),this.precalc(),r.$id}},{key:"createNodeFromData",value:function(t){var e=(0,a.default)(t);return this.__nodes.push(e),this.__sortNodes(),this.precalc(),e.$id}},{key:"removeNode",value:function(t){var e=this.__getNodeIndexById(t);this.__nodes.splice(e,1),this.precalc()}},{key:"moveNode",value:function(t,e,n){var r=this.__getNodeIndexById(t),i=this.__nodes[r],o="number"==typeof e?e:i.time;o=0===r?0:r===this.__nodes.length-1?this.__automaton.length:Math.min(Math.max(o,this.__nodes[r-1].time),this.__nodes[r+1].time),i.time=o,i.value="number"==typeof n?n:i.value,this.precalc()}},{key:"moveHandle",value:function(t,e,n,r){var i=this.__getNodeIndexById(t);if(!(0===i&&!e||i===this.getNumNode()-1&&e)){var o=this.__nodes[i],a=e?o.out:o.in,s="number"==typeof n?n:a.time;s=e?Math.max(0,s):Math.min(0,s),a.time=s,a.value="number"==typeof r?r:a.value,this.precalc()}}},{key:"resetHandle",value:function(t,n){var r=this.__getNodeIndexById(t);if(!(0===r&&!n||r===this.getNumNode()-1&&n)){var i=this.__nodes[r],o=n?i.out:i.in;o.time=(n?1:-1)*e.DEFAULT_HANDLE_LENGTH,o.value=0,this.precalc()}}},{key:"__sortFxs",value:function(){this.__fxs=this.__fxs.sort(function(t,e){return t.time-e.time}).sort(function(t,e){return t.row-e.row})}},{key:"__getFxIndexById",value:function(t){var e=this.__fxs.findIndex(function(e){return e.$id===t});if(-1===e)throw new Error("Searched for fx id: "+t+" but not found");return e}},{key:"__getFreeRow",value:function(t,e,n){for(var r=n||0,i=0;i<this.__fxs.length;i++){var o=this.__fxs[i];if(!(o.row<r)){if(r<o.row)break;(0,f.default)(t,e,o.time,o.length)&&r++}}return r}},{key:"dumpFx",value:function(t){var e=this.__getFxIndexById(t);return(0,a.default)(this.__fxs[e])}},{key:"dumpFxs",value:function(){return(0,a.default)(this.__fxs)}},{key:"dumpFxsWithoutId",value:function(){var t=this.dumpFxs();return t.map(function(t){return delete t.$id,t})}},{key:"createFx",value:function(t,n,r){var i=this.__getFreeRow(t,n);if(e.FX_ROW_MAX<i)return console.error("Too many fx stacks at here!"),"";var o={$id:(0,l.default)(),time:t,length:n,row:i,def:r,params:this.__automaton.generateDefaultFxParams(r)};return this.__fxs.push(o),this.__sortFxs(),this.precalc(),o.$id}},{key:"createFxFromData",value:function(t){var n=this.__getFreeRow(t.time,t.length,t.row);if(e.FX_ROW_MAX<n)return console.error("Too many fx stacks at here!"),"";var r=(0,a.default)(t);return r.row=n,this.__fxs.push(r),this.__sortFxs(),this.precalc(),r.$id}},{key:"removeFx",value:function(t){var e=this.__getFxIndexById(t);this.__fxs.splice(e,1),this.precalc()}},{key:"moveFx",value:function(t,e){var n=this.__getFxIndexById(t),r=this.__fxs[n],i=this.__fxs.filter(function(t){return t.row===r.row}),o=i.indexOf(r),a=i[o-1],s=i[o+1],u=a?a.time+a.length:0,l=s?s.time:this.__automaton.length;r.time=Math.min(Math.max(e,u),l-r.length),this.precalc()}},{key:"changeFxRow",value:function(t,n){var r=this.__getFxIndexById(t);if(n<0||e.FX_ROW_MAX<n)throw new Error("Row number "+n+" is invalid");var i=this.__fxs[r];if(i.row!==n){var o=this.__fxs.filter(function(t){return t.row===n}),a=o.every(function(t){return!(t.time<i.time&&i.time<t.time+t.length||t.time<i.time+i.length&&i.time+i.length<t.time+t.length||i.time<t.time&&t.time<i.time+i.length||i.time<t.time+t.length&&t.time+t.length<i.time+i.length)});a&&(i.row=n,this.__sortFxs(),this.precalc())}}},{key:"bypassFx",value:function(t,e){var n=this.__getFxIndexById(t),r=this.__fxs[n];m.default.set(r,"bypass",!!e),this.precalc()}},{key:"changeFxParam",value:function(t,e,n){var r=this.__getFxIndexById(t),i=this.__fxs[r],o=this.__automaton.getFxDefinitionParams(i.def),a=n;"number"==typeof o[e].min&&(a=Math.max(o[e].min,a)),"number"==typeof o[e].max&&(a=Math.min(o[e].max,a)),m.default.set(i.params,e,a),this.precalc()}},{key:"forceMoveFx",value:function(t,e,n){var r=this.__getFxIndexById(t),i=this.__fxs[r];i.time=e,i.row=n,this.__sortFxs(),this.precalc()}},{key:"resizeFx",value:function(t,e){var n=this.__getFxIndexById(t),r=this.__fxs[n],i=this.__fxs.filter(function(t){return t.row===r.row}),o=i.indexOf(r),a=i[o+1],s=a?a.time:this.__automaton.length;r.length=Math.min(Math.max(e,0),s-r.time),this.precalc()}},{key:"resizeFxByLeft",value:function(t,e){var n=this.__getFxIndexById(t),r=this.__fxs[n],i=r.time+r.length,o=this.__fxs.filter(function(t){return t.row===r.row}),a=o.indexOf(r),s=o[a-1],u=s?s.time+s.length:0;r.length=Math.min(Math.max(e,0),i-u),r.time=i-r.length,this.precalc()}},{key:"changeLength",value:function(t){for(var n=this.__nodes.length-1;0<=n;n--){var r=this.__nodes[n];if(!(t<r.time)){if(r.time===t){delete r.out;break}var i=this.__nodes[this.__nodes.length-1];i&&(i.out={time:e.DEFAULT_HANDLE_LENGTH,value:0}),this.__nodes.push({time:t,value:0,in:{time:-e.DEFAULT_HANDLE_LENGTH,value:0}});break}this.__nodes.splice(n,1)}for(var o=this.__fxs.length-1;0<=o;o--){var a=this.__fxs[o];t<a.time?this.__fxs.splice(o,1):t<a.time+a.length&&(a.length=t-a.time)}this.__values=new Float32Array(this.__automaton.resolution*t+1),this.precalc()}}]),e}(p.default);_.DEFAULT_HANDLE_LENGTH=.5,_.FX_ROW_MAX=4,n.default=_},{"./ass":67,"./gen-id":84,"./has-overwrap":85,"./json-copy":97,"./main-gui":98,"./param":101,vue:65}],101:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=t("./cubic-bezier"),o=s(i),a=t("./main");function s(t){return t&&t.__esModule?t:{default:t}}s(a);var u=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.__automaton=e.automaton,this.__values=new Float32Array(this.__automaton.resolution*this.__automaton.length+1),this.load(e.data),this.__lastValue=0,this.__lastTime=0}return r(t,[{key:"load",value:function(t){this.__nodes=t.nodes,this.__fxs=t.fxs,this.precalc()}},{key:"precalc",value:function(){for(var t=0;t<this.__nodes.length-1;t++){var e=this.__nodes[t],n=this.__nodes[t+1],r=Math.floor(e.time*this.__automaton.resolution),i=Math.floor(n.time*this.__automaton.resolution);this.__values[r]=e.value;for(var a=r+1;a<=i;a++){var s=a/this.__automaton.resolution,u=(0,o.default)(e,n,s);this.__values[a]=u}}for(var l=0;l<this.__fxs.length;l++){var c=this.__fxs[l];if(!c.bypass){var f=this.__automaton.__paramFxDefs[c.def];if(f){for(var d=Math.ceil(this.__automaton.resolution*c.time),h=Math.floor(this.__automaton.resolution*(c.time+c.length)),p=new Float32Array(h-d),v=p.length,m={i0:d,i1:h,t0:c.time,t1:c.time+c.length,dt:1/this.__automaton.resolution,resolution:this.__automaton.resolution,length:c.length,params:c.params,array:this.__values,getValue:this.getValue.bind(this),init:!0},g=0;g<v;g++)m.i=g+d,m.t=m.i/this.__automaton.resolution,m.v=this.__values[g+d],m.progress=(m.t-c.time)/c.length,p[g]=f.func(m),m.init=!1;this.__values.set(p,d)}}}}},{key:"getValue",value:function(t){var e=t;if("number"!=typeof e&&(e=this.__automaton.time),e===this.__lastTime)return this.__lastValue;if(this.__automaton.loop&&(e-=Math.floor(e/this.__automaton.length)*this.__automaton.length),e<=0)return this.__values[0];if(this.__automaton.length<=e)return this.__values[this.__values.length-1];var n=e*this.__automaton.resolution,r=Math.floor(n),i=n%1,o=this.__values[r],a=this.__values[r+1],s=o+(a-o)*i;return this.__lastTime=e,this.__lastValue=s,s}}]),t}();n.default=u},{"./cubic-bezier":72,"./main":99}],102:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 54, stdin */\n.blur-layer[data-v-c1fdaa96] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #00000066; }\n\n/* line 64, stdin */\n.root[data-v-c1fdaa96] {\n  position: absolute;\n  left: calc( 50% - 17em);\n  top: 1em;\n  width: 30em;\n  padding: 1em;\n  overflow: hidden;\n  background: #2c3236;\n  border-radius: 0.5em;\n  color: #c9e2ff;\n  font-size: 0.8em;\n  line-height: 1.2;\n  filter: drop-shadow(0 0 2px #000000); }\n  /* line 80, stdin */\n  .root a[data-v-c1fdaa96] {\n    color: #22aaff;\n    text-decoration: none; }\n    /* line 84, stdin */\n    .root a[data-v-c1fdaa96]:hover {\n      opacity: 0.7; }\n  /* line 87, stdin */\n  .root .logo-bg[data-v-c1fdaa96] {\n    position: absolute;\n    right: -1em;\n    bottom: -1em;\n    width: 14em;\n    opacity: 0.07; }\n  /* line 96, stdin */\n  .root .logo[data-v-c1fdaa96] {\n    width: 20em;\n    margin-bottom: 0.3em; }\n  /* line 101, stdin */\n  .root .version[data-v-c1fdaa96] {\n    display: inline-block;\n    vertical-align: bottom;\n    margin-left: 4px;\n    margin-bottom: 0.3em; }\n  /* line 108, stdin */\n  .root .logo-hr[data-v-c1fdaa96] {\n    width: 100%;\n    height: 1px;\n    margin: 0.5em 0;\n    background: #bad0eb; }\n  /* line 116, stdin */\n  .root .close[data-v-c1fdaa96] {\n    position: absolute;\n    right: 0.5em;\n    top: 0.5em;\n    width: 1em;\n    cursor: pointer; }\n    /* line 124, stdin */\n    .root .close[data-v-c1fdaa96]:hover {\n      opacity: 0.7; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={name:"about",props:["automaton"],data:function(){return{}},methods:{blur:function(){this.$emit("blur")}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",[r("div",{staticClass:"blur-layer",on:{mousedown:e.blur}}),e._v(" "),r("div",{staticClass:"root"},[r("img",{staticClass:"logo-bg",attrs:{src:t("../images/automaton-a.svg")}}),e._v(" "),r("img",{staticClass:"logo",attrs:{src:t("../images/automaton.svg")}}),e._v(" "),r("div",{staticClass:"version"},[e._v(e._s(e.automaton.version))]),r("br"),e._v("\n    Animation engine with Timeline GUI for creative coding\n\n    "),r("div",{staticClass:"logo-hr"}),e._v("\n\n    Author: "),r("a",{attrs:{href:"https://github.com/fms-cat/",target:"_blank"}},[e._v("@FMS_Cat")]),r("br"),e._v("\n    Repository: "),r("a",{attrs:{href:"https://github.com/fms-cat/automaton/",target:"_blank"}},[e._v("https://github.com/fms-cat/automaton/")]),r("br"),e._v("\n    Automaton is distributed under permissive "),r("a",{attrs:{href:"https://opensource.org/licenses/MIT",target:"_blank"}},[e._v("MIT License")]),e._v("."),r("br"),e._v("\n    Shoutouts to "),r("a",{attrs:{href:"https://www.image-line.com/flstudio/",target:"_blank"}},[e._v("Image Line Software")]),e._v(" <3\n\n    "),r("img",{staticClass:"close",attrs:{src:t("../images/about-close.svg")},on:{mousedown:e.blur}})])])},i.staticRenderFns=[],i._scopeId="data-v-c1fdaa96",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-c1fdaa96",i):n.createRecord("data-v-c1fdaa96",i))}()},{"../images/about-close.svg":86,"../images/automaton-a.svg":87,"../images/automaton.svg":88,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],103:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 81, stdin */\n.blur-layer[data-v-6f53cdc5] {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%; }\n\n/* line 89, stdin */\n.root[data-v-6f53cdc5] {\n  position: fixed;\n  white-space: nowrap;\n  padding: 0.4em;\n  font-size: 0.8em;\n  background: rgba(0, 0, 0, 0.5);\n  border: solid 1px #3d4449;\n  color: #bad0eb;\n  border-radius: 0.2em;\n  filter: drop-shadow(0 0 2px #000000); }\n  /* line 102, stdin */\n  .root .command[data-v-6f53cdc5] {\n    padding-left: 0.2em;\n    padding-right: 2em;\n    border-radius: 0.2em;\n    cursor: pointer; }\n    /* line 110, stdin */\n    .root .command[data-v-6f53cdc5]:hover {\n      background: #3d4449;\n      color: #c9e2ff; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={name:"context-menu",props:["active","x","y","commands"],data:function(){return{left:0,right:0,top:0,bottom:0}},methods:{blur:function(){this.$emit("blur")},moveRoot:function(){var t=this.x,e=this.y,n=document.documentElement.clientWidth,r=document.documentElement.clientHeight,i=n-240<t,o=r-40<e;this.left=i?null:t,this.right=i?n-t:null,this.top=o?null:e,this.bottom=o?r-e:null},selectCommand:function(t){this.commands[t].func(),this.$emit("blur")}},watch:{x:function(){this.moveRoot()},y:function(){this.moveRoot()}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[t.active?n("div",{staticClass:"blur-layer",on:{mousedown:t.blur}}):t._e(),t._v(" "),t.active?n("div",{staticClass:"root",style:{left:"number"==typeof t.left?t.left+"px":void 0,right:"number"==typeof t.right?t.right+"px":void 0,top:"number"==typeof t.top?t.top+"px":void 0,bottom:"number"==typeof t.bottom?t.bottom+"px":void 0}},t._l(t.commands,function(e,r){return n("div",{key:"command"+r,staticClass:"command",on:{mouseup:function(e){t.selectCommand(r)}}},[t._v(t._s(e.text))])})):t._e()])},i.staticRenderFns=[],i._scopeId="data-v-6f53cdc5",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-6f53cdc5",i):n.createRecord("data-v-6f53cdc5",i))}()},{vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],104:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 155, stdin */\n.root[data-v-645e0595] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #3d4449; }\n  /* line 164, stdin */\n  .root .row[data-v-645e0595] {\n    position: absolute;\n    height: calc( 100% - 0.25em);\n    margin: 0.125em; }\n    /* line 169, stdin */\n    .root .row.row-center[data-v-645e0595] {\n      width: calc( 100% - 0.25em);\n      text-align: center; }\n    /* line 173, stdin */\n    .root .row.row-left[data-v-645e0595] {\n      left: 0.125em; }\n    /* line 174, stdin */\n    .root .row.row-right[data-v-645e0595] {\n      right: 0.125em; }\n    /* line 176, stdin */\n    .root .row > *[data-v-645e0595] {\n      display: inline-block;\n      position: relative;\n      vertical-align: bottom;\n      margin: 0 0.125em;\n      height: 100%; }\n    /* line 184, stdin */\n    .root .row .logobox[data-v-645e0595] {\n      color: #c9e2ff;\n      opacity: 0.5;\n      cursor: pointer; }\n      /* line 190, stdin */\n      .root .row .logobox[data-v-645e0595]:hover {\n        opacity: 0.8; }\n      /* line 192, stdin */\n      .root .row .logobox .logo[data-v-645e0595] {\n        display: inline-block;\n        position: relative;\n        height: 60%;\n        top: 20%; }\n    /* line 200, stdin */\n    .root .row .button[data-v-645e0595] {\n      height: 100%;\n      cursor: pointer; }\n      /* line 205, stdin */\n      .root .row .button[data-v-645e0595]:hover {\n        opacity: 0.7; }\n    /* line 208, stdin */\n    .root .row .time[data-v-645e0595] {\n      width: 8em;\n      white-space: nowrap;\n      text-align: right;\n      cursor: pointer; }\n      /* line 216, stdin */\n      .root .row .time *[data-v-645e0595] {\n        pointer-events: none; }\n      /* line 220, stdin */\n      .root .row .time .current[data-v-645e0595] {\n        position: relative;\n        font-size: 0.8em;\n        margin-right: 0;\n        color: #c9e2ff; }\n      /* line 229, stdin */\n      .root .row .time .length[data-v-645e0595] {\n        position: relative;\n        font-size: 0.6em;\n        margin-left: 0;\n        color: #bad0eb; }\n      /* line 237, stdin */\n      .root .row .time .bar[data-v-645e0595] {\n        display: block;\n        position: absolute;\n        bottom: 0.25em;\n        left: 0px;\n        height: 2px;\n        margin: 0; }\n        /* line 245, stdin */\n        .root .row .time .bar.bar-bg[data-v-645e0595] {\n          background: #000000; }\n        /* line 246, stdin */\n        .root .row .time .bar.bar-fg[data-v-645e0595] {\n          background: #c9e2ff; }\n      /* line 250, stdin */\n      .root .row .time:hover .bar-fg[data-v-645e0595] {\n        background: #22aaff; }\n      /* line 254, stdin */\n      .root .row .time.seeking .bar-fg[data-v-645e0595] {\n        background: #22aaff; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={mounted:function(){},beforeDestroy:function(){},props:["automaton"],data:function(){return{saveText:"Copy current state as JSON",seeking:!1,cantUndoThis:0}},methods:{seek:function(t){var e=this,n=t.target.offsetWidth,r=t.offsetX,i=t.clientX,o=this.automaton.isPlaying;o&&this.automaton.pause(),this.automaton.seek(this.automaton.length*r/n),this.seeking=!0;var a=function(t){var o=r+t.clientX-i;e.automaton.seek(e.automaton.length*o/n)};window.addEventListener("mousemove",a),window.addEventListener("mouseup",function t(n){o&&e.automaton.play(),e.seeking=!1,window.removeEventListener("mousemove",a),window.removeEventListener("mouseup",t)})},undo:function(){this.automaton.getUndoDesc()?(this.automaton.undo(),this.cantUndoThis=0):(this.cantUndoThis++,10===this.cantUndoThis&&(window.open("https://youtu.be/bzY7J0Xle08","_blank"),this.cantUndoThis=0)),this.$emit("historyMoved")},redo:function(){this.automaton.redo(),this.$emit("historyMoved")},save:function(){var t=this,e=document.createElement("textarea");e.value=this.automaton.save(),document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e),this.saveText="Copied!",setTimeout(function(){t.saveText="Copy current state as JSON"},3e3)}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",[r("div",{staticClass:"root"},[r("div",{staticClass:"row row-center"},[r("div",{staticClass:"logobox",on:{click:function(t){t.stopPropagation(),e.$emit("logoClicked")}}},[r("img",{staticClass:"logo",attrs:{src:t("../images/automaton.svg")}})])]),e._v(" "),r("div",{staticClass:"row row-left"},[r("img",{staticClass:"button",attrs:{src:e.automaton.isPlaying?t("../images/pause.svg"):t("../images/play.svg")},on:{click:function(t){t.stopPropagation(),e.automaton.togglePlay()}}}),e._v(" "),r("div",{staticClass:"time",class:{seeking:e.seeking},on:{mousedown:function(t){return t.stopPropagation(),e.seek(t)}}},[r("span",{staticClass:"current"},[e._v(e._s(e.automaton.time.toFixed(3)))]),e._v(" "),r("span",{staticClass:"length"},[e._v(" / "+e._s(e.automaton.length.toFixed(3)))]),e._v(" "),r("div",{staticClass:"bar bar-bg",style:{width:"100%"}}),e._v(" "),r("div",{staticClass:"bar bar-fg",style:{width:100*e.automaton.progress+"%"}})])]),e._v(" "),r("div",{staticClass:"row row-right"},[r("img",{staticClass:"button",attrs:{src:t("../images/undo.svg"),"stalker-text":e.automaton.getUndoDesc()?"Undo: "+e.automaton.getUndoDesc():"Can't undo"},on:{click:function(t){t.stopPropagation(),e.undo()}}}),e._v(" "),r("img",{staticClass:"button",attrs:{src:t("../images/redo.svg"),"stalker-text":e.automaton.getRedoDesc()?"Redo: "+e.automaton.getRedoDesc():"Can't redo"},on:{click:function(t){t.stopPropagation(),e.redo()}}}),e._v(" "),r("img",{staticClass:"button",attrs:{src:t("../images/snap.svg"),"stalker-text":"Snap Settings"},on:{click:function(t){t.stopPropagation(),e.$emit("configSelected","snap")}}}),e._v(" "),r("img",{staticClass:"button",attrs:{src:t("../images/cog.svg"),"stalker-text":"General Config"},on:{click:function(t){t.stopPropagation(),e.$emit("configSelected","general")}}}),e._v(" "),r("img",{staticClass:"button",attrs:{src:t("../images/save.svg"),"stalker-text":e.saveText},on:{click:function(t){return t.stopPropagation(),e.save(t)}}})])])])},i.staticRenderFns=[],i._scopeId="data-v-645e0595",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-645e0595",i):n.createRecord("data-v-645e0595",i))}()},{"../images/automaton.svg":88,"../images/cog.svg":89,"../images/pause.svg":90,"../images/play.svg":91,"../images/redo.svg":92,"../images/save.svg":93,"../images/snap.svg":94,"../images/undo.svg":95,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],105:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("@import url(\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,900\");\n/* line 135, stdin */\n.automaton {\n  font-family: 'Roboto', sans-serif;\n  font-weight: 300;\n  font-size: 16px; }\n/* line 145, stdin */\n.root[data-v-40f1aec1] {\n  user-select: none; }\n  /* line 149, stdin */\n  .root .header[data-v-40f1aec1] {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 2em; }\n  /* line 158, stdin */\n  .root .paramlist[data-v-40f1aec1] {\n    position: absolute;\n    left: 0;\n    top: 2em;\n    width: 8em;\n    height: calc( 100% - 2em); }\n  /* line 167, stdin */\n  .root .propmenu[data-v-40f1aec1] {\n    position: absolute;\n    right: 0;\n    top: 2em;\n    width: 12em;\n    height: calc( 100% - 2em); }\n  /* line 175, stdin */\n  .root .timeline[data-v-40f1aec1] {\n    position: absolute;\n    left: 8em;\n    top: 2em;\n    width: calc( 100% - 20em);\n    height: calc( 100% - 2em); }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=t("./about.vue"),r=m(e),i=t("./header.vue"),o=m(i),a=t("./paramlist.vue"),s=m(a),u=t("./propmenu.vue"),l=m(u),c=t("./timeline.vue"),f=m(c),d=t("./context-menu.vue"),h=m(d),p=t("./stalker.vue"),v=m(p);function m(t){return t&&t.__esModule?t:{default:t}}n.default={components:{About:r.default,Header:o.default,ParamList:s.default,PropMenu:l.default,Timeline:f.default,ContextMenu:h.default,Stalker:v.default},mounted:function(){},beforeDestroy:function(){},props:["automaton"],data:function(){return{aboutActive:!1,selectedParamName:null,selectedNodeIds:[],selectedFxIds:[],config:"",contextMenuActive:!1,contextMenuX:0,contextMenuY:0,contextMenuCommands:[]}},methods:{selectParam:function(t){this.selectedParamName=t,this.selectNodes([]),this.selectFxs([])},selectNodes:function(t){this.selectedNodeIds=t,this.config=""},selectFxs:function(t){this.selectedFxIds=t,this.config=""},onHistoryMoved:function(){this.selectNodes([]),this.selectFxs([])},onConfigSelected:function(t){this.selectNodes([]),this.selectFxs([]),this.config=t},openContextMenu:function(t){this.contextMenuActive=!0,this.contextMenuX=t.clientX,this.contextMenuY=t.clientY,this.contextMenuCommands=t.commands}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("div",{staticClass:"root automaton color-theme-dark"},[n("Header",{staticClass:"header",attrs:{automaton:t.automaton},on:{historyMoved:t.onHistoryMoved,configSelected:t.onConfigSelected,context:t.openContextMenu,logoClicked:function(e){t.aboutActive=!0}}}),t._v(" "),n("ParamList",{staticClass:"paramlist",attrs:{automaton:t.automaton,selectedParamName:t.selectedParamName},on:{selected:function(e){t.selectParam(e)},context:t.openContextMenu}}),t._v(" "),n("PropMenu",{staticClass:"propmenu",attrs:{automaton:t.automaton,selectedParamName:t.selectedParamName,selectedNodeIds:t.selectedNodeIds,selectedFxIds:t.selectedFxIds,config:t.config},on:{context:t.openContextMenu}}),t._v(" "),n("Timeline",{staticClass:"timeline",attrs:{automaton:t.automaton,selectedParamName:t.selectedParamName,selectedNodeIds:t.selectedNodeIds,selectedFxIds:t.selectedFxIds},on:{nodeSelected:function(e){t.selectNodes(e)},fxSelected:function(e){t.selectFxs(e)},context:t.openContextMenu}}),t._v(" "),t.aboutActive?n("About",{staticClass:"about",attrs:{automaton:t.automaton},on:{blur:function(e){t.aboutActive=!1}}}):t._e(),t._v(" "),n("ContextMenu",{staticClass:"context-menu",attrs:{active:t.contextMenuActive,x:t.contextMenuX,y:t.contextMenuY,commands:t.contextMenuCommands},on:{blur:function(e){t.contextMenuActive=!1}}}),t._v(" "),n("Stalker",{staticClass:"stalker"})],1)])},i.staticRenderFns=[],i._scopeId="data-v-40f1aec1",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-40f1aec1",i):n.createRecord("data-v-40f1aec1",i))}()},{"./about.vue":102,"./context-menu.vue":103,"./header.vue":104,"./paramlist.vue":106,"./propmenu.vue":108,"./stalker.vue":110,"./timeline.vue":112,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],106:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 71, stdin */\n.root[data-v-d88e0a5a] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #202325;\n  color: #c9e2ff; }\n  /* line 81, stdin */\n  .root .param[data-v-d88e0a5a] {\n    position: relative;\n    width: calc( 100% - 4px);\n    height: 1.5em;\n    margin: 2px;\n    background: #2c3236;\n    color: #bad0eb;\n    cursor: pointer; }\n    /* line 92, stdin */\n    .root .param.selected[data-v-d88e0a5a] {\n      background: #3d4449;\n      color: #c9e2ff; }\n    /* line 97, stdin */\n    .root .param .name[data-v-d88e0a5a] {\n      position: absolute;\n      left: 0.2em;\n      top: 0.1em;\n      font-size: 1.1em;\n      user-select: none; }\n    /* line 107, stdin */\n    .root .param .value[data-v-d88e0a5a] {\n      position: absolute;\n      right: 0.2em;\n      bottom: 0.1em;\n      font-size: 0.6em;\n      opacity: 0.7;\n      user-select: none; }\n    /* line 118, stdin */\n    .root .param .warning[data-v-d88e0a5a] {\n      position: absolute;\n      right: 0.1em;\n      bottom: 0.1em;\n      height: calc( 100% - 0.2em); }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=t("./scrollable.vue"),r=function(t){return t&&t.__esModule?t:{default:t}}(e);n.default={components:{Scrollable:r.default},props:["automaton","selectedParamName"],data:function(){return{}},methods:{contextParam:function(t,e){var n=this;this.$emit("context",{clientX:t.clientX,clientY:t.clientY,commands:[{text:"Select Param",func:function(){n.$emit("selected",e)}},{text:"Remove Param",func:function(){n.automaton.removeParam(e),n.$emit("selected",null)}}]})}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",[r("Scrollable",{staticClass:"root",attrs:{bar:"left"}},e._l(e.automaton.getParamNames(),function(n){return r("div",{key:"param"+n,staticClass:"param",class:{selected:n===e.selectedParamName},on:{click:function(t){e.$emit("selected",n)},contextmenu:function(t){t.stopPropagation(),t.preventDefault(),e.contextParam(t,n)}}},[r("div",{staticClass:"name"},[e._v(e._s(n))]),e._v(" "),e.automaton.getParam(n).isUsed()?r("div",{staticClass:"value"},[e._v(e._s(e.automaton.auto(n).toFixed(3)))]):e._e(),e._v(" "),e.automaton.getParam(n).isUsed()?e._e():r("img",{staticClass:"warning",attrs:{src:t("../images/warning.svg"),"stalker-text":"This param has not been used yet"}})])}))],1)},i.staticRenderFns=[],i._scopeId="data-v-d88e0a5a",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-d88e0a5a",i):n.createRecord("data-v-d88e0a5a",i))}()},{"../images/warning.svg":96,"./scrollable.vue":109,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],107:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 144, stdin */\n.propbox {\n  position: relative;\n  width: 100%;\n  height: 1.25em;\n  margin-bottom: 0.25em; }\n  /* line 150, stdin */\n  .propbox .name {\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    margin-top: 0.1em; }\n  /* line 159, stdin */\n  .propbox .value {\n    background: #2c3236;\n    cursor: pointer; }\n    /* line 162, stdin */\n    .propbox .value:active:not(.readonly) {\n      background: #0e1011; }\n    /* line 168, stdin */\n    .propbox .value.readonly {\n      cursor: not-allowed; }\n  /* line 173, stdin */\n  .propbox .number {\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 5em;\n    height: 100%; }\n    /* line 180, stdin */\n    .propbox .number .valueText {\n      width: 100%;\n      margin-top: 0.1em;\n      text-align: center; }\n      /* line 186, stdin */\n      .propbox .number .valueText.readonly {\n        opacity: 0.5; }\n    /* line 191, stdin */\n    .propbox .number .valueInput {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      border: none;\n      padding: 0;\n      text-align: center;\n      background: #4a545a;\n      color: #c9e2ff; }\n  /* line 206, stdin */\n  .propbox .boolean {\n    position: absolute;\n    right: 1.875em;\n    top: 0;\n    width: 1.25em;\n    height: 100%; }\n    /* line 213, stdin */\n    .propbox .boolean .booleanCheck {\n      position: absolute;\n      left: 20%;\n      top: 20%;\n      width: 60%;\n      height: 60%;\n      background: #22aaff; }\n      /* line 222, stdin */\n      .propbox .boolean .booleanCheck.readonly {\n        background: #687788;\n        opacity: 0.5; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=t("babel-runtime/core-js/math/log10"),r=a(e),i=t("babel-runtime/core-js/math/sign"),o=a(i);function a(t){return t&&t.__esModule?t:{default:t}}n.default={name:"propbox",props:["name","value","type","min","max","readonly"],data:function(){return{input:!1,lastClick:0}},methods:{nMousedown:function(t){var e=this;if(!this.readonly){var n=Date.now();n-this.lastClick<500&&(this.input=!0,this.$refs.valueInput.value=this.value,setTimeout(function(){e.$refs.valueInput.focus(),e.$refs.valueInput.select()},10)),this.lastClick=n;var i=t.clientY,a=i,s=Number(this.value);!function(t,e){window.addEventListener("mousemove",t),window.addEventListener("mouseup",function n(r){"function"==typeof e&&e(r),window.removeEventListener("mousemove",t),window.removeEventListener("mouseup",n)})}(function(t){var n=Number(e.value),u=t.clientY,l=a-u;if(a=u,"int"===e.type)n=s-Math.floor((u-i)/10);else if(t.shiftKey)for(var c=Math.abs(l),f=(0,o.default)(l),d=0;d<c;d++){var h=Math.abs(n),p=(0,o.default)(n+1e-4*f),v=Math.floor((0,r.default)(h+1e-4*f*p))-1-(t.altKey?1:0);n+=Math.max(.001,Math.pow(10,v))*f}else n+=l*(t.altKey?.001:.01);e.max&&(n=Math.min(n,parseFloat(e.max))),e.min&&(n=Math.max(n,parseFloat(e.min))),n="int"===e.type?n:Number(n.toFixed(3)),e.$emit("changed",n)},function(t){s!==Number(e.value)&&e.$emit("finished",[s,Number(e.value)])})}},nEnter:function(t){var e=parseFloat(this.$refs.valueInput.value);"int"===this.type&&(e=Math.round(e)),this.$emit("changed",e),this.$emit("finished",[Number(this.value),e]),this.input=!1},nBlur:function(t){this.input=!1},bToggle:function(t){if(!this.readonly){var e=!this.value;this.$emit("changed",e),this.$emit("finished",[!e,e])}}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("div",{staticClass:"propbox"},[n("div",{staticClass:"name"},[t._v(t._s(t.name))]),t._v(" "),"float"===t.type||"int"===t.type?n("div",{staticClass:"value number",class:{readonly:t.readonly}},[n("div",{staticClass:"valueText",class:{readonly:t.readonly},on:{mousedown:t.nMousedown}},[t._v(t._s("int"===t.type?t.value:t.value.toFixed(3)))]),t._v(" "),n("input",{directives:[{name:"show",rawName:"v-show",value:t.input,expression:"input"}],ref:"valueInput",staticClass:"valueInput",on:{keydown:function(e){return"button"in e||!t._k(e.keyCode,"enter",13,e.key,"Enter")?t.nEnter(e):null},blur:t.nBlur}})]):t._e(),t._v(" "),"boolean"===t.type?n("div",{staticClass:"value boolean",class:{readonly:t.readonly},on:{click:t.bToggle}},[n("div",{directives:[{name:"show",rawName:"v-show",value:t.value,expression:"value"}],staticClass:"booleanCheck"})]):t._e()])])},i.staticRenderFns=[],e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-de9feda0",i):n.createRecord("data-v-de9feda0",i))}()},{"babel-runtime/core-js/math/log10":2,"babel-runtime/core-js/math/sign":3,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],108:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 331, stdin */\n.root[data-v-4491d86c] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: #202325;\n  color: #c9e2ff; }\n  /* line 341, stdin */\n  .root .props[data-v-4491d86c] {\n    padding: 0.75em 1.5em;\n    font-size: 0.75em; }\n    /* line 345, stdin */\n    .root .props .title[data-v-4491d86c] {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      font-size: 1.5em;\n      color: #22aaff; }\n    /* line 354, stdin */\n    .root .props hr[data-v-4491d86c] {\n      border: solid 1px #2c3236; }\n    /* line 358, stdin */\n    .root .props .centering[data-v-4491d86c] {\n      text-align: center; }\n      /* line 361, stdin */\n      .root .props .centering .button-confirm[data-v-4491d86c] {\n        display: inline-block;\n        width: 4em;\n        padding: 0.25em;\n        background: #2c3236;\n        cursor: pointer; }\n        /* line 370, stdin */\n        .root .props .centering .button-confirm[data-v-4491d86c]:hover {\n          background: #0e1011; }\n  /* line 375, stdin */\n  .root .logobox[data-v-4491d86c] {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden; }\n    /* line 383, stdin */\n    .root .logobox .logo[data-v-4491d86c] {\n      position: absolute;\n      width: 8em;\n      left: calc( 50% - 4em);\n      top: calc( 50% - 4em);\n      opacity: 0.1; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=t("./propbox.vue"),r=a(e),i=t("./scrollable.vue"),o=a(i);function a(t){return t&&t.__esModule?t:{default:t}}n.default={name:"propmenu",props:["automaton","selectedParamName","selectedNodeIds","selectedFxIds","config"],components:{Propbox:r.default,Scrollable:o.default},data:function(){return{generalConfigs:{length:0,resolution:0}}},methods:{confirmGeneralConfigs:function(){this.automaton.setLength(this.generalConfigs.length),this.automaton.setResolution(this.generalConfigs.resolution)}},computed:{selectedParam:function(){return this.automaton.getParam(this.selectedParamName)},selectedNodeId:function(){return 1===this.selectedNodeIds.length?this.selectedNodeIds[0]:null},selectedNode:function(){return 1===this.selectedNodeIds.length?this.selectedParam.dumpNode(this.selectedNodeId):null},selectedFxId:function(){return 1===this.selectedFxIds.length?this.selectedFxIds[0]:null},selectedFx:function(){return 1===this.selectedFxIds.length?this.selectedParam.dumpFx(this.selectedFxId):null}},watch:{config:function(){"general"===this.config&&(this.generalConfigs.length=this.automaton.length,this.generalConfigs.resolution=this.automaton.resolution)}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",[r("Scrollable",{staticClass:"root",attrs:{bar:"right"}},[e.selectedNode?r("div",{staticClass:"props"},[r("div",{staticClass:"title"},[e._v("Node")]),e._v(" "),r("hr"),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"Time",value:e.selectedNode.time,readonly:!(e.selectedNode.in&&e.selectedNode.out)},on:{changed:function(t){e.selectedParam.moveNode(e.selectedNodeId,t)},finished:function(t){e.automaton.pushHistory("Change Node Time",function(){e.selectedParam.moveNode(e.selectedNodeId,t[1])},function(){e.selectedParam.moveNode(e.selectedNodeId,t[0])})}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"Value",value:e.selectedNode.value},on:{changed:function(t){e.selectedParam.moveNode(e.selectedNodeId,void 0,t)},finished:function(t){e.automaton.pushHistory("Change Node Value",function(){e.selectedParam.moveNode(e.selectedNodeId,void 0,t[1])},function(){e.selectedParam.moveNode(e.selectedNodeId,void 0,t[0])})}}}),e._v(" "),r("hr"),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"In Time",value:e.selectedNode.in?e.selectedNode.in.time:0,readonly:!e.selectedNode.in},on:{changed:function(t){e.selectedParam.moveHandle(e.selectedNodeId,!1,t)},finished:function(t){e.automaton.pushHistory("Change Node Time",function(){e.selectedParam.moveHandle(e.selectedNodeId,!1,t[1])},function(){e.selectedParam.moveHandle(e.selectedNodeId,!1,t[0])})}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"In Value",value:e.selectedNode.in?e.selectedNode.in.value:0,readonly:!e.selectedNode.in},on:{changed:function(t){e.selectedParam.moveHandle(e.selectedNodeId,!1,void 0,t)},finished:function(t){e.automaton.pushHistory("Change Node Value",function(){e.selectedParam.moveHandle(e.selectedNodeId,!1,void 0,t[1])},function(){e.selectedParam.moveHandle(e.selectedNodeId,!1,void 0,t[0])})}}}),e._v(" "),r("hr"),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"Out Time",value:e.selectedNode.out?e.selectedNode.out.time:0,readonly:!e.selectedNode.out},on:{changed:function(t){e.selectedParam.moveHandle(e.selectedNodeId,!0,t)},finished:function(t){e.automaton.pushHistory("Change Node Time",function(){e.selectedParam.moveHandle(e.selectedNodeId,!0,t[1])},function(){e.selectedParam.moveHandle(e.selectedNodeId,!0,t[0])})}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"Out Value",value:e.selectedNode.out?e.selectedNode.out.value:0,readonly:!e.selectedNode.out},on:{changed:function(t){e.selectedParam.moveHandle(e.selectedNodeId,!0,void 0,t)},finished:function(t){e.automaton.pushHistory("Change Node Value",function(){e.selectedParam.moveHandle(e.selectedNodeId,!0,void 0,t[1])},function(){e.selectedParam.moveHandle(e.selectedNodeId,!0,void 0,t[0])})}}})],1):e._e(),e._v(" "),e.selectedFx?r("div",{staticClass:"props"},[r("div",{staticClass:"title"},[e._v("Fx: "+e._s(e.automaton.getFxDefinitionName(e.selectedFx.def)))]),e._v(" "),r("hr"),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"Time",value:e.selectedFx.time},on:{changed:function(t){e.selectedParam.moveFx(e.selectedFxId,t)},finished:function(t){e.automaton.pushHistory("Move Fx",function(){e.selectedParam.moveFx(e.selectedFxId,t[1])},function(){e.selectedParam.moveFx(e.selectedFxId,t[0])})}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"float",name:"Length",value:e.selectedFx.length},on:{changed:function(t){e.selectedParam.resizeFx(e.selectedFxId,t)},finished:function(t){e.automaton.pushHistory("Move Fx",function(){e.selectedParam.resizeFx(e.selectedFxId,t[1])},function(){e.selectedParam.resizeFx(e.selectedFxId,t[0])})}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{type:"boolean",name:"Bypass",value:e.selectedFx.bypass},on:{finished:function(t){e.automaton.pushHistory("Toggle Bypass Fx",function(){e.selectedParam.bypassFx(e.selectedFxId,t[1])},function(){e.selectedParam.bypassFx(e.selectedFxId,t[0])},!0)}}}),e._v(" "),r("hr"),e._v(" "),e._l(e.automaton.getFxDefinitionParams(e.selectedFx.def),function(t,n){return r("Propbox",{key:"fxParam-"+n,staticClass:"prop",attrs:{type:t.type,name:t.name||n,value:e.selectedFx.params[n]},on:{changed:function(t){e.selectedParam.changeFxParam(e.selectedFxId,n,t)},finished:function(t){e.automaton.pushHistory("Change Fx Param",function(){e.selectedParam.changeFxParam(e.selectedFxId,n,t[1])},function(){e.selectedParam.changeFxParam(e.selectedFxId,n,t[0])})}}})})],2):e._e(),e._v(" "),"snap"===e.config?r("div",{staticClass:"props"},[r("div",{staticClass:"title"},[e._v("Snap Settings")]),e._v(" "),r("hr"),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{name:"Enable Snap",type:"boolean",value:e.automaton.guiSettings.snapActive},on:{changed:function(t){e.automaton.guiSettings.snapActive=t}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{name:"Interval (Time)",min:"0.0",type:"float",value:e.automaton.guiSettings.snapTime},on:{changed:function(t){e.automaton.guiSettings.snapTime=t}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{name:"Interval (Value)",min:"0.0",type:"float",value:e.automaton.guiSettings.snapValue},on:{changed:function(t){e.automaton.guiSettings.snapValue=t}}})],1):e._e(),e._v(" "),"general"===e.config?r("div",{staticClass:"props"},[r("div",{staticClass:"title"},[e._v("General Config")]),e._v(" "),r("hr"),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{name:"Length",type:"float",min:"0",value:e.generalConfigs.length},on:{changed:function(t){e.generalConfigs.length=t}}}),e._v(" "),r("Propbox",{staticClass:"prop",attrs:{name:"Resolution",type:"int",min:"1",value:e.generalConfigs.resolution},on:{changed:function(t){e.generalConfigs.resolution=t}}}),e._v(" "),r("hr"),e._v(" "),r("div",{staticClass:"centering"},[e._v("\n        This cannot be undone!\n        "),r("div",{staticClass:"button-confirm",on:{click:e.confirmGeneralConfigs}},[e._v("Apply")])])],1):e._e()]),e._v(" "),e.selectedNode||e.selectedFx||e.config?e._e():r("div",{staticClass:"logobox"},[r("img",{staticClass:"logo",attrs:{src:t("../images/automaton-a.svg")}})])],1)},i.staticRenderFns=[],i._scopeId="data-v-4491d86c",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-4491d86c",i):n.createRecord("data-v-4491d86c",i))}()},{"../images/automaton-a.svg":87,"./propbox.vue":107,"./scrollable.vue":109,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],109:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 77, stdin */\n.root[data-v-6dab48a2] {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden; }\n  /* line 83, stdin */\n  .root .inside[data-v-6dab48a2] {\n    position: absolute;\n    left: 0;\n    width: 100%; }\n  /* line 89, stdin */\n  .root .bar[data-v-6dab48a2] {\n    position: absolute;\n    width: 4px;\n    background: #22aaff;\n    border-radius: 2px; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={props:["bar"],data:function(){return{top:0,barOpacity:0}},methods:{onWheel:function(t){t.preventDefault(),this.top=this.top-t.deltaY;var e=this.$refs.inside.clientHeight-this.$refs.root.clientHeight;this.top<-e&&(this.top,this.top=-e),0<this.top&&(this.top,this.top=0),this.barHeight=100*this.$refs.root.clientHeight/this.$refs.inside.clientHeight,this.barTop=-100*this.top/this.$refs.inside.clientHeight,this.barOpacity+=Math.min(this.barOpacity+.1*Math.abs(t.deltaY),1)},update:function(){this.barOpacity*=.9}},mounted:function(){var t=this;!function e(){t.update(),requestAnimationFrame(e)}()}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("div",{ref:"root",staticClass:"root",on:{wheel:function(e){return e.stopPropagation(),t.onWheel(e)}}},[n("div",{ref:"inside",staticClass:"inside",style:{top:t.top+"px"}},[t._t("default")],2),t._v(" "),n("div",{staticClass:"bar",style:{top:t.barTop+"%",height:t.barHeight+"%",left:"left"===t.bar?0:void 0,right:"right"===t.bar?0:void 0,opacity:t.barOpacity}})])])},i.staticRenderFns=[],i._scopeId="data-v-6dab48a2",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-6dab48a2",i):n.createRecord("data-v-6dab48a2",i))}()},{vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],110:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 71, stdin */\n.root[data-v-47615034] {\n  position: fixed;\n  pointer-events: none;\n  white-space: nowrap;\n  padding: 0.2em 0.4em;\n  margin: 10px;\n  font-size: 0.8em;\n  background: rgba(0, 0, 0, 0.8);\n  color: #c9e2ff;\n  border-radius: 0.2em; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={name:"stalker",data:function(){return{left:0,right:0,top:0,bottom:0,text:""}},methods:{applyStalkerText:function(t){var e=this;setTimeout(function(){e.text=t.getAttribute("stalker-text")},10)}},mounted:function(){var t=this;window.addEventListener("mousemove",function(e){var n=e.clientX,r=e.clientY,i=document.documentElement.clientWidth,o=document.documentElement.clientHeight,a=i-240<n,s=o-40<r;t.left=a?null:n,t.right=a?i-n:null,t.top=s?null:r,t.bottom=s?o-r:null,t.applyStalkerText(e.target)}),window.addEventListener("mousedown",function(e){t.applyStalkerText(e.target)}),window.addEventListener("mouseup",function(e){t.applyStalkerText(e.target)})}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[t.text?n("div",{staticClass:"root",style:{left:"number"==typeof t.left?t.left+"px":void 0,right:"number"==typeof t.right?t.right+"px":void 0,top:"number"==typeof t.top?t.top+"px":void 0,bottom:"number"==typeof t.bottom?t.bottom+"px":void 0}},[t._v("\n    "+t._s(t.text)+"\n  ")]):t._e()])},i.staticRenderFns=[],i._scopeId="data-v-47615034",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-47615034",i):n.createRecord("data-v-47615034",i))}()},{vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],111:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 125, stdin */\n.blur-layer[data-v-956d0136] {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%; }\n\n/* line 133, stdin */\n.root[data-v-956d0136] {\n  position: absolute;\n  left: calc( 50% - 10em);\n  top: 1em;\n  width: 20em;\n  height: calc( 100% - 2em);\n  overflow: hidden;\n  background: #0e1011;\n  font-size: 0.8em;\n  filter: drop-shadow(0 0 2px #000000); }\n  /* line 146, stdin */\n  .root .search-box[data-v-956d0136] {\n    position: relative;\n    font-size: 1em;\n    width: calc( 100% - 12px);\n    margin: 2px;\n    padding: 2px 4px;\n    border: none;\n    background: #3d4449;\n    color: #c9e2ff; }\n  /* line 158, stdin */\n  .root .fx-names[data-v-956d0136] {\n    position: relative;\n    width: 100%;\n    height: calc( 100% - 1em - 12px); }\n    /* line 163, stdin */\n    .root .fx-names .fx-name[data-v-956d0136] {\n      position: relative;\n      width: calc( 100% - 12px);\n      margin: 2px;\n      padding: 2px 4px;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      background: #202325;\n      cursor: pointer; }\n      /* line 176, stdin */\n      .root .fx-names .fx-name[data-v-956d0136]:hover {\n        background: #2c3236; }\n      /* line 177, stdin */\n      .root .fx-names .fx-name.selected[data-v-956d0136] {\n        background: #2c3236; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=t("babel-runtime/helpers/toConsumableArray"),r=a(e),i=t("./scrollable.vue"),o=a(i);function a(t){return t&&t.__esModule?t:{default:t}}n.default={props:["automaton","active"],components:{Scrollable:o.default},data:function(){return{fxDefs:[],searchText:"",selectedIndex:0}},methods:{filterDef:function(t){var e=this.searchText.split(/\s+/),n=this.automaton.getFxDefinitionName(t);return e.every(function(e){return n.toLowerCase().includes(e.toLowerCase())||t.toLowerCase().includes(e.toLowerCase())})},select:function(t){""!==t?(this.$emit("selected",t),this.fxDefs.splice(this.fxDefs.indexOf(t),1),this.fxDefs.unshift(t),this.blur()):this.blur()},blur:function(){this.$emit("blur"),this.searchText="",this.selectedIndex=0},onSearchBoxKeydown:function(t){13===t.which?this.select(this.fxDefsFiltered[this.selectedIndex]):27===t.which?this.blur():38===t.which?this.selectedIndex=(this.selectedIndex-1+this.fxDefsFiltered.length)%this.fxDefsFiltered.length:40===t.which?this.selectedIndex=(this.selectedIndex+1)%this.fxDefsFiltered.length:this.selectedIndex=0}},mounted:function(){this.fxDefs=this.automaton.getFxDefinitionIds()},computed:{fxDefsFiltered:function(){var t,e=this;(t=this.fxDefs).push.apply(t,(0,r.default)(this.automaton.getFxDefinitionIds().filter(function(t){return-1===e.fxDefs.indexOf(t)})));var n=this.fxDefs.filter(function(t){return e.filterDef(t)});return 0===n.length?[""]:n}},watch:{active:function(t){var e=this;t&&setTimeout(function(){e.$refs.searchBox.focus()},10)}}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[t.active?n("div",{staticClass:"blur-layer",on:{mousedown:t.blur}}):t._e(),t._v(" "),t.active?n("div",{staticClass:"root"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.searchText,expression:"searchText"}],ref:"searchBox",staticClass:"search-box",attrs:{type:"text",placeholder:"Add a fx..."},domProps:{value:t.searchText},on:{keydown:t.onSearchBoxKeydown,input:function(e){e.target.composing||(t.searchText=e.target.value)}}}),t._v(" "),n("Scrollable",{staticClass:"fx-names",attrs:{bar:"right"}},t._l(t.fxDefsFiltered,function(e,r){return n("div",{key:e,staticClass:"fx-name",class:{selected:r===t.selectedIndex},attrs:{"stalker-text":t.automaton.getFxDefinitionDescription(e)||"(no description provided)"},on:{mousedown:function(n){t.select(e)}}},[t._v("\n        "+t._s(e?t.automaton.getFxDefinitionName(e):"(No result found)")+"\n      ")])}))],1):t._e()])},i.staticRenderFns=[],i._scopeId="data-v-956d0136",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-956d0136",i):n.createRecord("data-v-956d0136",i))}()},{"./scrollable.vue":109,"babel-runtime/helpers/toConsumableArray":4,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}],112:[function(t,e,n){var r=t("vueify/lib/insert-css").insert("/* line 1018, stdin */\n.root[data-v-3873fd6e] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  color: #c9e2ff; }\n  /* line 1027, stdin */\n  .root .hbar[data-v-3873fd6e] {\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    height: 4px;\n    background: #000000; }\n    /* line 1036, stdin */\n    .root .hbar .vision[data-v-3873fd6e] {\n      position: absolute;\n      bottom: 0;\n      height: 100%;\n      border-radius: 2px;\n      background: #22aaff; }\n  /* line 1047, stdin */\n  .root .svg[data-v-3873fd6e] {\n    background: #0e1011;\n    font-size: 10px;\n    pointer-events: none; }\n    /* line 1054, stdin */\n    .root .svg .grid[data-v-3873fd6e] {\n      stroke: #c9e2ff;\n      stroke-width: 1; }\n    /* line 1059, stdin */\n    .root .svg .grid-text[data-v-3873fd6e] {\n      fill: #c9e2ff; }\n    /* line 1063, stdin */\n    .root .svg .graph[data-v-3873fd6e] {\n      fill: none;\n      stroke: #c9e2ff;\n      stroke-width: 2; }\n    /* line 1069, stdin */\n    .root .svg .currentLine[data-v-3873fd6e] {\n      stroke: #22aaff;\n      stroke-width: 2; }\n    /* line 1074, stdin */\n    .root .svg .currentText[data-v-3873fd6e] {\n      fill: #22aaff; }\n    /* line 1078, stdin */\n    .root .svg .currentPoint[data-v-3873fd6e] {\n      fill: #22aaff; }\n    /* line 1084, stdin */\n    .root .svg .node .handle .line[data-v-3873fd6e] {\n      stroke: #22aaff;\n      stroke-width: 1; }\n    /* line 1089, stdin */\n    .root .svg .node .handle .circle[data-v-3873fd6e] {\n      fill: #22aaff;\n      pointer-events: auto;\n      cursor: pointer; }\n    /* line 1097, stdin */\n    .root .svg .node .body[data-v-3873fd6e] {\n      fill: #0e1011;\n      stroke: #22aaff;\n      stroke-width: 2;\n      pointer-events: auto;\n      cursor: pointer; }\n      /* line 1105, stdin */\n      .root .svg .node .body.selected[data-v-3873fd6e] {\n        fill: #22aaff; }\n    /* line 1112, stdin */\n    .root .svg .fx .line[data-v-3873fd6e] {\n      stroke: #0fd895;\n      stroke-width: 1;\n      stroke-dasharray: 4; }\n    /* line 1118, stdin */\n    .root .svg .fx .fill[data-v-3873fd6e] {\n      fill: #0fd895;\n      opacity: 0.1; }\n    /* line 1123, stdin */\n    .root .svg .fx .body[data-v-3873fd6e] {\n      fill: #0e1011;\n      stroke: #0fd895;\n      stroke-width: 2;\n      pointer-events: auto;\n      cursor: pointer; }\n      /* line 1128, stdin */\n      .root .svg .fx .body.bypass[data-v-3873fd6e] {\n        fill: #0e1011;\n        stroke: #687788; }\n      /* line 1133, stdin */\n      .root .svg .fx .body.selected[data-v-3873fd6e] {\n        fill: #0fd895;\n        stroke: #0e1011; }\n        /* line 1137, stdin */\n        .root .svg .fx .body.selected.bypass[data-v-3873fd6e] {\n          fill: #687788;\n          stroke: #0e1011; }\n    /* line 1147, stdin */\n    .root .svg .fx .text[data-v-3873fd6e] {\n      fill: #0fd895; }\n      /* line 1149, stdin */\n      .root .svg .fx .text.bypass[data-v-3873fd6e] {\n        fill: #687788; }\n      /* line 1150, stdin */\n      .root .svg .fx .text.selected[data-v-3873fd6e] {\n        fill: #0e1011; }\n    /* line 1153, stdin */\n    .root .svg .fx .side[data-v-3873fd6e] {\n      fill: rgba(0, 0, 0, 0);\n      pointer-events: auto;\n      cursor: ew-resize; }");!function(){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=t("babel-runtime/core-js/math/log10"),r=u(e),i=t("../param-gui"),o=u(i),a=t("./timeline-fxmenu.vue"),s=u(a);function u(t){return t&&t.__esModule?t:{default:t}}n.default={components:{FxMenu:s.default},props:["automaton","selectedParamName","selectedNodeIds","selectedFxIds"],data:function(){return{width:100,height:100,t0:0,t1:this.automaton.length,v0:-.25,v1:1.25,grid:{x:[],y:[]},graphPoints:"",fxmenuActive:!1,fxmenuTime:0}},methods:{updateGrid:function(){this.grid={x:[],y:[]};for(var t=this.t1-this.t0,e=(0,r.default)(t),n=Math.pow(10,Math.floor(e)-1),i=e-Math.floor(e),o=Math.floor(this.t0/n),a=o*n,s=o-10*Math.floor(o/10),u=o-100*Math.floor(o/100),l=a;l<this.t1;l+=n){var c=0===u?.4:0===s?.4-.3*i:.1-.3*i;0<c&&this.grid.x.push({val:l+1e-9,pos:this.t2x(l),op:c}),s=(s+1)%10,u=(u+1)%100}for(var f=this.v1-this.v0,d=(0,r.default)(f),h=Math.pow(10,Math.floor(d)-1),p=d-Math.floor(d),v=Math.floor(this.v0/h),m=v*h,g=v-10*Math.floor(v/10),_=v-100*Math.floor(v/100),y=m;y<this.v1;y+=h){var b=0===_?.4:0===g?.4-.3*p:.1-.3*p;0<b&&this.grid.y.push({val:y+1e-9,pos:this.v2y(y),op:b}),g=(g+1)%10,_=(_+1)%100}},updateGraph:function(){var t=this.selectedParam;if(t){for(var e="",n=0;n<=this.width;n++){var r=this.x2t(n),i=t.getValue(r),o=this.v2y(i);e+=n+" "+o+" "}this.graphPoints=e}},x2t:function(t){var e=t/this.width;return e*(this.t1-this.t0)+this.t0},t2x:function(t){var e=(t-this.t0)/(this.t1-this.t0);return e*this.width},y2v:function(t){var e=1-t/this.height;return e*(this.v1-this.v0)+this.v0},v2y:function(t){var e=1-(t-this.v0)/(this.v1-this.v0);return e*this.height},moveView:function(t,e){var n=this.x2t(0)-this.x2t(t),r=this.y2v(0)-this.y2v(e);n=Math.min(Math.max(n,-this.t0),this.automaton.length-this.t1),this.t0+=n,this.t1+=n,this.v0+=r,this.v1+=r,this.updateGrid(),this.updateGraph()},zoomView:function(t,e,n,r){var i=(t-this.t0)/(this.t1-this.t0),o=(e-this.v0)/(this.v1-this.v0),a=this.t1-this.t0;a*=Math.pow((this.width+1)/this.width,2*n),a=Math.min(Math.max(a,.01),1e3);var s=this.v1-this.v0;s*=Math.pow((this.width+1)/this.width,2*r),s=Math.min(Math.max(s,.01),1e3),this.t0=t-i*a,this.t1=t+(1-i)*a,this.v0=e-o*s,this.v1=e+(1-o)*s,this.t0<0&&(this.t1=Math.max(this.t1-this.t0,this.t1)),this.automaton.length<this.t1&&(this.t0+=this.automaton.length-this.t1),this.t0<0&&(this.t0=0),this.automaton.length<this.t1&&(this.t1=this.automaton.length),this.updateGrid(),this.updateGraph()},createNode:function(t,e){var n=this.selectedParam,r=n.createNode(t,e),i=n.dumpNode(r);this.$emit("nodeSelected",[r]),this.$emit("fxSelected",[]),this.automaton.pushHistory("Create Node",function(){return n.createNodeFromData(i)},function(){return n.removeNode(r)})},removeNode:function(t){var e=this.selectedParam,n=e.dumpNode(t);n.in&&n.out&&(this.automaton.pushHistory("Remove Node",function(){return e.removeNode(t)},function(){return e.createNodeFromData(n)},!0),this.$emit("nodeSelected",[]))},removeHandle:function(t,e){var n=this.selectedParam,r=n.dumpNode(t),i=e?r.out.time:r.in.time,o=e?r.out.value:r.in.value;n.moveHandle(t,e,0,0),this.automaton.pushHistory("Remove Handle",function(){return n.moveHandle(t,e,0,0)},function(){return n.moveHandle(t,e,i,o)},!0)},resetHandles:function(t){var e=this.selectedParam,n=e.dumpNode(t);this.automaton.pushHistory("Reset Handle",function(){e.resetHandle(t,!1),e.resetHandle(t,!0)},function(){e.moveHandle(t,!1,n.in.time,n.in.value),e.moveHandle(t,!0,n.out.time,n.out.value)},!0)},grabHelper:function(t,e){var n=this,r=t.clientX,i=t.clientY,o=this.x2t(r),a=this.y2v(i),s=function(t){var r=n.x2t(t.clientX)-o,i=n.y2v(t.clientY)-a;e(r,i,t)};window.addEventListener("mousemove",s),window.addEventListener("mouseup",function t(r){var i=n.x2t(r.clientX)-o,u=n.y2v(r.clientY)-a;e(i,u,r,!0),window.removeEventListener("mousemove",s),window.removeEventListener("mouseup",t)})},snapTime:function(t){if(!this.automaton.guiSettings.snapActive)return t;var e=this.automaton.guiSettings.snapTime,n=5/this.width*(this.t1-this.t0),r=Math.round(t/e)*e;return Math.abs(t-r)<n?r:t},snapValue:function(t){if(!this.automaton.guiSettings.snapActive)return t;var e=this.automaton.guiSettings.snapValue,n=5/this.height*(this.v1-this.v0),r=Math.round(t/e)*e;return Math.abs(t-r)<n?r:t},grabNode:function(t,e){var n=this,r=this.selectedParam;this.$emit("nodeSelected",[t]),this.$emit("fxSelected",[]);var i=r.dumpNode(t),o=i.time,a=i.value;this.grabHelper(e,function(e,i,s,u){s.shiftKey?i=0:(s.ctrlKey||s.metaKey)&&(e=0);var l=o+e,c=a+i;if(s.altKey||(l=n.snapTime(l),c=n.snapValue(c)),r.moveNode(t,l,c),u){if(o===l&&a===c)return;n.automaton.pushHistory("Move Node",function(){return r.moveNode(t,l,c)},function(){return r.moveNode(t,o,a)})}})},grabHandle:function(t,e,n){var r=this,i=this.selectedParam,o=i.dumpNode(t),a=e?o.out:o.in,s=a.time,u=a.value,l=Math.sqrt(s*s+u*u),c=s/l,f=u/l,d=e?o.in:o.out,h=d?d.time:0,p=d?d.value:0;this.grabHelper(n,function(n,o,a,l){var d=s+n,v=u+o,m=h,g=p;if(a.shiftKey){var _=d*c+v*f;d=_*c,v=_*f}else(a.ctrlKey||a.metaKey)&&(m=-d,g=-v);if(i.moveHandle(t,e,d,v),i.moveHandle(t,!e,m,g),l){if(0===n&&0===o)return;r.automaton.pushHistory("Move Handle",function(){i.moveHandle(t,e,d,v),i.moveHandle(t,!e,m,g)},function(){i.moveHandle(t,e,s,u),i.moveHandle(t,!e,h,p)})}})},openFxMenu:function(t){this.fxmenuActive=!0,this.fxmenuTime=t},createFx:function(t,e){var n=this.selectedParam,r=this.fxmenuTime,i=Math.min(1,this.automaton.length-this.fxmenuTime),o=n.createFx(r,i,e),a=n.dumpFx(o);o&&(this.$emit("nodeSelected",[]),this.$emit("fxSelected",[o]),this.automaton.pushHistory("Create Fx",function(){return n.createFxFromData(a)},function(){return n.removeFx(o)}))},removeFx:function(t){var e=this.selectedParam,n=e.dumpFx(t);this.automaton.pushHistory("Remove Fx",function(){return e.removeFx(t)},function(){return e.createFxFromData(n)},!0),this.$emit("fxSelected",[])},grabFxBody:function(t,e){var n=this,r=this.selectedParam;this.$emit("nodeSelected",[]),this.$emit("fxSelected",[t]);var i=r.dumpFx(t),a=i.time,s=i.row,u=e.clientY;this.grabHelper(e,function(e,i,l,c){var f=l.clientY-u,d=Math.min(Math.max(s+Math.round(f/16),0),o.default.FX_ROW_MAX),h=a+e;if(l.altKey||(h=n.snapTime(h)),r.moveFx(t,h),r.changeFxRow(t,d),c){if(a===h&&s===d)return;n.automaton.pushHistory("Move Fx",function(){return r.forceMoveFx(t,h,d)},function(){return r.forceMoveFx(t,a,s)})}})},grabFxLeft:function(t,e){var n=this,r=this.selectedParam;this.$emit("nodeSelected",[]),this.$emit("fxSelected",[t]);var i=r.dumpFx(t),o=i.length,a=i.time+o;this.grabHelper(e,function(e,i,s,u){var l=o-e;if(s.altKey||(l=n.snapTime(l-a)+a),r.resizeFxByLeft(t,l),u){if(0===e&&0===i)return;n.automaton.pushHistory("Resize Fx",function(){return r.resizeFxByLeft(t,l)},function(){return r.resizeFxByLeft(t,o)})}})},grabFxRight:function(t,e){var n=this,r=this.selectedParam;this.$emit("nodeSelected",[]),this.$emit("fxSelected",[t]);var i=r.dumpFx(t),o=i.length,a=i.time;this.grabHelper(e,function(e,i,s,u){var l=o+e;s.altKey||(l=n.snapTime(l+a)-a),r.resizeFx(t,l),u&&n.automaton.pushHistory("Resize Fx",function(){return r.resizeFx(t,l)},function(){return r.resizeFx(t,o)})})},dragBg:function(t){var e=this,n=this.x2t(t.offsetX),r=this.y2v(t.offsetY),i=t.which,o=t.shiftKey,a=t.altKey,s=t.clientX,u=t.clientY,l=s,c=u,f=this.automaton.isPlaying;a&&(this.automaton.seek(n),f&&this.automaton.pause());var d=function(t){var u=t.clientX,f=t.clientY,d=t.clientX-l,h=t.clientY-c;1===i?a&&e.automaton.seek(n+e.x2t(u-s)):2===i&&(o?e.zoomView(n,r,-d,h):e.moveView(d,h)),l=u,c=f};window.addEventListener("mousemove",d),window.addEventListener("mouseup",function t(n){a&&f&&e.automaton.play(),window.removeEventListener("mousemove",d),window.removeEventListener("mouseup",t)})},contextBg:function(t){var e=this;if(this.selectedParam){var n=this.x2t(t.offsetX),r=this.y2v(t.offsetY);this.$emit("context",{clientX:t.clientX,clientY:t.clientY,commands:[{text:"Add Node",func:function(){e.createNode(n,r)}},{text:"Add Fx",func:function(){e.openFxMenu(n)}}]})}},onWheel:function(t){var e=this.x2t(t.offsetX),n=this.y2v(t.offsetY);t.shiftKey?this.zoomView(e,n,-t.deltaY,0):t.ctrlKey||t.metaKey?this.zoomView(e,n,0,-t.deltaY):this.moveView(t.deltaX,-t.deltaY),this.updateGrid(),this.updateGraph()},onResize:function(){var t=this,e=this.$refs.root;this.width=e.clientWidth,this.height=e.clientHeight-4,this.$nextTick(function(){t.updateGrid(),t.updateGraph()})}},computed:{selectedParam:function(){return this.automaton.getParam(this.selectedParamName)}},watch:{selectedParamName:function(){this.updateGraph()}},mounted:function(){var t=this;this.$root.$on("changedLength",function(){t.t0=0,t.t1=t.automaton.length,t.updateGraph()}),this.$root.$on("poke",function(){t.updateGraph()}),this.$nextTick(function(){t.onResize()}),window.addEventListener("resize",this.onResize)},beforeDestroy:function(){window.removeEventListener("resize",this.onResize)}}}(),e.exports.__esModule&&(e.exports=e.exports.default);var i="function"==typeof e.exports?e.exports.options:e.exports;i.functional&&console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions."),i.render=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("div",{ref:"root",staticClass:"root",on:{wheel:function(e){return e.preventDefault(),t.onWheel(e)},dragstart:function(t){t.preventDefault()},mousedown:function(e){return e.preventDefault(),e.stopPropagation(),t.dragBg(e)},dblclick:function(e){return"button"in e||!t._k(e.keyCode,"left",37,e.key,["Left","ArrowLeft"])?"button"in e&&0!==e.button?null:(e.stopPropagation(),void t.createNode(t.x2t(e.offsetX),t.y2v(e.offsetY))):null},contextmenu:function(e){return e.stopPropagation(),e.preventDefault(),t.contextBg(e)}}},[n("div",{staticClass:"hbar"},[n("div",{staticClass:"vision",style:{left:t.t0/t.automaton.length*t.width+"px",width:(t.t1-t.t0)/t.automaton.length*t.width+"px"}})]),t._v(" "),n("svg",{staticClass:"svg",attrs:{width:t.width,height:t.height,viewBox:"0 0 "+t.width+" "+t.height}},[t._l(t.grid.x,function(e,r){return n("line",{key:"grid-x"+r,staticClass:"grid",attrs:{x1:e.pos,y1:0,x2:e.pos,y2:t.height,opacity:e.op}})}),t._v(" "),t._l(t.grid.y,function(e,r){return n("line",{key:"grid-y"+r,staticClass:"grid",attrs:{x1:0,y1:e.pos,x2:t.width,y2:e.pos,opacity:e.op}})}),t._v(" "),t._l(t.grid.x,function(e,r){return n("text",{key:"grid-text-x"+r,staticClass:"grid-text",attrs:{x:e.pos+2,y:t.height-2,opacity:e.op}},[t._v(t._s(e.val.toFixed(3)))])}),t._v(" "),t._l(t.grid.y,function(e,r){return n("text",{key:"grid-text-y"+r,staticClass:"grid-text",attrs:{x:"2",y:e.pos-2,opacity:e.op}},[t._v(t._s(e.val.toFixed(3)))])}),t._v(" "),t.selectedParam?n("g",[t._l(t.selectedParam.dumpFxs(),function(e){return n("g",{key:e.$id,staticClass:"fx"},[n("line",{staticClass:"line",attrs:{x1:t.t2x(e.time),y1:"4",x2:t.t2x(e.time),y2:t.height}}),t._v(" "),n("line",{staticClass:"line",attrs:{x1:t.t2x(e.time+e.length),y1:"4",x2:t.t2x(e.time+e.length),y2:t.height}}),t._v(" "),n("rect",{staticClass:"fill",attrs:{x:t.t2x(e.time),y:"0",width:t.t2x(e.time+e.length)-t.t2x(e.time),height:t.height}}),t._v(" "),n("g",{attrs:{transform:"translate(0,"+(1+16*e.row)+")"}},[n("rect",{staticClass:"body",class:{selected:t.selectedFxIds.some(function(t){return t===e.$id}),bypass:e.bypass},attrs:{x:t.t2x(e.time),width:t.t2x(e.time+e.length)-t.t2x(e.time),height:"16",rx:"5",ry:"5"},on:{mousedown:function(n){return"button"in n||!t._k(n.keyCode,"left",37,n.key,["Left","ArrowLeft"])?"button"in n&&0!==n.button?null:(n.stopPropagation(),void t.grabFxBody(e.$id,n)):null},dblclick:function(n){n.stopPropagation(),t.removeFx(e.$id)}}}),t._v(" "),n("rect",{staticClass:"side",attrs:{x:t.t2x(e.time)-1,width:"6",height:"16"},on:{mousedown:function(n){return"button"in n||!t._k(n.keyCode,"left",37,n.key,["Left","ArrowLeft"])?"button"in n&&0!==n.button?null:(n.stopPropagation(),void t.grabFxLeft(e.$id,n)):null}}}),t._v(" "),n("rect",{staticClass:"side",attrs:{x:t.t2x(e.time+e.length)-5,width:"6",height:"16"},on:{mousedown:function(n){return"button"in n||!t._k(n.keyCode,"left",37,n.key,["Left","ArrowLeft"])?"button"in n&&0!==n.button?null:(n.stopPropagation(),void t.grabFxRight(e.$id,n)):null}}}),t._v(" "),n("clipPath",{attrs:{id:"fxclip"+e.$id}},[n("rect",{attrs:{x:t.t2x(e.time),width:t.t2x(e.time+e.length)-t.t2x(e.time),height:"16"}})]),t._v(" "),n("g",{attrs:{"clip-path":"url(#fxclip"+e.$id+")"}},[n("text",{staticClass:"text",class:{selected:t.selectedFxIds.some(function(t){return t===e.$id}),bypass:e.bypass},attrs:{x:t.t2x(e.time)+4,y:"12"}},[t._v(t._s(t.automaton.getFxDefinitionName(e.def)))])])])])}),t._v(" "),t.selectedParam?n("polyline",{staticClass:"graph",attrs:{points:t.graphPoints}}):t._e(),t._v(" "),n("line",{staticClass:"currentLine",attrs:{x1:t.t2x(t.automaton.time),y1:"0",x2:t.t2x(t.automaton.time),y2:t.height}}),t._v(" "),n("text",{staticClass:"currentText",attrs:{x:t.t2x(t.automaton.time)+2,y:t.height-2}},[t._v(t._s(t.automaton.time.toFixed(3)))]),t._v(" "),t.selectedParam?n("g",[n("line",{staticClass:"currentLine",attrs:{x1:"0",y1:t.v2y(t.selectedParam.getValue()),x2:t.width,y2:t.v2y(t.selectedParam.getValue())}}),t._v(" "),n("text",{staticClass:"currentText",attrs:{x:"2",y:t.v2y(t.selectedParam.getValue())-2}},[t._v(t._s(t.selectedParam.getValue().toFixed(3)))]),t._v(" "),n("circle",{staticClass:"currentPoint",attrs:{r:"5",cx:t.t2x(t.automaton.time),cy:t.v2y(t.selectedParam.getValue())}})]):t._e()],2):t._e(),t._v(" "),t.selectedParam?n("g",t._l(t.selectedParam.dumpNodes(),function(e){return n("g",{key:e.$id,staticClass:"node"},[n("g",{staticClass:"handle"},[e.in?n("line",{staticClass:"line",attrs:{x1:t.t2x(e.time),y1:t.v2y(e.value),x2:t.t2x(e.time+e.in.time),y2:t.v2y(e.value+e.in.value)}}):t._e(),t._v(" "),e.in?n("circle",{staticClass:"circle",attrs:{r:"4",transform:"translate("+t.t2x(e.time+e.in.time)+","+t.v2y(e.value+e.in.value)+")"},on:{mousedown:function(n){return"button"in n||!t._k(n.keyCode,"left",37,n.key,["Left","ArrowLeft"])?"button"in n&&0!==n.button?null:(n.stopPropagation(),void t.grabHandle(e.$id,!1,n)):null},dblclick:function(n){n.stopPropagation(),t.removeHandle(e.$id,!1)}}}):t._e(),t._v(" "),e.out?n("line",{staticClass:"line",attrs:{x1:t.t2x(e.time),y1:t.v2y(e.value),x2:t.t2x(e.time+e.out.time),y2:t.v2y(e.value+e.out.value)}}):t._e(),t._v(" "),e.out?n("circle",{staticClass:"circle",attrs:{r:"4",transform:"translate("+t.t2x(e.time+e.out.time)+","+t.v2y(e.value+e.out.value)+")"},on:{mousedown:function(n){return"button"in n||!t._k(n.keyCode,"left",37,n.key,["Left","ArrowLeft"])?"button"in n&&0!==n.button?null:(n.stopPropagation(),void t.grabHandle(e.$id,!0,n)):null},dblclick:function(n){n.stopPropagation(),t.removeHandle(e.$id,!0)}}}):t._e()]),t._v(" "),n("g",{staticClass:"body",class:{selected:t.selectedNodeIds.some(function(t){return t===e.$id})},on:{dblclick:function(n){n.stopPropagation(),t.removeNode(e.$id)},mousedown:[function(n){return"button"in n||!t._k(n.keyCode,"left",37,n.key,["Left","ArrowLeft"])?"button"in n&&0!==n.button?null:n.shiftKey?(n.stopPropagation(),void t.resetHandles(e.$id)):null:null},function(n){return"button"in n||!t._k(n.keyCode,"left",37,n.key,["Left","ArrowLeft"])?"button"in n&&0!==n.button?null:(n.stopPropagation(),void t.grabNode(e.$id,n)):null}]}},[t.v0<=e.value&&e.value<=t.v1?n("circle",{staticClass:"circle",attrs:{transform:"translate("+t.t2x(e.time)+","+t.v2y(e.value)+")",r:"5"}}):t._e(),t._v(" "),e.value<t.v0?n("path",{staticClass:"triangle",attrs:{transform:"translate("+t.t2x(e.time)+","+t.height+")",d:"M 0 -4 L 5 -12 L -5 -12 z"}}):t._e(),t._v(" "),t.v1<e.value?n("path",{staticClass:"triangle",attrs:{transform:"translate("+t.t2x(e.time)+",0)",d:"M 0 4 L -5 12 L 5 12 z"}}):t._e()])])})):t._e()],2),t._v(" "),n("FxMenu",{attrs:{automaton:t.automaton,active:t.fxmenuActive},on:{selected:function(e){t.createFx(t.fxmenuTime,e)},blur:function(e){t.fxmenuActive=!1}}})],1)])},i.staticRenderFns=[],i._scopeId="data-v-3873fd6e",e.hot&&function(){var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.accept(),e.hot.dispose(r),e.hot.data?n.reload("data-v-3873fd6e",i):n.createRecord("data-v-3873fd6e",i))}()},{"../param-gui":100,"./timeline-fxmenu.vue":111,"babel-runtime/core-js/math/log10":2,vue:65,"vue-hot-reload-api":64,"vueify/lib/insert-css":66}]},{},[98])(98)}).call(this,n(3))},function(t,e,n){const r=n(60);t.exports=class{constructor(t,e){this.canvas=t,this.inProgress=0,this.queueDL=!1,this.zip=new r,this.anchor=document.createElement("a"),this.currentFrame=0,this.maxFrames=parseInt(e||0)}add(t){if(this.maxFrames&&this.maxFrames<=this.currentFrame)return;let e=("0000"+this.currentFrame).slice(-5)+".png";this.inProgress++,this.currentFrame++,this.canvas.toBlob(t=>{this.zip.file(e,t),this.inProgress--,this.__done()}),this.maxFrames&&this.maxFrames===this.currentFrame&&this.download()}download(){this.queueDL=!0,this.__done()}__done(){this.queueDL&&0===this.inProgress&&(this.queueDL=!1,this.zip.generateAsync({type:"blob"}).then(t=>{this.anchor.href=window.URL.createObjectURL(t),this.anchor.download="canvasSaver-"+Date.now(),this.anchor.click()}))}}},function(t,e,n){var r=n(56);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(58)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(57)(!1)).push([t.i,"body {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  font: 500 10px 'Wt-Position', sans-serif;\n  background: #000;\n  color: #fff; }\n  body #divActive {\n    position: fixed;\n    bottom: 8px;\n    top: 8px; }\n  body #divPath {\n    position: fixed;\n    right: 8px;\n    bottom: 248px;\n    text-align: right; }\n  body #divAutomaton {\n    position: fixed;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    height: 240px; }\n  body #canvas {\n    position: fixed;\n    left: 0;\n    top: 0; }\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){var r={},i=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),o=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),a=null,s=0,u=[],l=n(59);function c(t,e){for(var n=0;n<t.length;n++){var i=t[n],o=r[i.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](i.parts[a]);for(;a<i.parts.length;a++)o.parts.push(m(i.parts[a],e))}else{var s=[];for(a=0;a<i.parts.length;a++)s.push(m(i.parts[a],e));r[i.id]={id:i.id,refs:1,parts:s}}}}function f(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],a=e.base?o[0]+e.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function d(t,e){var n=o(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(t.insertAt.before,n);n.insertBefore(e,i)}}function h(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function p(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return v(e,t.attrs),d(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function m(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var u=s++;n=a||(a=p(e)),r=_.bind(null,n,u,!1),i=_.bind(null,n,u,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),d(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=l(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),i=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){h(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return c(n,e),function(t){for(var i=[],o=0;o<n.length;o++){var a=n[o];(s=r[a.id]).refs--,i.push(s)}t&&c(f(t,e),e);for(o=0;o<i.length;o++){var s;if(0===(s=i[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete r[s.id]}}}};var g=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function _(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=g(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,n){"use strict";function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var t=new r;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}r.prototype=n(61),r.prototype.loadAsync=n(108),r.support=n(4),r.defaults=n(38),r.version="3.1.5",r.loadAsync=function(t,e){return(new r).loadAsync(t,e)},r.external=n(11),t.exports=r},function(t,e,n){"use strict";var r=n(7),i=n(0),o=n(1),a=n(37),s=n(38),u=n(22),l=n(94),c=n(95),f=n(15),d=n(107),h=function(t,e,n){var r,a=i.getTypeOf(e),c=i.extend(n||{},s);c.date=c.date||new Date,null!==c.compression&&(c.compression=c.compression.toUpperCase()),"string"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(t=v(t)),c.createFolders&&(r=p(t))&&m.call(this,r,!0);var h="string"===a&&!1===c.binary&&!1===c.base64;n&&void 0!==n.binary||(c.binary=!h),(e instanceof u&&0===e.uncompressedSize||c.dir||!e||0===e.length)&&(c.base64=!1,c.binary=!0,e="",c.compression="STORE",a="string");var g=null;g=e instanceof u||e instanceof o?e:f.isNode&&f.isStream(e)?new d(t,e):i.prepareContent(t,e,c.binary,c.optimizedBinaryString,c.base64);var _=new l(t,g,c);this.files[t]=_},p=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return e>0?t.substring(0,e):""},v=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},m=function(t,e){return e=void 0!==e?e:s.createFolders,t=v(t),this.files[t]||h.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function g(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var _={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,n,r;for(e in this.files)this.files.hasOwnProperty(e)&&(r=this.files[e],(n=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(n,r))},filter:function(t){var e=[];return this.forEach(function(n,r){t(n,r)&&e.push(r)}),e},file:function(t,e,n){if(1===arguments.length){if(g(t)){var r=t;return this.filter(function(t,e){return!e.dir&&r.test(t)})}var i=this.files[this.root+t];return i&&!i.dir?i:null}return t=this.root+t,h.call(this,t,e,n),this},folder:function(t){if(!t)return this;if(g(t))return this.filter(function(e,n){return n.dir&&t.test(e)});var e=this.root+t,n=m.call(this,e),r=this.clone();return r.root=n.name,r},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!==t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var n=this.filter(function(e,n){return n.name.slice(0,t.length)===t}),r=0;r<n.length;r++)delete this.files[n[r].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,n={};try{if((n=i.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:r.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");i.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var s=n.comment||this.comment||"";e=c.generateWorker(this,n,s)}catch(t){(e=new o("error")).error(t)}return new a(e,n.type||"string",n.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};t.exports=_},function(t,e,n){"use strict";e.byteLength=function(t){var e=l(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=l(t),r=n[0],a=n[1],s=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,a)),u=0,c=a>0?r-4:r,f=0;f<c;f+=4)e=i[t.charCodeAt(f)]<<18|i[t.charCodeAt(f+1)]<<12|i[t.charCodeAt(f+2)]<<6|i[t.charCodeAt(f+3)],s[u++]=e>>16&255,s[u++]=e>>8&255,s[u++]=255&e;2===a&&(e=i[t.charCodeAt(f)]<<2|i[t.charCodeAt(f+1)]>>4,s[u++]=255&e);1===a&&(e=i[t.charCodeAt(f)]<<10|i[t.charCodeAt(f+1)]<<4|i[t.charCodeAt(f+2)]>>2,s[u++]=e>>8&255,s[u++]=255&e);return s},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],a=0,s=n-i;a<s;a+=16383)o.push(f(t,a,a+16383>s?s:a+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],i[a.charCodeAt(s)]=s;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function f(t,e,n){for(var r,i=[],o=e;o<n;o+=3)r=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(c(r));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,a,s=8*i-r-1,u=(1<<s)-1,l=u>>1,c=-7,f=n?i-1:0,d=n?-1:1,h=t[e+f];for(f+=d,o=h&(1<<-c)-1,h>>=-c,c+=s;c>0;o=256*o+t[e+f],f+=d,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=r;c>0;a=256*a+t[e+f],f+=d,c-=8);if(0===o)o=1-l;else{if(o===u)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),o-=l}return(h?-1:1)*a*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var a,s,u,l=8*o-i-1,c=(1<<l)-1,f=c>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,p=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+f>=1?d/u:d*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(e*u-1)*Math.pow(2,i),a+=f):(s=e*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;t[n+h]=255&s,h+=p,s/=256,i-=8);for(a=a<<i|s,l+=i;l>0;t[n+h]=255&a,h+=p,a/=256,l-=8);t[n+h-p]|=128*v}},function(t,e,n){t.exports=i;var r=n(17).EventEmitter;function i(){r.call(this)}n(8)(i,r),i.Readable=n(18),i.Writable=n(72),i.Duplex=n(73),i.Transform=n(74),i.PassThrough=n(75),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",s),n.on("close",u));var a=!1;function s(){a||(a=!0,t.end())}function u(){a||(a=!0,"function"==typeof t.destroy&&t.destroy())}function l(t){if(c(),0===r.listenerCount(this,"error"))throw t}function c(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",s),n.removeListener("close",u),n.removeListener("error",l),t.removeListener("error",l),n.removeListener("end",c),n.removeListener("close",c),t.removeListener("close",c)}return n.on("error",l),t.on("error",l),n.on("end",c),n.on("close",c),t.on("close",c),t.emit("pipe",n),t}},function(t,e){},function(t,e,n){"use strict";var r=n(14).Buffer,i=n(67);function o(t,e,n){t.copy(e,n)}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e=r.allocUnsafe(t>>>0),n=this.head,i=0;n;)o(n.data,e,i),i+=n.data.length,n=n.next;return e},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(69),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(3))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},a=!1,s=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&c(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},r=function(e){t.port2.postMessage(e)}}():s&&"onreadystatechange"in s.createElement("script")?function(){var t=s.documentElement;r=function(e){var n=s.createElement("script");n.onreadystatechange=function(){c(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(c,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var a={callback:t,args:e};return o[i]=a,r(i),i++},u.clearImmediate=l}function l(t){delete o[t]}function c(t){if(a)setTimeout(c,0,t);else{var e=o[t];if(e){a=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{l(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(3),n(12))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(3))},function(t,e,n){"use strict";t.exports=o;var r=n(31),i=n(10);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(8),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(19)},function(t,e,n){t.exports=n(6)},function(t,e,n){t.exports=n(18).Transform},function(t,e,n){t.exports=n(18).PassThrough},function(t,e,n){n(77),t.exports=n(33).setImmediate},function(t,e,n){var r=n(78),i=n(86);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,n){var r=n(16),i=n(33),o=n(34),a=n(80),s=function(t,e,n){var u,l,c,f=t&s.F,d=t&s.G,h=t&s.S,p=t&s.P,v=t&s.B,m=t&s.W,g=d?i:i[e]||(i[e]={}),_=g.prototype,y=d?r:h?r[e]:(r[e]||{}).prototype;for(u in d&&(n=e),n)(l=!f&&y&&void 0!==y[u])&&u in g||(c=l?y[u]:n[u],g[u]=d&&"function"!=typeof y[u]?n[u]:v&&l?o(c,r):m&&y[u]==c?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(c):p&&"function"==typeof c?o(Function.call,c):c,p&&((g.virtual||(g.virtual={}))[u]=c,t&s.R&&_&&!_[u]&&a(_,u,c)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(81),i=n(85);t.exports=n(21)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(82),i=n(83),o=n(84),a=Object.defineProperty;e.f=n(21)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(20);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){t.exports=!n(21)&&!n(35)(function(){return 7!=Object.defineProperty(n(36)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(20);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r,i,o,a=n(34),s=n(87),u=n(88),l=n(36),c=n(16),f=c.process,d=c.setImmediate,h=c.clearImmediate,p=c.MessageChannel,v=0,m={},g=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},_=function(t){g.call(t.data)};d&&h||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return m[++v]=function(){s("function"==typeof t?t:Function(t),e)},r(v),v},h=function(t){delete m[t]},"process"==n(89)(f)?r=function(t){f.nextTick(a(g,t,1))}:p?(o=(i=new p).port2,i.port1.onmessage=_,r=a(o.postMessage,o,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(t){c.postMessage(t+"","*")},c.addEventListener("message",_,!1)):r="onreadystatechange"in l("script")?function(t){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),g.call(t)}}:function(t){setTimeout(a(g,t,1),0)}),t.exports={set:d,clear:h}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){t.exports=n(16).document&&document.documentElement},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){"use strict";var r=n(91);function i(){}var o={},a=["REJECTED"],s=["FULFILLED"],u=["PENDING"];function l(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,t!==i&&h(this,t)}function c(t,e,n){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function f(t,e,n){r(function(){var r;try{r=e(n)}catch(e){return o.reject(t,e)}r===t?o.reject(t,new TypeError("Cannot resolve promise with itself")):o.resolve(t,r)})}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function h(t,e){var n=!1;function r(e){n||(n=!0,o.reject(t,e))}function i(e){n||(n=!0,o.resolve(t,e))}var a=p(function(){e(i,r)});"error"===a.status&&r(a.value)}function p(t,e){var n={};try{n.value=t(e),n.status="success"}catch(t){n.status="error",n.value=t}return n}t.exports=l,l.prototype.catch=function(t){return this.then(null,t)},l.prototype.then=function(t,e){if("function"!=typeof t&&this.state===s||"function"!=typeof e&&this.state===a)return this;var n=new this.constructor(i);this.state!==u?f(n,this.state===s?t:e,this.outcome):this.queue.push(new c(n,t,e));return n},c.prototype.callFulfilled=function(t){o.resolve(this.promise,t)},c.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t)},c.prototype.callRejected=function(t){o.reject(this.promise,t)},c.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t)},o.resolve=function(t,e){var n=p(d,e);if("error"===n.status)return o.reject(t,n.value);var r=n.value;if(r)h(t,r);else{t.state=s,t.outcome=e;for(var i=-1,a=t.queue.length;++i<a;)t.queue[i].callFulfilled(e)}return t},o.reject=function(t,e){t.state=a,t.outcome=e;for(var n=-1,r=t.queue.length;++n<r;)t.queue[n].callRejected(e);return t},l.resolve=function(t){if(t instanceof this)return t;return o.resolve(new this(i),t)},l.reject=function(t){var e=new this(i);return o.reject(e,t)},l.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n=t.length,r=!1;if(!n)return this.resolve([]);var a=new Array(n),s=0,u=-1,l=new this(i);for(;++u<n;)c(t[u],u);return l;function c(t,i){e.resolve(t).then(function(t){a[i]=t,++s!==n||r||(r=!0,o.resolve(l,a))},function(t){r||(r=!0,o.reject(l,t))})}},l.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var n=t.length,r=!1;if(!n)return this.resolve([]);var a=-1,s=new this(i);for(;++a<n;)u(t[a]);return s;function u(t){e.resolve(t).then(function(t){r||(r=!0,o.resolve(s,t))},function(t){r||(r=!0,o.reject(s,t))})}}},function(t,e,n){"use strict";(function(e){var n,r,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var o=0,a=new i(c),s=e.document.createTextNode("");a.observe(s,{characterData:!0}),n=function(){s.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var u=new e.MessageChannel;u.port1.onmessage=c,n=function(){u.port2.postMessage(0)}}var l=[];function c(){var t,e;r=!0;for(var n=l.length;n;){for(e=l,l=[],t=-1;++t<n;)e[t]();n=l.length}r=!1}t.exports=function(t){1!==l.push(t)||r||n()}}).call(this,n(3))},function(t,e,n){"use strict";var r=n(1),i=n(0);function o(t){r.call(this,"ConvertWorker to "+t),this.destType=t}i.inherits(o,r),o.prototype.processChunk=function(t){this.push({data:i.transformTo(this.destType,t.data),meta:t.meta})},t.exports=o},function(t,e,n){"use strict";var r=n(26).Readable;function i(t,e,n){r.call(this,e),this._helper=t;var i=this;t.on("data",function(t,e){i.push(t)||i._helper.pause(),n&&n(e)}).on("error",function(t){i.emit("error",t)}).on("end",function(){i.push(null)})}n(0).inherits(i,r),i.prototype._read=function(){this._helper.resume()},t.exports=i},function(t,e,n){"use strict";var r=n(37),i=n(39),o=n(7),a=n(22),s=n(1),u=function(t,e,n){this.name=t,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=e,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}};u.prototype={internalStream:function(t){var e=null,n="string";try{if(!t)throw new Error("No output type specified.");var i="string"===(n=t.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),e=this._decompressWorker();var a=!this._dataBinary;a&&!i&&(e=e.pipe(new o.Utf8EncodeWorker)),!a&&i&&(e=e.pipe(new o.Utf8DecodeWorker))}catch(t){(e=new s("error")).error(t)}return new r(e,n,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof a&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new o.Utf8EncodeWorker)),a.createWorkerFrom(n,t,e)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof s?this._data:new i(this._data)}};for(var l=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],c=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<l.length;f++)u.prototype[l[f]]=c;t.exports=u},function(t,e,n){"use strict";var r=n(42),i=n(106);e.generateWorker=function(t,e,n){var o=new i(e.streamFiles,n,e.platform,e.encodeFileName),a=0;try{t.forEach(function(t,n){a++;var i=function(t,e){var n=t||e,i=r[n];if(!i)throw new Error(n+" is not a valid compression method !");return i}(n.options.compression,e.compression),s=n.options.compressionOptions||e.compressionOptions||{},u=n.dir,l=n.date;n._compressWorker(i,s).withStreamInfo("file",{name:t,dir:u,date:l,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(o)}),o.entriesCount=a}catch(t){o.error(t)}return o}},function(t,e,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=n(97),o=n(0),a=n(1),s=r?"uint8array":"array";function u(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}e.magic="\b\0",o.inherits(u,a),u.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(s,t.data),!1)},u.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},e.compressWorker=function(t){return new u("Deflate",t)},e.uncompressWorker=function(){return new u("Inflate",{})}},function(t,e,n){"use strict";var r={};(0,n(5).assign)(r,n(98),n(101),n(47)),t.exports=r},function(t,e,n){"use strict";var r=n(99),i=n(5),o=n(45),a=n(24),s=n(46),u=Object.prototype.toString,l=0,c=-1,f=0,d=8;function h(t){if(!(this instanceof h))return new h(t);this.options=i.assign({level:c,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:f,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(n!==l)throw new Error(a[n]);if(e.header&&r.deflateSetHeader(this.strm,e.header),e.dictionary){var p;if(p="string"==typeof e.dictionary?o.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(n=r.deflateSetDictionary(this.strm,p))!==l)throw new Error(a[n]);this._dict_set=!0}}function p(t,e){var n=new h(e);if(n.push(t,!0),n.err)throw n.msg||a[n.err];return n.result}h.prototype.push=function(t,e){var n,a,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;a=e===~~e?e:!0===e?4:0,"string"==typeof t?s.input=o.string2buf(t):"[object ArrayBuffer]"===u.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(c),s.next_out=0,s.avail_out=c),1!==(n=r.deflate(s,a))&&n!==l)return this.onEnd(n),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===l):2!==a||(this.onEnd(l),s.avail_out=0,!0)},h.prototype.onData=function(t){this.chunks.push(t)},h.prototype.onEnd=function(t){t===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Deflate=h,e.deflate=p,e.deflateRaw=function(t,e){return(e=e||{}).raw=!0,p(t,e)},e.gzip=function(t,e){return(e=e||{}).gzip=!0,p(t,e)}},function(t,e,n){"use strict";var r,i=n(5),o=n(100),a=n(43),s=n(44),u=n(24),l=0,c=1,f=3,d=4,h=5,p=0,v=1,m=-2,g=-3,_=-5,y=-1,b=1,w=2,x=3,C=4,k=0,E=2,S=8,A=9,O=15,T=8,N=286,L=30,I=19,M=2*N+1,P=15,D=3,F=258,j=F+D+1,R=32,B=42,z=69,$=73,U=91,H=103,V=113,W=666,Y=1,Z=2,q=3,X=4,G=3;function K(t,e){return t.msg=u[e],e}function J(t){return(t<<1)-(t>4?9:0)}function Q(t){for(var e=t.length;--e>=0;)t[e]=0}function tt(t){var e=t.state,n=e.pending;n>t.avail_out&&(n=t.avail_out),0!==n&&(i.arraySet(t.output,e.pending_buf,e.pending_out,n,t.next_out),t.next_out+=n,e.pending_out+=n,t.total_out+=n,t.avail_out-=n,e.pending-=n,0===e.pending&&(e.pending_out=0))}function et(t,e){o._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,tt(t.strm)}function nt(t,e){t.pending_buf[t.pending++]=e}function rt(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function it(t,e,n,r){var o=t.avail_in;return o>r&&(o=r),0===o?0:(t.avail_in-=o,i.arraySet(e,t.input,t.next_in,o,n),1===t.state.wrap?t.adler=a(t.adler,e,o,n):2===t.state.wrap&&(t.adler=s(t.adler,e,o,n)),t.next_in+=o,t.total_in+=o,o)}function ot(t,e){var n,r,i=t.max_chain_length,o=t.strstart,a=t.prev_length,s=t.nice_match,u=t.strstart>t.w_size-j?t.strstart-(t.w_size-j):0,l=t.window,c=t.w_mask,f=t.prev,d=t.strstart+F,h=l[o+a-1],p=l[o+a];t.prev_length>=t.good_match&&(i>>=2),s>t.lookahead&&(s=t.lookahead);do{if(l[(n=e)+a]===p&&l[n+a-1]===h&&l[n]===l[o]&&l[++n]===l[o+1]){o+=2,n++;do{}while(l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&l[++o]===l[++n]&&o<d);if(r=F-(d-o),o=d-F,r>a){if(t.match_start=e,a=r,r>=s)break;h=l[o+a-1],p=l[o+a]}}}while((e=f[e&c])>u&&0!=--i);return a<=t.lookahead?a:t.lookahead}function at(t){var e,n,r,o,a,s=t.w_size;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-j)){i.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,e=n=t.hash_size;do{r=t.head[--e],t.head[e]=r>=s?r-s:0}while(--n);e=n=s;do{r=t.prev[--e],t.prev[e]=r>=s?r-s:0}while(--n);o+=s}if(0===t.strm.avail_in)break;if(n=it(t.strm,t.window,t.strstart+t.lookahead,o),t.lookahead+=n,t.lookahead+t.insert>=D)for(a=t.strstart-t.insert,t.ins_h=t.window[a],t.ins_h=(t.ins_h<<t.hash_shift^t.window[a+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[a+D-1])&t.hash_mask,t.prev[a&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=a,a++,t.insert--,!(t.lookahead+t.insert<D)););}while(t.lookahead<j&&0!==t.strm.avail_in)}function st(t,e){for(var n,r;;){if(t.lookahead<j){if(at(t),t.lookahead<j&&e===l)return Y;if(0===t.lookahead)break}if(n=0,t.lookahead>=D&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+D-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==n&&t.strstart-n<=t.w_size-j&&(t.match_length=ot(t,n)),t.match_length>=D)if(r=o._tr_tally(t,t.strstart-t.match_start,t.match_length-D),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=D){t.match_length--;do{t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+D-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else r=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(r&&(et(t,!1),0===t.strm.avail_out))return Y}return t.insert=t.strstart<D-1?t.strstart:D-1,e===d?(et(t,!0),0===t.strm.avail_out?q:X):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?Y:Z}function ut(t,e){for(var n,r,i;;){if(t.lookahead<j){if(at(t),t.lookahead<j&&e===l)return Y;if(0===t.lookahead)break}if(n=0,t.lookahead>=D&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+D-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=D-1,0!==n&&t.prev_length<t.max_lazy_match&&t.strstart-n<=t.w_size-j&&(t.match_length=ot(t,n),t.match_length<=5&&(t.strategy===b||t.match_length===D&&t.strstart-t.match_start>4096)&&(t.match_length=D-1)),t.prev_length>=D&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-D,r=o._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-D),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=i&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+D-1])&t.hash_mask,n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=D-1,t.strstart++,r&&(et(t,!1),0===t.strm.avail_out))return Y}else if(t.match_available){if((r=o._tr_tally(t,0,t.window[t.strstart-1]))&&et(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return Y}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(r=o._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<D-1?t.strstart:D-1,e===d?(et(t,!0),0===t.strm.avail_out?q:X):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?Y:Z}function lt(t,e,n,r,i){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=r,this.func=i}function ct(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=E,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?B:V,t.adler=2===e.wrap?0:1,e.last_flush=l,o._tr_init(e),p):K(t,m)}function ft(t){var e=ct(t);return e===p&&function(t){t.window_size=2*t.w_size,Q(t.head),t.max_lazy_match=r[t.level].max_lazy,t.good_match=r[t.level].good_length,t.nice_match=r[t.level].nice_length,t.max_chain_length=r[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=D-1,t.match_available=0,t.ins_h=0}(t.state),e}function dt(t,e,n,r,o,a){if(!t)return m;var s=1;if(e===y&&(e=6),r<0?(s=0,r=-r):r>15&&(s=2,r-=16),o<1||o>A||n!==S||r<8||r>15||e<0||e>9||a<0||a>C)return K(t,m);8===r&&(r=9);var u=new function(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=S,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*M),this.dyn_dtree=new i.Buf16(2*(2*L+1)),this.bl_tree=new i.Buf16(2*(2*I+1)),Q(this.dyn_ltree),Q(this.dyn_dtree),Q(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(P+1),this.heap=new i.Buf16(2*N+1),Q(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*N+1),Q(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0};return t.state=u,u.strm=t,u.wrap=s,u.gzhead=null,u.w_bits=r,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=o+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+D-1)/D),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<o+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=e,u.strategy=a,u.method=n,ft(t)}r=[new lt(0,0,0,0,function(t,e){var n=65535;for(n>t.pending_buf_size-5&&(n=t.pending_buf_size-5);;){if(t.lookahead<=1){if(at(t),0===t.lookahead&&e===l)return Y;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var r=t.block_start+n;if((0===t.strstart||t.strstart>=r)&&(t.lookahead=t.strstart-r,t.strstart=r,et(t,!1),0===t.strm.avail_out))return Y;if(t.strstart-t.block_start>=t.w_size-j&&(et(t,!1),0===t.strm.avail_out))return Y}return t.insert=0,e===d?(et(t,!0),0===t.strm.avail_out?q:X):(t.strstart>t.block_start&&(et(t,!1),t.strm.avail_out),Y)}),new lt(4,4,8,4,st),new lt(4,5,16,8,st),new lt(4,6,32,32,st),new lt(4,4,16,16,ut),new lt(8,16,32,32,ut),new lt(8,16,128,128,ut),new lt(8,32,128,256,ut),new lt(32,128,258,1024,ut),new lt(32,258,258,4096,ut)],e.deflateInit=function(t,e){return dt(t,e,S,O,T,k)},e.deflateInit2=dt,e.deflateReset=ft,e.deflateResetKeep=ct,e.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?m:(t.state.gzhead=e,p):m},e.deflate=function(t,e){var n,i,a,u;if(!t||!t.state||e>h||e<0)return t?K(t,m):m;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||i.status===W&&e!==d)return K(t,0===t.avail_out?_:m);if(i.strm=t,n=i.last_flush,i.last_flush=e,i.status===B)if(2===i.wrap)t.adler=0,nt(i,31),nt(i,139),nt(i,8),i.gzhead?(nt(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),nt(i,255&i.gzhead.time),nt(i,i.gzhead.time>>8&255),nt(i,i.gzhead.time>>16&255),nt(i,i.gzhead.time>>24&255),nt(i,9===i.level?2:i.strategy>=w||i.level<2?4:0),nt(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(nt(i,255&i.gzhead.extra.length),nt(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=s(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=z):(nt(i,0),nt(i,0),nt(i,0),nt(i,0),nt(i,0),nt(i,9===i.level?2:i.strategy>=w||i.level<2?4:0),nt(i,G),i.status=V);else{var g=S+(i.w_bits-8<<4)<<8;g|=(i.strategy>=w||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(g|=R),g+=31-g%31,i.status=V,rt(i,g),0!==i.strstart&&(rt(i,t.adler>>>16),rt(i,65535&t.adler)),t.adler=1}if(i.status===z)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),tt(t),a=i.pending,i.pending!==i.pending_buf_size));)nt(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=$)}else i.status=$;if(i.status===$)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),tt(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,nt(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.gzindex=0,i.status=U)}else i.status=U;if(i.status===U)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),tt(t),a=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,nt(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>a&&(t.adler=s(t.adler,i.pending_buf,i.pending-a,a)),0===u&&(i.status=H)}else i.status=H;if(i.status===H&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&tt(t),i.pending+2<=i.pending_buf_size&&(nt(i,255&t.adler),nt(i,t.adler>>8&255),t.adler=0,i.status=V)):i.status=V),0!==i.pending){if(tt(t),0===t.avail_out)return i.last_flush=-1,p}else if(0===t.avail_in&&J(e)<=J(n)&&e!==d)return K(t,_);if(i.status===W&&0!==t.avail_in)return K(t,_);if(0!==t.avail_in||0!==i.lookahead||e!==l&&i.status!==W){var y=i.strategy===w?function(t,e){for(var n;;){if(0===t.lookahead&&(at(t),0===t.lookahead)){if(e===l)return Y;break}if(t.match_length=0,n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,n&&(et(t,!1),0===t.strm.avail_out))return Y}return t.insert=0,e===d?(et(t,!0),0===t.strm.avail_out?q:X):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?Y:Z}(i,e):i.strategy===x?function(t,e){for(var n,r,i,a,s=t.window;;){if(t.lookahead<=F){if(at(t),t.lookahead<=F&&e===l)return Y;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=D&&t.strstart>0&&(r=s[i=t.strstart-1])===s[++i]&&r===s[++i]&&r===s[++i]){a=t.strstart+F;do{}while(r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&i<a);t.match_length=F-(a-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=D?(n=o._tr_tally(t,1,t.match_length-D),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(n=o._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),n&&(et(t,!1),0===t.strm.avail_out))return Y}return t.insert=0,e===d?(et(t,!0),0===t.strm.avail_out?q:X):t.last_lit&&(et(t,!1),0===t.strm.avail_out)?Y:Z}(i,e):r[i.level].func(i,e);if(y!==q&&y!==X||(i.status=W),y===Y||y===q)return 0===t.avail_out&&(i.last_flush=-1),p;if(y===Z&&(e===c?o._tr_align(i):e!==h&&(o._tr_stored_block(i,0,0,!1),e===f&&(Q(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),tt(t),0===t.avail_out))return i.last_flush=-1,p}return e!==d?p:i.wrap<=0?v:(2===i.wrap?(nt(i,255&t.adler),nt(i,t.adler>>8&255),nt(i,t.adler>>16&255),nt(i,t.adler>>24&255),nt(i,255&t.total_in),nt(i,t.total_in>>8&255),nt(i,t.total_in>>16&255),nt(i,t.total_in>>24&255)):(rt(i,t.adler>>>16),rt(i,65535&t.adler)),tt(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?p:v)},e.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==B&&e!==z&&e!==$&&e!==U&&e!==H&&e!==V&&e!==W?K(t,m):(t.state=null,e===V?K(t,g):p):m},e.deflateSetDictionary=function(t,e){var n,r,o,s,u,l,c,f,d=e.length;if(!t||!t.state)return m;if(2===(s=(n=t.state).wrap)||1===s&&n.status!==B||n.lookahead)return m;for(1===s&&(t.adler=a(t.adler,e,d,0)),n.wrap=0,d>=n.w_size&&(0===s&&(Q(n.head),n.strstart=0,n.block_start=0,n.insert=0),f=new i.Buf8(n.w_size),i.arraySet(f,e,d-n.w_size,n.w_size,0),e=f,d=n.w_size),u=t.avail_in,l=t.next_in,c=t.input,t.avail_in=d,t.next_in=0,t.input=e,at(n);n.lookahead>=D;){r=n.strstart,o=n.lookahead-(D-1);do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+D-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++}while(--o);n.strstart=r,n.lookahead=D-1,at(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=D-1,n.match_available=0,t.next_in=l,t.input=c,t.avail_in=u,n.wrap=s,p},e.deflateInfo="pako deflate (from Nodeca project)"},function(t,e,n){"use strict";var r=n(5),i=4,o=0,a=1,s=2;function u(t){for(var e=t.length;--e>=0;)t[e]=0}var l=0,c=1,f=2,d=29,h=256,p=h+1+d,v=30,m=19,g=2*p+1,_=15,y=16,b=7,w=256,x=16,C=17,k=18,E=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],S=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],A=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],O=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],T=new Array(2*(p+2));u(T);var N=new Array(2*v);u(N);var L=new Array(512);u(L);var I=new Array(256);u(I);var M=new Array(d);u(M);var P,D,F,j=new Array(v);function R(t,e,n,r,i){this.static_tree=t,this.extra_bits=e,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=t&&t.length}function B(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function z(t){return t<256?L[t]:L[256+(t>>>7)]}function $(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function U(t,e,n){t.bi_valid>y-n?(t.bi_buf|=e<<t.bi_valid&65535,$(t,t.bi_buf),t.bi_buf=e>>y-t.bi_valid,t.bi_valid+=n-y):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=n)}function H(t,e,n){U(t,n[2*e],n[2*e+1])}function V(t,e){var n=0;do{n|=1&t,t>>>=1,n<<=1}while(--e>0);return n>>>1}function W(t,e,n){var r,i,o=new Array(_+1),a=0;for(r=1;r<=_;r++)o[r]=a=a+n[r-1]<<1;for(i=0;i<=e;i++){var s=t[2*i+1];0!==s&&(t[2*i]=V(o[s]++,s))}}function Y(t){var e;for(e=0;e<p;e++)t.dyn_ltree[2*e]=0;for(e=0;e<v;e++)t.dyn_dtree[2*e]=0;for(e=0;e<m;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*w]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function Z(t){t.bi_valid>8?$(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function q(t,e,n,r){var i=2*e,o=2*n;return t[i]<t[o]||t[i]===t[o]&&r[e]<=r[n]}function X(t,e,n){for(var r=t.heap[n],i=n<<1;i<=t.heap_len&&(i<t.heap_len&&q(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!q(e,r,t.heap[i],t.depth));)t.heap[n]=t.heap[i],n=i,i<<=1;t.heap[n]=r}function G(t,e,n){var r,i,o,a,s=0;if(0!==t.last_lit)do{r=t.pending_buf[t.d_buf+2*s]<<8|t.pending_buf[t.d_buf+2*s+1],i=t.pending_buf[t.l_buf+s],s++,0===r?H(t,i,e):(H(t,(o=I[i])+h+1,e),0!==(a=E[o])&&U(t,i-=M[o],a),H(t,o=z(--r),n),0!==(a=S[o])&&U(t,r-=j[o],a))}while(s<t.last_lit);H(t,w,e)}function K(t,e){var n,r,i,o=e.dyn_tree,a=e.stat_desc.static_tree,s=e.stat_desc.has_stree,u=e.stat_desc.elems,l=-1;for(t.heap_len=0,t.heap_max=g,n=0;n<u;n++)0!==o[2*n]?(t.heap[++t.heap_len]=l=n,t.depth[n]=0):o[2*n+1]=0;for(;t.heap_len<2;)o[2*(i=t.heap[++t.heap_len]=l<2?++l:0)]=1,t.depth[i]=0,t.opt_len--,s&&(t.static_len-=a[2*i+1]);for(e.max_code=l,n=t.heap_len>>1;n>=1;n--)X(t,o,n);i=u;do{n=t.heap[1],t.heap[1]=t.heap[t.heap_len--],X(t,o,1),r=t.heap[1],t.heap[--t.heap_max]=n,t.heap[--t.heap_max]=r,o[2*i]=o[2*n]+o[2*r],t.depth[i]=(t.depth[n]>=t.depth[r]?t.depth[n]:t.depth[r])+1,o[2*n+1]=o[2*r+1]=i,t.heap[1]=i++,X(t,o,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],function(t,e){var n,r,i,o,a,s,u=e.dyn_tree,l=e.max_code,c=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,h=e.stat_desc.extra_base,p=e.stat_desc.max_length,v=0;for(o=0;o<=_;o++)t.bl_count[o]=0;for(u[2*t.heap[t.heap_max]+1]=0,n=t.heap_max+1;n<g;n++)(o=u[2*u[2*(r=t.heap[n])+1]+1]+1)>p&&(o=p,v++),u[2*r+1]=o,r>l||(t.bl_count[o]++,a=0,r>=h&&(a=d[r-h]),s=u[2*r],t.opt_len+=s*(o+a),f&&(t.static_len+=s*(c[2*r+1]+a)));if(0!==v){do{for(o=p-1;0===t.bl_count[o];)o--;t.bl_count[o]--,t.bl_count[o+1]+=2,t.bl_count[p]--,v-=2}while(v>0);for(o=p;0!==o;o--)for(r=t.bl_count[o];0!==r;)(i=t.heap[--n])>l||(u[2*i+1]!==o&&(t.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),r--)}}(t,e),W(o,l,t.bl_count)}function J(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,l=4;for(0===a&&(u=138,l=3),e[2*(n+1)+1]=65535,r=0;r<=n;r++)i=a,a=e[2*(r+1)+1],++s<u&&i===a||(s<l?t.bl_tree[2*i]+=s:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[2*x]++):s<=10?t.bl_tree[2*C]++:t.bl_tree[2*k]++,s=0,o=i,0===a?(u=138,l=3):i===a?(u=6,l=3):(u=7,l=4))}function Q(t,e,n){var r,i,o=-1,a=e[1],s=0,u=7,l=4;for(0===a&&(u=138,l=3),r=0;r<=n;r++)if(i=a,a=e[2*(r+1)+1],!(++s<u&&i===a)){if(s<l)do{H(t,i,t.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(H(t,i,t.bl_tree),s--),H(t,x,t.bl_tree),U(t,s-3,2)):s<=10?(H(t,C,t.bl_tree),U(t,s-3,3)):(H(t,k,t.bl_tree),U(t,s-11,7));s=0,o=i,0===a?(u=138,l=3):i===a?(u=6,l=3):(u=7,l=4)}}u(j);var tt=!1;function et(t,e,n,i){U(t,(l<<1)+(i?1:0),3),function(t,e,n,i){Z(t),i&&($(t,n),$(t,~n)),r.arraySet(t.pending_buf,t.window,e,n,t.pending),t.pending+=n}(t,e,n,!0)}e._tr_init=function(t){tt||(function(){var t,e,n,r,i,o=new Array(_+1);for(n=0,r=0;r<d-1;r++)for(M[r]=n,t=0;t<1<<E[r];t++)I[n++]=r;for(I[n-1]=r,i=0,r=0;r<16;r++)for(j[r]=i,t=0;t<1<<S[r];t++)L[i++]=r;for(i>>=7;r<v;r++)for(j[r]=i<<7,t=0;t<1<<S[r]-7;t++)L[256+i++]=r;for(e=0;e<=_;e++)o[e]=0;for(t=0;t<=143;)T[2*t+1]=8,t++,o[8]++;for(;t<=255;)T[2*t+1]=9,t++,o[9]++;for(;t<=279;)T[2*t+1]=7,t++,o[7]++;for(;t<=287;)T[2*t+1]=8,t++,o[8]++;for(W(T,p+1,o),t=0;t<v;t++)N[2*t+1]=5,N[2*t]=V(t,5);P=new R(T,E,h+1,p,_),D=new R(N,S,0,v,_),F=new R(new Array(0),A,0,m,b)}(),tt=!0),t.l_desc=new B(t.dyn_ltree,P),t.d_desc=new B(t.dyn_dtree,D),t.bl_desc=new B(t.bl_tree,F),t.bi_buf=0,t.bi_valid=0,Y(t)},e._tr_stored_block=et,e._tr_flush_block=function(t,e,n,r){var u,l,d=0;t.level>0?(t.strm.data_type===s&&(t.strm.data_type=function(t){var e,n=4093624447;for(e=0;e<=31;e++,n>>>=1)if(1&n&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return a;for(e=32;e<h;e++)if(0!==t.dyn_ltree[2*e])return a;return o}(t)),K(t,t.l_desc),K(t,t.d_desc),d=function(t){var e;for(J(t,t.dyn_ltree,t.l_desc.max_code),J(t,t.dyn_dtree,t.d_desc.max_code),K(t,t.bl_desc),e=m-1;e>=3&&0===t.bl_tree[2*O[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),u=t.opt_len+3+7>>>3,(l=t.static_len+3+7>>>3)<=u&&(u=l)):u=l=n+5,n+4<=u&&-1!==e?et(t,e,n,r):t.strategy===i||l===u?(U(t,(c<<1)+(r?1:0),3),G(t,T,N)):(U(t,(f<<1)+(r?1:0),3),function(t,e,n,r){var i;for(U(t,e-257,5),U(t,n-1,5),U(t,r-4,4),i=0;i<r;i++)U(t,t.bl_tree[2*O[i]+1],3);Q(t,t.dyn_ltree,e-1),Q(t,t.dyn_dtree,n-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,d+1),G(t,t.dyn_ltree,t.dyn_dtree)),Y(t),r&&Z(t)},e._tr_tally=function(t,e,n){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&n,t.last_lit++,0===e?t.dyn_ltree[2*n]++:(t.matches++,e--,t.dyn_ltree[2*(I[n]+h+1)]++,t.dyn_dtree[2*z(e)]++),t.last_lit===t.lit_bufsize-1},e._tr_align=function(t){U(t,c<<1,3),H(t,w,T),function(t){16===t.bi_valid?($(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},function(t,e,n){"use strict";var r=n(102),i=n(5),o=n(45),a=n(47),s=n(24),u=n(46),l=n(105),c=Object.prototype.toString;function f(t){if(!(this instanceof f))return new f(t);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,e.windowBits);if(n!==a.Z_OK)throw new Error(s[n]);this.header=new l,r.inflateGetHeader(this.strm,this.header)}function d(t,e){var n=new f(e);if(n.push(t,!0),n.err)throw n.msg||s[n.err];return n.result}f.prototype.push=function(t,e){var n,s,u,l,f,d,h=this.strm,p=this.options.chunkSize,v=this.options.dictionary,m=!1;if(this.ended)return!1;s=e===~~e?e:!0===e?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof t?h.input=o.binstring2buf(t):"[object ArrayBuffer]"===c.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new i.Buf8(p),h.next_out=0,h.avail_out=p),(n=r.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&v&&(d="string"==typeof v?o.string2buf(v):"[object ArrayBuffer]"===c.call(v)?new Uint8Array(v):v,n=r.inflateSetDictionary(this.strm,d)),n===a.Z_BUF_ERROR&&!0===m&&(n=a.Z_OK,m=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),this.ended=!0,!1;h.next_out&&(0!==h.avail_out&&n!==a.Z_STREAM_END&&(0!==h.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(u=o.utf8border(h.output,h.next_out),l=h.next_out-u,f=o.buf2string(h.output,u),h.next_out=l,h.avail_out=p-l,l&&i.arraySet(h.output,h.output,u,l,0),this.onData(f)):this.onData(i.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(m=!0)}while((h.avail_in>0||0===h.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),h.avail_out=0,!0)},f.prototype.onData=function(t){this.chunks.push(t)},f.prototype.onEnd=function(t){t===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},e.Inflate=f,e.inflate=d,e.inflateRaw=function(t,e){return(e=e||{}).raw=!0,d(t,e)},e.ungzip=d},function(t,e,n){"use strict";var r=n(5),i=n(43),o=n(44),a=n(103),s=n(104),u=0,l=1,c=2,f=4,d=5,h=6,p=0,v=1,m=2,g=-2,_=-3,y=-4,b=-5,w=8,x=1,C=2,k=3,E=4,S=5,A=6,O=7,T=8,N=9,L=10,I=11,M=12,P=13,D=14,F=15,j=16,R=17,B=18,z=19,$=20,U=21,H=22,V=23,W=24,Y=25,Z=26,q=27,X=28,G=29,K=30,J=31,Q=32,tt=852,et=592,nt=15;function rt(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function it(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=x,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new r.Buf32(tt),e.distcode=e.distdyn=new r.Buf32(et),e.sane=1,e.back=-1,p):g}function ot(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,it(t)):g}function at(t,e){var n,r;return t&&t.state?(r=t.state,e<0?(n=0,e=-e):(n=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?g:(null!==r.window&&r.wbits!==e&&(r.window=null),r.wrap=n,r.wbits=e,ot(t))):g}function st(t,e){var n,i;return t?(i=new function(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0},t.state=i,i.window=null,(n=at(t,e))!==p&&(t.state=null),n):g}var ut,lt,ct=!0;function ft(t){if(ct){var e;for(ut=new r.Buf32(512),lt=new r.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(s(l,t.lens,0,288,ut,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;s(c,t.lens,0,32,lt,0,t.work,{bits:5}),ct=!1}t.lencode=ut,t.lenbits=9,t.distcode=lt,t.distbits=5}function dt(t,e,n,i){var o,a=t.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),i>=a.wsize?(r.arraySet(a.window,e,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((o=a.wsize-a.wnext)>i&&(o=i),r.arraySet(a.window,e,n-i,o,a.wnext),(i-=o)?(r.arraySet(a.window,e,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}e.inflateReset=ot,e.inflateReset2=at,e.inflateResetKeep=it,e.inflateInit=function(t){return st(t,nt)},e.inflateInit2=st,e.inflate=function(t,e){var n,tt,et,nt,it,ot,at,st,ut,lt,ct,ht,pt,vt,mt,gt,_t,yt,bt,wt,xt,Ct,kt,Et,St=0,At=new r.Buf8(4),Ot=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return g;(n=t.state).mode===M&&(n.mode=P),it=t.next_out,et=t.output,at=t.avail_out,nt=t.next_in,tt=t.input,ot=t.avail_in,st=n.hold,ut=n.bits,lt=ot,ct=at,Ct=p;t:for(;;)switch(n.mode){case x:if(0===n.wrap){n.mode=P;break}for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(2&n.wrap&&35615===st){n.check=0,At[0]=255&st,At[1]=st>>>8&255,n.check=o(n.check,At,2,0),st=0,ut=0,n.mode=C;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&st)<<8)+(st>>8))%31){t.msg="incorrect header check",n.mode=K;break}if((15&st)!==w){t.msg="unknown compression method",n.mode=K;break}if(ut-=4,xt=8+(15&(st>>>=4)),0===n.wbits)n.wbits=xt;else if(xt>n.wbits){t.msg="invalid window size",n.mode=K;break}n.dmax=1<<xt,t.adler=n.check=1,n.mode=512&st?L:M,st=0,ut=0;break;case C:for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(n.flags=st,(255&n.flags)!==w){t.msg="unknown compression method",n.mode=K;break}if(57344&n.flags){t.msg="unknown header flags set",n.mode=K;break}n.head&&(n.head.text=st>>8&1),512&n.flags&&(At[0]=255&st,At[1]=st>>>8&255,n.check=o(n.check,At,2,0)),st=0,ut=0,n.mode=k;case k:for(;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.head&&(n.head.time=st),512&n.flags&&(At[0]=255&st,At[1]=st>>>8&255,At[2]=st>>>16&255,At[3]=st>>>24&255,n.check=o(n.check,At,4,0)),st=0,ut=0,n.mode=E;case E:for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.head&&(n.head.xflags=255&st,n.head.os=st>>8),512&n.flags&&(At[0]=255&st,At[1]=st>>>8&255,n.check=o(n.check,At,2,0)),st=0,ut=0,n.mode=S;case S:if(1024&n.flags){for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.length=st,n.head&&(n.head.extra_len=st),512&n.flags&&(At[0]=255&st,At[1]=st>>>8&255,n.check=o(n.check,At,2,0)),st=0,ut=0}else n.head&&(n.head.extra=null);n.mode=A;case A:if(1024&n.flags&&((ht=n.length)>ot&&(ht=ot),ht&&(n.head&&(xt=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,tt,nt,ht,xt)),512&n.flags&&(n.check=o(n.check,tt,ht,nt)),ot-=ht,nt+=ht,n.length-=ht),n.length))break t;n.length=0,n.mode=O;case O:if(2048&n.flags){if(0===ot)break t;ht=0;do{xt=tt[nt+ht++],n.head&&xt&&n.length<65536&&(n.head.name+=String.fromCharCode(xt))}while(xt&&ht<ot);if(512&n.flags&&(n.check=o(n.check,tt,ht,nt)),ot-=ht,nt+=ht,xt)break t}else n.head&&(n.head.name=null);n.length=0,n.mode=T;case T:if(4096&n.flags){if(0===ot)break t;ht=0;do{xt=tt[nt+ht++],n.head&&xt&&n.length<65536&&(n.head.comment+=String.fromCharCode(xt))}while(xt&&ht<ot);if(512&n.flags&&(n.check=o(n.check,tt,ht,nt)),ot-=ht,nt+=ht,xt)break t}else n.head&&(n.head.comment=null);n.mode=N;case N:if(512&n.flags){for(;ut<16;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(st!==(65535&n.check)){t.msg="header crc mismatch",n.mode=K;break}st=0,ut=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),t.adler=n.check=0,n.mode=M;break;case L:for(;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}t.adler=n.check=rt(st),st=0,ut=0,n.mode=I;case I:if(0===n.havedict)return t.next_out=it,t.avail_out=at,t.next_in=nt,t.avail_in=ot,n.hold=st,n.bits=ut,m;t.adler=n.check=1,n.mode=M;case M:if(e===d||e===h)break t;case P:if(n.last){st>>>=7&ut,ut-=7&ut,n.mode=q;break}for(;ut<3;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}switch(n.last=1&st,ut-=1,3&(st>>>=1)){case 0:n.mode=D;break;case 1:if(ft(n),n.mode=$,e===h){st>>>=2,ut-=2;break t}break;case 2:n.mode=R;break;case 3:t.msg="invalid block type",n.mode=K}st>>>=2,ut-=2;break;case D:for(st>>>=7&ut,ut-=7&ut;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if((65535&st)!=(st>>>16^65535)){t.msg="invalid stored block lengths",n.mode=K;break}if(n.length=65535&st,st=0,ut=0,n.mode=F,e===h)break t;case F:n.mode=j;case j:if(ht=n.length){if(ht>ot&&(ht=ot),ht>at&&(ht=at),0===ht)break t;r.arraySet(et,tt,nt,ht,it),ot-=ht,nt+=ht,at-=ht,it+=ht,n.length-=ht;break}n.mode=M;break;case R:for(;ut<14;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(n.nlen=257+(31&st),st>>>=5,ut-=5,n.ndist=1+(31&st),st>>>=5,ut-=5,n.ncode=4+(15&st),st>>>=4,ut-=4,n.nlen>286||n.ndist>30){t.msg="too many length or distance symbols",n.mode=K;break}n.have=0,n.mode=B;case B:for(;n.have<n.ncode;){for(;ut<3;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.lens[Ot[n.have++]]=7&st,st>>>=3,ut-=3}for(;n.have<19;)n.lens[Ot[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,kt={bits:n.lenbits},Ct=s(u,n.lens,0,19,n.lencode,0,n.work,kt),n.lenbits=kt.bits,Ct){t.msg="invalid code lengths set",n.mode=K;break}n.have=0,n.mode=z;case z:for(;n.have<n.nlen+n.ndist;){for(;gt=(St=n.lencode[st&(1<<n.lenbits)-1])>>>16&255,_t=65535&St,!((mt=St>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(_t<16)st>>>=mt,ut-=mt,n.lens[n.have++]=_t;else{if(16===_t){for(Et=mt+2;ut<Et;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(st>>>=mt,ut-=mt,0===n.have){t.msg="invalid bit length repeat",n.mode=K;break}xt=n.lens[n.have-1],ht=3+(3&st),st>>>=2,ut-=2}else if(17===_t){for(Et=mt+3;ut<Et;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}ut-=mt,xt=0,ht=3+(7&(st>>>=mt)),st>>>=3,ut-=3}else{for(Et=mt+7;ut<Et;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}ut-=mt,xt=0,ht=11+(127&(st>>>=mt)),st>>>=7,ut-=7}if(n.have+ht>n.nlen+n.ndist){t.msg="invalid bit length repeat",n.mode=K;break}for(;ht--;)n.lens[n.have++]=xt}}if(n.mode===K)break;if(0===n.lens[256]){t.msg="invalid code -- missing end-of-block",n.mode=K;break}if(n.lenbits=9,kt={bits:n.lenbits},Ct=s(l,n.lens,0,n.nlen,n.lencode,0,n.work,kt),n.lenbits=kt.bits,Ct){t.msg="invalid literal/lengths set",n.mode=K;break}if(n.distbits=6,n.distcode=n.distdyn,kt={bits:n.distbits},Ct=s(c,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,kt),n.distbits=kt.bits,Ct){t.msg="invalid distances set",n.mode=K;break}if(n.mode=$,e===h)break t;case $:n.mode=U;case U:if(ot>=6&&at>=258){t.next_out=it,t.avail_out=at,t.next_in=nt,t.avail_in=ot,n.hold=st,n.bits=ut,a(t,ct),it=t.next_out,et=t.output,at=t.avail_out,nt=t.next_in,tt=t.input,ot=t.avail_in,st=n.hold,ut=n.bits,n.mode===M&&(n.back=-1);break}for(n.back=0;gt=(St=n.lencode[st&(1<<n.lenbits)-1])>>>16&255,_t=65535&St,!((mt=St>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(gt&&0==(240&gt)){for(yt=mt,bt=gt,wt=_t;gt=(St=n.lencode[wt+((st&(1<<yt+bt)-1)>>yt)])>>>16&255,_t=65535&St,!(yt+(mt=St>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}st>>>=yt,ut-=yt,n.back+=yt}if(st>>>=mt,ut-=mt,n.back+=mt,n.length=_t,0===gt){n.mode=Z;break}if(32&gt){n.back=-1,n.mode=M;break}if(64&gt){t.msg="invalid literal/length code",n.mode=K;break}n.extra=15&gt,n.mode=H;case H:if(n.extra){for(Et=n.extra;ut<Et;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.length+=st&(1<<n.extra)-1,st>>>=n.extra,ut-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=V;case V:for(;gt=(St=n.distcode[st&(1<<n.distbits)-1])>>>16&255,_t=65535&St,!((mt=St>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(0==(240&gt)){for(yt=mt,bt=gt,wt=_t;gt=(St=n.distcode[wt+((st&(1<<yt+bt)-1)>>yt)])>>>16&255,_t=65535&St,!(yt+(mt=St>>>24)<=ut);){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}st>>>=yt,ut-=yt,n.back+=yt}if(st>>>=mt,ut-=mt,n.back+=mt,64&gt){t.msg="invalid distance code",n.mode=K;break}n.offset=_t,n.extra=15&gt,n.mode=W;case W:if(n.extra){for(Et=n.extra;ut<Et;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}n.offset+=st&(1<<n.extra)-1,st>>>=n.extra,ut-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){t.msg="invalid distance too far back",n.mode=K;break}n.mode=Y;case Y:if(0===at)break t;if(ht=ct-at,n.offset>ht){if((ht=n.offset-ht)>n.whave&&n.sane){t.msg="invalid distance too far back",n.mode=K;break}ht>n.wnext?(ht-=n.wnext,pt=n.wsize-ht):pt=n.wnext-ht,ht>n.length&&(ht=n.length),vt=n.window}else vt=et,pt=it-n.offset,ht=n.length;ht>at&&(ht=at),at-=ht,n.length-=ht;do{et[it++]=vt[pt++]}while(--ht);0===n.length&&(n.mode=U);break;case Z:if(0===at)break t;et[it++]=n.length,at--,n.mode=U;break;case q:if(n.wrap){for(;ut<32;){if(0===ot)break t;ot--,st|=tt[nt++]<<ut,ut+=8}if(ct-=at,t.total_out+=ct,n.total+=ct,ct&&(t.adler=n.check=n.flags?o(n.check,et,ct,it-ct):i(n.check,et,ct,it-ct)),ct=at,(n.flags?st:rt(st))!==n.check){t.msg="incorrect data check",n.mode=K;break}st=0,ut=0}n.mode=X;case X:if(n.wrap&&n.flags){for(;ut<32;){if(0===ot)break t;ot--,st+=tt[nt++]<<ut,ut+=8}if(st!==(4294967295&n.total)){t.msg="incorrect length check",n.mode=K;break}st=0,ut=0}n.mode=G;case G:Ct=v;break t;case K:Ct=_;break t;case J:return y;case Q:default:return g}return t.next_out=it,t.avail_out=at,t.next_in=nt,t.avail_in=ot,n.hold=st,n.bits=ut,(n.wsize||ct!==t.avail_out&&n.mode<K&&(n.mode<q||e!==f))&&dt(t,t.output,t.next_out,ct-t.avail_out)?(n.mode=J,y):(lt-=t.avail_in,ct-=t.avail_out,t.total_in+=lt,t.total_out+=ct,n.total+=ct,n.wrap&&ct&&(t.adler=n.check=n.flags?o(n.check,et,ct,t.next_out-ct):i(n.check,et,ct,t.next_out-ct)),t.data_type=n.bits+(n.last?64:0)+(n.mode===M?128:0)+(n.mode===$||n.mode===F?256:0),(0===lt&&0===ct||e===f)&&Ct===p&&(Ct=b),Ct)},e.inflateEnd=function(t){if(!t||!t.state)return g;var e=t.state;return e.window&&(e.window=null),t.state=null,p},e.inflateGetHeader=function(t,e){var n;return t&&t.state?0==(2&(n=t.state).wrap)?g:(n.head=e,e.done=!1,p):g},e.inflateSetDictionary=function(t,e){var n,r=e.length;return t&&t.state?0!==(n=t.state).wrap&&n.mode!==I?g:n.mode===I&&i(1,e,r,0)!==n.check?_:dt(t,e,r,r)?(n.mode=J,y):(n.havedict=1,p):g},e.inflateInfo="pako inflate (from Nodeca project)"},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,i,o,a,s,u,l,c,f,d,h,p,v,m,g,_,y,b,w,x,C,k,E,S;n=t.state,r=t.next_in,E=t.input,i=r+(t.avail_in-5),o=t.next_out,S=t.output,a=o-(e-t.avail_out),s=o+(t.avail_out-257),u=n.dmax,l=n.wsize,c=n.whave,f=n.wnext,d=n.window,h=n.hold,p=n.bits,v=n.lencode,m=n.distcode,g=(1<<n.lenbits)-1,_=(1<<n.distbits)-1;t:do{p<15&&(h+=E[r++]<<p,p+=8,h+=E[r++]<<p,p+=8),y=v[h&g];e:for(;;){if(h>>>=b=y>>>24,p-=b,0===(b=y>>>16&255))S[o++]=65535&y;else{if(!(16&b)){if(0==(64&b)){y=v[(65535&y)+(h&(1<<b)-1)];continue e}if(32&b){n.mode=12;break t}t.msg="invalid literal/length code",n.mode=30;break t}w=65535&y,(b&=15)&&(p<b&&(h+=E[r++]<<p,p+=8),w+=h&(1<<b)-1,h>>>=b,p-=b),p<15&&(h+=E[r++]<<p,p+=8,h+=E[r++]<<p,p+=8),y=m[h&_];n:for(;;){if(h>>>=b=y>>>24,p-=b,!(16&(b=y>>>16&255))){if(0==(64&b)){y=m[(65535&y)+(h&(1<<b)-1)];continue n}t.msg="invalid distance code",n.mode=30;break t}if(x=65535&y,p<(b&=15)&&(h+=E[r++]<<p,(p+=8)<b&&(h+=E[r++]<<p,p+=8)),(x+=h&(1<<b)-1)>u){t.msg="invalid distance too far back",n.mode=30;break t}if(h>>>=b,p-=b,x>(b=o-a)){if((b=x-b)>c&&n.sane){t.msg="invalid distance too far back",n.mode=30;break t}if(C=0,k=d,0===f){if(C+=l-b,b<w){w-=b;do{S[o++]=d[C++]}while(--b);C=o-x,k=S}}else if(f<b){if(C+=l+f-b,(b-=f)<w){w-=b;do{S[o++]=d[C++]}while(--b);if(C=0,f<w){w-=b=f;do{S[o++]=d[C++]}while(--b);C=o-x,k=S}}}else if(C+=f-b,b<w){w-=b;do{S[o++]=d[C++]}while(--b);C=o-x,k=S}for(;w>2;)S[o++]=k[C++],S[o++]=k[C++],S[o++]=k[C++],w-=3;w&&(S[o++]=k[C++],w>1&&(S[o++]=k[C++]))}else{C=o-x;do{S[o++]=S[C++],S[o++]=S[C++],S[o++]=S[C++],w-=3}while(w>2);w&&(S[o++]=S[C++],w>1&&(S[o++]=S[C++]))}break}}break}}while(r<i&&o<s);r-=w=p>>3,h&=(1<<(p-=w<<3))-1,t.next_in=r,t.next_out=o,t.avail_in=r<i?i-r+5:5-(r-i),t.avail_out=o<s?s-o+257:257-(o-s),n.hold=h,n.bits=p}},function(t,e,n){"use strict";var r=n(5),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(t,e,n,u,l,c,f,d){var h,p,v,m,g,_,y,b,w,x=d.bits,C=0,k=0,E=0,S=0,A=0,O=0,T=0,N=0,L=0,I=0,M=null,P=0,D=new r.Buf16(16),F=new r.Buf16(16),j=null,R=0;for(C=0;C<=15;C++)D[C]=0;for(k=0;k<u;k++)D[e[n+k]]++;for(A=x,S=15;S>=1&&0===D[S];S--);if(A>S&&(A=S),0===S)return l[c++]=20971520,l[c++]=20971520,d.bits=1,0;for(E=1;E<S&&0===D[E];E++);for(A<E&&(A=E),N=1,C=1;C<=15;C++)if(N<<=1,(N-=D[C])<0)return-1;if(N>0&&(0===t||1!==S))return-1;for(F[1]=0,C=1;C<15;C++)F[C+1]=F[C]+D[C];for(k=0;k<u;k++)0!==e[n+k]&&(f[F[e[n+k]]++]=k);if(0===t?(M=j=f,_=19):1===t?(M=i,P-=257,j=o,R-=257,_=256):(M=a,j=s,_=-1),I=0,k=0,C=E,g=c,O=A,T=0,v=-1,m=(L=1<<A)-1,1===t&&L>852||2===t&&L>592)return 1;for(;;){y=C-T,f[k]<_?(b=0,w=f[k]):f[k]>_?(b=j[R+f[k]],w=M[P+f[k]]):(b=96,w=0),h=1<<C-T,E=p=1<<O;do{l[g+(I>>T)+(p-=h)]=y<<24|b<<16|w|0}while(0!==p);for(h=1<<C-1;I&h;)h>>=1;if(0!==h?(I&=h-1,I+=h):I=0,k++,0==--D[C]){if(C===S)break;C=e[n+f[k]]}if(C>A&&(I&m)!==v){for(0===T&&(T=A),g+=E,N=1<<(O=C-T);O+T<S&&!((N-=D[O+T])<=0);)O++,N<<=1;if(L+=1<<O,1===t&&L>852||2===t&&L>592)return 1;l[v=I&m]=A<<24|O<<16|g-c|0}}return 0!==I&&(l[g+I]=C-T<<24|64<<16|0),d.bits=A,0}},function(t,e,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},function(t,e,n){"use strict";var r=n(0),i=n(1),o=n(7),a=n(23),s=n(48),u=function(t,e){var n,r="";for(n=0;n<e;n++)r+=String.fromCharCode(255&t),t>>>=8;return r},l=function(t,e,n,i,l,c){var f,d,h=t.file,p=t.compression,v=c!==o.utf8encode,m=r.transformTo("string",c(h.name)),g=r.transformTo("string",o.utf8encode(h.name)),_=h.comment,y=r.transformTo("string",c(_)),b=r.transformTo("string",o.utf8encode(_)),w=g.length!==h.name.length,x=b.length!==_.length,C="",k="",E="",S=h.dir,A=h.date,O={crc32:0,compressedSize:0,uncompressedSize:0};e&&!n||(O.crc32=t.crc32,O.compressedSize=t.compressedSize,O.uncompressedSize=t.uncompressedSize);var T=0;e&&(T|=8),v||!w&&!x||(T|=2048);var N=0,L=0;S&&(N|=16),"UNIX"===l?(L=798,N|=function(t,e){var n=t;return t||(n=e?16893:33204),(65535&n)<<16}(h.unixPermissions,S)):(L=20,N|=function(t,e){return 63&(t||0)}(h.dosPermissions)),f=A.getUTCHours(),f<<=6,f|=A.getUTCMinutes(),f<<=5,f|=A.getUTCSeconds()/2,d=A.getUTCFullYear()-1980,d<<=4,d|=A.getUTCMonth()+1,d<<=5,d|=A.getUTCDate(),w&&(k=u(1,1)+u(a(m),4)+g,C+="up"+u(k.length,2)+k),x&&(E=u(1,1)+u(a(y),4)+b,C+="uc"+u(E.length,2)+E);var I="";return I+="\n\0",I+=u(T,2),I+=p.magic,I+=u(f,2),I+=u(d,2),I+=u(O.crc32,4),I+=u(O.compressedSize,4),I+=u(O.uncompressedSize,4),I+=u(m.length,2),I+=u(C.length,2),{fileRecord:s.LOCAL_FILE_HEADER+I+m+C,dirRecord:s.CENTRAL_FILE_HEADER+u(L,2)+I+u(y.length,2)+"\0\0\0\0"+u(N,4)+u(i,4)+m+C+y}};function c(t,e,n,r){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=n,this.encodeFileName=r,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}r.inherits(c,i),c.prototype.push=function(t){var e=t.meta.percent||0,n=this.entriesCount,r=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,i.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:n?(e+100*(n-r-1))/n:100}}))},c.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var n=l(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},c.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,n=l(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),e)this.push({data:function(t){return s.DATA_DESCRIPTOR+u(t.crc32,4)+u(t.compressedSize,4)+u(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},c.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var n=this.bytesWritten-t,i=function(t,e,n,i,o){var a=r.transformTo("string",o(i));return s.CENTRAL_DIRECTORY_END+"\0\0\0\0"+u(t,2)+u(t,2)+u(e,4)+u(n,4)+u(a.length,2)+a}(this.dirRecords.length,n,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},c.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},c.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()}),t.on("error",function(t){e.error(t)}),this},c.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},c.prototype.error=function(t){var e=this._sources;if(!i.prototype.error.call(this,t))return!1;for(var n=0;n<e.length;n++)try{e[n].error(t)}catch(t){}return!0},c.prototype.lock=function(){i.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},t.exports=c},function(t,e,n){"use strict";var r=n(0),i=n(1);function o(t,e){i.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}r.inherits(o,i),o.prototype._bindStream=function(t){var e=this;this._stream=t,t.pause(),t.on("data",function(t){e.push({data:t,meta:{percent:0}})}).on("error",function(t){e.isPaused?this.generatedError=t:e.error(t)}).on("end",function(){e.isPaused?e._upstreamEnded=!0:e.end()})},o.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},function(t,e,n){"use strict";var r=n(0),i=n(11),o=n(7),a=(r=n(0),n(109)),s=n(41),u=n(15);function l(t){return new i.Promise(function(e,n){var r=t.decompressed.getContentWorker().pipe(new s);r.on("error",function(t){n(t)}).on("end",function(){r.streamInfo.crc32!==t.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):e()}).resume()})}t.exports=function(t,e){var n=this;return e=r.extend(e||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",t,!0,e.optimizedBinaryString,e.base64).then(function(t){var n=new a(e);return n.load(t),n}).then(function(t){var n=[i.Promise.resolve(t)],r=t.files;if(e.checkCRC32)for(var o=0;o<r.length;o++)n.push(l(r[o]));return i.Promise.all(n)}).then(function(t){for(var r=t.shift(),i=r.files,o=0;o<i.length;o++){var a=i[o];n.file(a.fileNameStr,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:e.createFolders})}return r.zipComment.length&&(n.comment=r.zipComment),n})}},function(t,e,n){"use strict";var r=n(49),i=n(0),o=n(48),a=n(112),s=(n(7),n(4));function u(t){this.files=[],this.loadOptions=t}u.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(e)+", expected "+i.pretty(t)+")")}},isSignature:function(t,e){var n=this.reader.index;this.reader.setIndex(t);var r=this.reader.readString(4)===e;return this.reader.setIndex(n),r},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=s.uint8array?"uint8array":"array",n=i.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,n,r=this.zip64EndOfCentralSize-44;0<r;)t=this.reader.readInt(2),e=this.reader.readInt(4),n=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(t<0)throw!this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(t);var e=t;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var r=e-n;if(r>0)this.isSignature(e,o.CENTRAL_FILE_HEADER)||(this.reader.zero=r);else if(r<0)throw new Error("Corrupted zip: missing "+Math.abs(r)+" bytes.")},prepareReader:function(t){this.reader=r(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},function(t,e,n){"use strict";var r=n(51);function i(t){r.call(this,t)}n(0).inherits(i,r),i.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},i.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},i.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){"use strict";var r=n(52);function i(t){r.call(this,t)}n(0).inherits(i,r),i.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},t.exports=i},function(t,e,n){"use strict";var r=n(49),i=n(0),o=n(22),a=n(23),s=n(7),u=n(42),l=n(4);function c(t,e){this.options=t,this.loadOptions=e}c.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,n;if(t.skip(22),this.fileNameLength=t.readInt(2),n=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in u)if(u.hasOwnProperty(e)&&u[e].magic===t)return u[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0===t&&(this.dosPermissions=63&this.externalFileAttributes),3===t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=r(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,n,r,i=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index<i;)e=t.readInt(2),n=t.readInt(2),r=t.readData(n),this.extraFields[e]={id:e,length:n,value:r}},handleUTF8:function(){var t=l.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var n=i.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var r=this.findExtraFieldUnicodeComment();if(null!==r)this.fileCommentStr=r;else{var o=i.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=r(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=r(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:s.utf8decode(e.readData(t.length-5))}return null}},t.exports=c},function(t){t.exports={v:"2.0.0",length:3,resolution:100,params:{"bg-height0":{nodes:[{time:0,value:1,out:{time:.14092664092664098,value:0}},{time:1,value:.1,in:{time:-.8648648648648647,value:0},out:{time:0,value:0}},{time:2.5,value:.1,in:{time:0,value:0},out:{time:.5,value:0}},{time:3,value:-.2,in:{time:0,value:0}}],fxs:[]},"bg-height1":{nodes:[{time:0,value:1,out:{time:0,value:0}},{time:.2,value:1,in:{time:0,value:0},out:{time:.216216216216216,value:0}},{time:1,value:.30000000000000004,in:{time:-.5,value:0},out:{time:0,value:0}},{time:2.5,value:.30000000000000004,in:{time:0,value:0},out:{time:.5,value:0}},{time:3,value:.1,in:{time:0,value:0}}],fxs:[]},"shade-y":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:.6000000000000001,value:0,in:{time:0,value:0},out:{time:.2915057915057915,value:0}},{time:1.2536679536679538,value:.17,in:{time:-.5,value:0},out:{time:0,value:0}},{time:2.7,value:.17,in:{time:0,value:0},out:{time:.1,value:0}},{time:3,value:0,in:{time:-.1,value:0}}],fxs:[]},"shade-x":{nodes:[{time:0,value:0,out:{time:.5,value:0}},{time:3,value:-1,in:{time:-1.5945945945945947,value:0}}],fxs:[{time:0,length:3,row:0,def:"mod",params:{d:.285714286}}]},"clouds-height":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:.30000000000000004,value:0,in:{time:0,value:0},out:{time:.08880308880308907,value:0}},{time:.6000000000000001,value:.2,in:{time:-.20463320463320445,value:0},out:{time:.1293436293436292,value:0}},{time:1,value:1,in:{time:-.2972972972972969,value:0},out:{time:0,value:0}},{time:2.5,value:1,in:{time:0,value:0},out:{time:.22779922779922757,value:0}},{time:3,value:0,in:{time:0,value:0}}],fxs:[]},"clouds-left":{nodes:[{time:0,value:-.5,out:{time:0,value:0}},{time:.30000000000000004,value:-.5,in:{time:0,value:0},out:{time:.24,value:0}},{time:.8,value:0,in:{time:-.25096525096525113,value:0},out:{time:.5,value:0}},{time:2.5,value:0,in:{time:0,value:0},out:{time:.5,value:0}},{time:3,value:1,in:{time:-.4015444015444025,value:-.036764705882353255}}],fxs:[]},"clouds-right":{nodes:[{time:0,value:-.5,out:{time:0,value:0}},{time:.30000000000000004,value:-.5,in:{time:0,value:0},out:{time:.11776061776061786,value:0}},{time:.8,value:1,in:{time:-.5,value:0},out:{time:0,value:0}},{time:3,value:1,in:{time:0,value:0}}],fxs:[]},"bg-blend":{nodes:[{time:0,value:0,out:{time:.1930501930501929,value:0}},{time:.6312741312741312,value:1,in:{time:-.5,value:0},out:{time:.5,value:0}},{time:2.5,value:1,in:{time:-.5,value:0},out:{time:.24517374517374524,value:0}},{time:3,value:0,in:{time:0,value:0}}],fxs:[]},"ocean-blend":{nodes:[{time:0,value:0,out:{time:.5,value:0}},{time:1,value:1,in:{time:-.5,value:0},out:{time:0,value:0}},{time:2.5,value:1,in:{time:0,value:0},out:{time:.3494208494208495,value:0}},{time:3,value:0,in:{time:0,value:0}}],fxs:[]},"ocean-height":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:.30000000000000004,value:0,in:{time:0,value:0},out:{time:.2509652509652509,value:0}},{time:1,value:.35,in:{time:-.39575289575289596,value:0},out:{time:0,value:0}},{time:2.5,value:.35,in:{time:0,value:0},out:{time:.5,value:0}},{time:3,value:.2,in:{time:0,value:0}}],fxs:[{time:0,length:3,row:0,def:"sine",params:{amp:.01,freq:1.5,phase:.36}}]},"sun-angle0":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:.2,value:0,in:{time:-.5,value:0},out:{time:.5,value:0}},{time:1,value:.5,in:{time:-.5,value:0},out:{time:.5,value:0}},{time:3,value:.5,in:{time:0,value:0}}],fxs:[]},"sun-angle1":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:.2,value:0,in:{time:-.5,value:0},out:{time:.5,value:0}},{time:1,value:1.5,in:{time:-.5,value:0},out:{time:0,value:0}},{time:2,value:1.5,in:{time:0,value:0},out:{time:0,value:0}},{time:2,value:.5,in:{time:0,value:0},out:{time:0,value:0}},{time:3,value:.5,in:{time:0,value:0}}],fxs:[]},"sun-size":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:.8,value:0,in:{time:0,value:0},out:{time:.12355212355212375,value:0}},{time:1.2000000000000002,value:1,in:{time:-.4073359073359071,value:0},out:{time:0,value:0}},{time:2.5,value:1,in:{time:0,value:0},out:{time:.5,value:0}},{time:3,value:0,in:{time:0,value:0}}],fxs:[]},"sun-ray0":{nodes:[{time:0,value:.2,out:{time:0,value:0}},{time:1,value:.2,in:{time:0,value:0},out:{time:.8011583011583014,value:0}},{time:1.7000000000000002,value:.7000000000000001,in:{time:-.12355212355212353,value:0},out:{time:0,value:0}},{time:3,value:.7000000000000001,in:{time:0,value:0}}],fxs:[{time:1,length:2,row:0,def:"repeat",params:{duration:.7}}]},"sun-ray1":{nodes:[{time:0,value:.2,out:{time:.11776061776061764,value:0}},{time:1,value:.2,in:{time:-.5,value:0},out:{time:.10038610038610063,value:0}},{time:1.7000000000000002,value:.7000000000000001,in:{time:-.696911196911197,value:0},out:{time:0,value:0}},{time:3,value:.7000000000000001,in:{time:0,value:0}}],fxs:[{time:1,length:2,row:0,def:"repeat",params:{duration:.7}}]},"sun-sizeI":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:1,value:0,in:{time:0,value:0},out:{time:.10617760617760608,value:0}},{time:1.3,value:1,in:{time:-.29150579150579126,value:0},out:{time:0,value:0}},{time:3,value:1,in:{time:0,value:0},out:{time:0,value:0}},{time:3,value:0,in:{time:0,value:0}}],fxs:[]},"sun-rayT":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:3,value:.30000000000000004,in:{time:0,value:0}}],fxs:[]},"table-x":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:.6000000000000001,value:0,in:{time:0,value:0},out:{time:.15250965250965254,value:0}},{time:1.3,value:.45,in:{time:-.5,value:0},out:{time:.5,value:0}},{time:3,value:.45,in:{time:-.5,value:0}}],fxs:[]},"table-y":{nodes:[{time:0,value:.88,out:{time:0,value:0}},{time:2.5,value:.88,in:{time:0,value:0},out:{time:.3725868725868722,value:0}},{time:3,value:1.4000000000000001,in:{time:0,value:0}}],fxs:[]},"cocktail-fluid":{nodes:[{time:0,value:0,out:{time:0,value:0}},{time:1.1,value:4.3,in:{time:-.22779922779922757,value:-1.7743159510727873},out:{time:.22779922779922757,value:1.7743159510727873}},{time:2.5,value:23.400000000000002,in:{time:-.9885901078138916,value:-5.422816917701923},out:{time:.20063697786613632,value:1.1005750404432497}},{time:3,value:32.800000000000004,in:{time:0,value:0}}],fxs:[]},"cocktail-rotate":{nodes:[{time:0,value:-.30000000000000004,out:{time:.8532818532818536,value:0}},{time:1.3,value:0,in:{time:-.17567567567567566,value:-.3897058823529411},out:{time:.17567567567567566,value:.3897058823529411}},{time:3,value:0,in:{time:0,value:0}}],fxs:[{time:0,length:3,row:0,def:"cds",params:{factor:880,ratio:.22,preserve:!1}}]}},guiSettings:{snapActive:!0,snapTime:.1,snapValue:.1}}},function(t,e,n){"use strict";n.r(e);n(55);var r=n(53),i=n.n(r),o=n(54),a=n.n(o);const s={triangleStripQuad:[-1,-1,1,-1,-1,1,1,1],triangleStripQuad3:[-1,-1,0,1,-1,0,-1,1,0,1,1,0],triangleStripQuadNor:[0,0,1,0,0,1,0,0,1,0,0,1],triangleStripQuadUV:[0,0,1,0,0,1,1,1],shuffleArrayD:(t,e)=>{const n=e||(()=>Math.random());for(let e=0;e<t.length-1;e++){const r=e+Math.floor(n()*(t.length-e)),i=t[r];t[r]=t[e],t[e]=i}return t},triIndexToLineIndex:t=>{let e=[];for(let n=0;n<t.length/3;n++){const r=3*n;e.push(t[r],t[r+1],t[r+1],t[r+2],t[r+2],t[r])}return e},matrix2d:(t,e)=>{let n=[];for(let r=0;r<e;r++)for(let e=0;e<t;e++)n.push(e,r);return n},lerp:(t,e,n)=>t+(e-t)*n,clamp:(t,e,n)=>Math.min(Math.max(t,e),n),saturate:t=>Math.min(Math.max(t,0),1),linearstep:(t,e,n)=>s.saturate((n-t)/(e-t)),smoothstep:(t,e,n)=>{const r=s.linearstep(t,e,n);return r*r*(3-2*r)},mod:(t,e)=>t-Math.floor(t/e)*e,lofi:(t,e)=>Math.floor(t/e)*e,lofir:(t,e)=>Math.floor(t/e+.5)*e,ExpSmooth:class{constructor(t){this.factor=t,this.value=0}update(t,e){return this.value=s.lerp(t,this.value,Math.exp(-this.factor*e)),this.value}},hexColorToArray:t=>{const e=t.length;if(4===e)return[17*parseInt(t.slice(1,2),16),17*parseInt(t.slice(2,3),16),17*parseInt(t.slice(3,4),16)];if(7===e)return[parseInt(t.slice(1,3),16),parseInt(t.slice(3,5),16),parseInt(t.slice(5,7),16)];throw new Error("Wait what")},arrayToHexColor:t=>{let e="#";return e+=("0"+s.clamp(parseInt(t[0]),0,255).toString(16)).slice(-2),e+=("0"+s.clamp(parseInt(t[1]),0,255).toString(16)).slice(-2),e+=("0"+s.clamp(parseInt(t[2]),0,255).toString(16)).slice(-2)},lerpHexColor:(t,e,n)=>{const r=s.hexColorToArray(t),i=s.hexColorToArray(e);return s.arrayToHexColor([s.lerp(r[0],i[0],n),s.lerp(r[1],i[1],n),s.lerp(r[2],i[2],n)])}};var u=s;var l=class{constructor(t){this.set(t)}gen(t){return t&&this.set(t),this.seed=this.seed^this.seed<<13,this.seed=this.seed^this.seed>>>17,this.seed=this.seed^this.seed<<5,this.seed/Math.pow(2,32)+.5}set(t){this.seed=t||this.seed||1}},c=n(2);const f=document.querySelector.bind(document),d=new l(c.seed),h=f("#canvas"),p=h.width=c.resolution[0],v=h.height=c.resolution[1],m=h.getContext("2d");m.lineCap="round",m.lineJoin="round";const g=(t,e,n,r)=>{m.beginPath(),m.moveTo(t,e),m.lineTo(n,r),m.stroke()},_=new a.a(h,c.frames);let y=!0;const b=new i.a({gui:f("#divAutomaton"),fps:c.fps,loop:!0,data:n(113)}),w=b.auto;b.addFxDefinition("mod",{name:"Modulo",description:"h",params:{d:{name:"Division",type:"float",default:1,min:0}},func(t){const e=t.params.d;return 0===e?t.v:t.v-Math.floor(t.v/e)*e}}),b.addFxDefinition("repeat",{name:"Repeat",description:"I stole best animation curve feature from AfterEffects",params:{duration:{name:"Duration",type:"float",default:1,min:0}},func(t){const e=t.params.duration;if(0===e)return t.v;const n=t.t0+(t.t-t.t0)%e;return t.getValue(n)}});const x=c.reflectionNum;let C=0;const k=new Array(x).fill(0).map(()=>({x:0,y:0,life:0,width:0,color:"#ffffff"}));let E=0,S=0;h.addEventListener("mousemove",t=>{E=t.offsetX,S=t.offsetY});const A=()=>{if(!f("#active").checked)return void setTimeout(A,100);b.time%b.length==0&&(k.forEach(t=>{t.life=0}),d.set(c.seed)),b.update(),m.fillStyle="#ff6a3d",m.fillRect(0,0,p,v);for(let t=0;t<2;t++){m.strokeStyle=u.lerpHexColor("#ff6a3d","#ffa13d",w("bg-blend")*(1+t)/2),m.lineWidth=p/4;for(let e=0;e<5;e++){const n=p/4.5*(e+.1+.3*t),r=v*(w("bg-height"+t)+.04*Math.sin(2*e+3*b.time+.4*t));g(n,p/4+r,n,p/4+v)}}const t=m.getImageData(0,0,p,v);if(m.clearRect(0,0,p,v),0!==w("clouds-height"))for(let t=0;t<2;t++)[{x:p/10*1,y:v/3,part:2,offset:5},{x:p/10*3,y:v/2,part:3,offset:2.2},{x:p/10*5,y:v/4,part:2,offset:1}].forEach(e=>{for(let n=0;n<e.part;n++){m.strokeStyle=0===t?"#ffd09e":"#ffffff",m.lineWidth=v/16*w("clouds-height");const r=e.x-p/48*(t*w("clouds-height")+3*Math.sin(2*n+e.offset)+Math.sin(.5*n+2*b.time)),i=e.y+n*v/32;g(r+p/8*w("clouds-left"),i,r+p/8*w("clouds-right"),i)}});{const t=p/5*4,e=.45*v,n=p/12,r=n*w("sun-size"),i=2*Math.PI*w("sun-angle0"),o=2*Math.PI*w("sun-angle1");if(w("sun-angle0")!==w("sun-angle1")){const r=n-p/128;m.lineWidth=p/64,m.strokeStyle="#ffd406",m.beginPath(),m.moveTo(t+r*Math.cos(i),e+r*Math.sin(i)),m.arc(t,e,r,i,o,!1),m.moveTo(t+r*Math.cos(i),e+r*Math.sin(i)),m.stroke()}m.fillStyle="#ffd406",m.beginPath(),m.arc(t,e,r,0,2*Math.PI,!1),m.fill();const a=p/16*w("sun-size"),s=t-(r-a)/Math.sqrt(2),u=e-(r-a)/Math.sqrt(2);m.fillStyle="#ffe565",m.beginPath(),m.arc(s,u,a*w("sun-sizeI"),0,2*Math.PI,!1),m.fill();const l=r*(1+w("sun-ray0")),c=r*(1+w("sun-ray1"));if(l!==c){m.lineWidth=Math.min(p/64,2*(c-l))*w("sun-size"),m.strokeStyle="#ffd406";for(let n=0;n<8;n++){const r=2*Math.PI*(n/8+w("sun-rayT"));g(t+l*Math.cos(r),e+l*Math.sin(r),t+c*Math.cos(r),e+c*Math.sin(r))}}}const e=m.getImageData(0,0,p,v);m.fillStyle="#ffffff",m.fillRect(0,0,p,v);const n=m.getImageData(0,0,p,v);for(let r=0;r<p*v*4;r+=4){const i=e.data[r+3]/255;n.data[r+0]=u.lerp(t.data[r+0],e.data[r+0],i),n.data[r+1]=u.lerp(t.data[r+1],e.data[r+1],i),n.data[r+2]=u.lerp(t.data[r+2],e.data[r+2],i)}m.putImageData(n,0,0),m.fillStyle=u.lerpHexColor("#ff6a3d","#9dff8e",w("ocean-blend"));const r=v*(1-w("ocean-height"));m.fillRect(0,r,p,v);for(let t=0;t<c.reflectionPerFrame;t++){const t=k[C].x=p*d.gen(),n=k[C].y=u.lofi(v/4*d.gen(),v/64)+v/64;k[C].width=d.gen()<.5?.5:1;const i=Math.floor(r-n),o=Math.max(0,4*(i*p+Math.floor(t))),a=u.arrayToHexColor(e.data.slice(o,o+3));"#000000"!==a&&(k[C].life=1,k[C].color=u.lerpHexColor("#9dff8e",a,.5),C=(C+1)%x)}k.forEach(t=>{if(t.life<=0)return;const e=t.x+p/4*(Math.exp(-t.life)-.5),n=t.x+p/4*(.5-Math.pow(t.life,2)),i=r+t.y;m.lineWidth=Math.min(v/32*t.width,2*Math.abs(n-e)),m.strokeStyle=u.lerpHexColor(u.lerpHexColor("#ff6a3d","#9dff8e",w("ocean-blend")),t.color,Math.pow(w("ocean-blend"),2)),g(e,i,n,i),t.life-=b.deltaTime}),m.lineWidth=p/7/2;for(let t=0;t<2;t++)for(let e=0;e<9;e++){m.fillStyle=m.strokeStyle=0===t?e%2==0?"#dfdfdf":"#e02500":e%2==0?"#ffffff":"#ff2a00";const n=[p/7*(e+.25)-p*w("shade-x"),v*w("shade-y")-v/4-p/7/2,p/7/2,v/4-v/32*t];m.fillRect(...n),m.strokeRect(...n)}m.lineWidth=p/16;for(let t=0;t<2;t++){m.fillStyle=m.strokeStyle=0===t?"#d0d0d0":"#eeeeee";const e=[p*(w("table-x")-t/32)-p/32-p/2,v*(w("table-y")-t/32)+p/32,p/2,v/4];m.fillRect(...e),m.strokeRect(...e)}m.save(),m.translate(p*(w("table-x")-.2),v*(w("table-y")+.05)),m.rotate(w("cocktail-rotate")),m.strokeStyle="#2eb56c",m.lineWidth=p/48,g(p/32*3,-v/16*5,p/32,-v/16*3),m.fillStyle=m.strokeStyle="#56ceff",m.lineWidth=p/48,g(-p/16,0,p/16,0),g(0,0,0,-v/8),m.lineWidth=p/32,m.beginPath(),m.moveTo(0,-v/8),m.lineTo(p/8,-v/4),m.lineTo(-p/8,-v/4),m.closePath(),m.fill(),m.stroke();for(let t=0;t<3;t++){m.fillStyle=u.lerpHexColor("#f0c556","#fe1fb7",t/2),m.beginPath(),m.moveTo(0,-v/8);for(let e=0;e<=32;e++){const n=1-.15*t+Math.sin(.2*e-w("cocktail-fluid"))/32;m.lineTo(p*(-1/8+.25*e/32)*n,v*(-1/8+-1/8*n))}m.closePath(),m.fill()}m.fillStyle=m.strokeStyle="#56ceff",m.lineWidth=p/64,g(-p/32*2.5,-v/32*7.5,-p/32,-v/32*6),m.restore(),y=!1,0,f("#save").checked&&_.add(),requestAnimationFrame(A)};A(),window.addEventListener("keydown",t=>{27===t.which&&(f("#active").checked=!1),32===t.which&&(b.isPlaying?b.pause():b.play())})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,